<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6</title>
    <url>/blog/2017/02/06/ES6/</url>
    <content><![CDATA[<h3 id="let-const"><a href="#let-const" class="headerlink" title="let  const"></a>let  const</h3><p>let和var类似，let必须先声明后使用，否则会报错，let不存在变量提升；<br>let声明变量，const声明常量；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">block</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">block</span>()</span><br></pre></td></tr></table></figure>
<p>上面代码说明let有块级作用域，不同块级相同变量不受影响；</p>
<h3 id="顶层对象的属性和全局变量关系"><a href="#顶层对象的属性和全局变量关系" class="headerlink" title="顶层对象的属性和全局变量关系"></a>顶层对象的属性和全局变量关系</h3><p>ES5中的顶层变量属性和全局变量挂钩，被认为是JS最大的败笔之一，<br>ES6中let，class和const声明的变量不再与顶层对象的属性关联</p>
<h3 id="Promise-主要解决异步回调地狱的问题"><a href="#Promise-主要解决异步回调地狱的问题" class="headerlink" title="Promise(主要解决异步回调地狱的问题)"></a>Promise(主要解决异步回调地狱的问题)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolve&#x27;</span>);</span><br><span class="line">    		<span class="comment">//成功回调</span></span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">		    <span class="comment">//失败回调</span></span><br><span class="line">		    <span class="title function_">reject</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;justgo&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>Promise.prototype.then()</code>第一个函数参数为resolve执行函数，第二个函数参数为reject执行函数</p>
</blockquote>
<h3 id="export-default-为模块指定默认输出"><a href="#export-default-为模块指定默认输出" class="headerlink" title="export default {}为模块指定默认输出"></a>export default {}为模块指定默认输出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他模块加载该模块时，import命令可以为该匿名函数指定任意名字</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="ES6支持方法简写"><a href="#ES6支持方法简写" class="headerlink" title="ES6支持方法简写"></a>ES6支持方法简写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a&#123;</span><br><span class="line">  <span class="attr">points</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6可以简写为</span></span><br><span class="line"><span class="keyword">var</span> a&#123;</span><br><span class="line">   <span class="title function_">points</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="export-export-default的异同点"><a href="#export-export-default的异同点" class="headerlink" title="export,export default的异同点"></a>export,export default的异同点</h3><p>1.export在js中可以有多个，export default只能出现一个；<br>2.在一个文件或模块中，export、import可以有多个，export default仅有一个<br>3.通过export方式导出，在导入时要加{ }，export default则不需要<br>4.export能直接导出变量表达式，export default不行。</p>
<h3 id="ES6的箭头函数"><a href="#ES6的箭头函数" class="headerlink" title="ES6的箭头函数"></a>ES6的箭头函数</h3><p>ES6中的箭头函数写法更加简单，表达更加简洁，简化回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> <span class="title function_">func</span> = v =&gt; v+<span class="number">1</span>;</span><br><span class="line"> <span class="comment">// 等于：</span></span><br><span class="line"> <span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">v</span>)&#123;<span class="keyword">return</span> v+<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line"><span class="comment">// 等于：</span></span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">66</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"><span class="comment">//此时console出来的是一个对象，</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr)))</span><br><span class="line"><span class="comment">//此时console出来的是去重之后的数组</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ES5</span>:</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name &#x27;</span>+v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;jone&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">ES6</span>:</span><br><span class="line"><span class="comment">// 又叫模板字符串</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = v =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`name <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;jone&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="ES6支持变量作为对象key，如："><a href="#ES6支持变量作为对象key，如：" class="headerlink" title="ES6支持变量作为对象key，如："></a>ES6支持变量作为对象key，如：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> c = &#123;[a]:<span class="string">&#x27;this is key a&#x27;</span>,[b]:<span class="string">&#x27;this is key b&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br></pre></td></tr></table></figure>

<h3 id="生成器函数指定下一次调用-next-时会生成什么-value"><a href="#生成器函数指定下一次调用-next-时会生成什么-value" class="headerlink" title="生成器函数指定下一次调用 next() 时会生成什么 value"></a>生成器函数指定下一次调用 next() 时会生成什么 value</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">greeter</span>(<span class="params"></span>)&#123;</span><br><span class="line">  yeild <span class="string">&quot;hello&quot;</span></span><br><span class="line">  yeild <span class="string">&quot;how are you&quot;</span></span><br><span class="line">  yeild <span class="string">&quot;good bye&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> greet = <span class="title function_">greeter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greet.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// &#x27;Hi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greet.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// &#x27;How are you?&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greet.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// &#x27;Bye&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greet.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">// 使用生成器生成无限个值：</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">idCreator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">yield</span> i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ids = <span class="title function_">idCreator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ids.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ids.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ids.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// etc...</span></span><br></pre></td></tr></table></figure>

<h3 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async&#x2F;Await"></a>Async&#x2F;Await</h3><p>在掌握了 promise 的用法后，你可能也会喜欢 async await，它只是一种基于 promise 的“语法糖”。在下面的示例中，我们创建了一个 async 函数，并 await greeter promise。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const greeter = new Promise((res, rej) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; res(&#x27;Hello world!&#x27;), 2000);</span><br><span class="line">&#125;)</span><br><span class="line">async function myFunc() &#123;</span><br><span class="line">  const greeting = await greeter;</span><br><span class="line">  console.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line">myFunc();</span><br><span class="line">// &#x27;Hello world!&#x27;</span><br><span class="line">// 可以看到，async创建的函数体内，加了await的函数，即使它是异步的，也会等他先执行完</span><br></pre></td></tr></table></figure>

<h3 id="ES2020新增链判断运算符-及-Null-undefined判断运算符"><a href="#ES2020新增链判断运算符-及-Null-undefined判断运算符" class="headerlink" title="ES2020新增链判断运算符 及 Null&#x2F;undefined判断运算符"></a>ES2020新增链判断运算符 及 Null&#x2F;undefined判断运算符</h3><p>1.<code>?.</code>链判断运算符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误的写法 这样如果user及前面的值没取到会报错</span></span><br><span class="line"><span class="keyword">let</span> name = data.<span class="property">result</span>.<span class="property">user</span>.<span class="property">name</span>;</span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line"><span class="keyword">let</span> name = (data &amp;&amp; data.<span class="property">result</span> &amp;&amp; data.<span class="property">result</span>.<span class="property">user</span> &amp;&amp; data.<span class="property">result</span>.<span class="property">user</span>.<span class="property">name</span>) || <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="comment">// 非常麻烦，所以ES2020引入 ?. 运算符</span></span><br><span class="line"><span class="keyword">let</span> name = data?.<span class="property">result</span>?.<span class="property">user</span>?.<span class="property">name</span> || <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="comment">// 上面例子中，只要有一层返回null或者undefined就不再往下取值，直接返回undefined</span></span><br><span class="line"><span class="comment">// 取一个数组指定下标值：</span></span><br><span class="line"><span class="keyword">let</span> arr = array?.[<span class="number">1</span>]</span><br><span class="line"><span class="comment">// 引申示例：</span></span><br><span class="line"><span class="keyword">if</span>(arr &amp;&amp; arr.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;...&#125;</span><br><span class="line"><span class="keyword">if</span>(arr &amp;&amp; arr.<span class="property">length</span>)&#123;...&#125; <span class="comment">//如果arr是数组，arr.length为0，按照隐式转换不会执行里面代码，所以不需要判断 &gt; 0 </span></span><br><span class="line"><span class="keyword">if</span>(arr?.<span class="property">length</span>)&#123;...&#125;  <span class="comment">//这就是链判断运算符的好处，节省代码，语义明确</span></span><br></pre></td></tr></table></figure>

<p>2.<code>??</code>Null&#x2F;undefined判断运算符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headerText = response.<span class="property">settings</span>.<span class="property">headerText</span> || <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> headerText = response.<span class="property">settings</span>.<span class="property">headerText</span> ?? <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>上面两种例子的区别是<code>||</code>左边的值为false、空字符串、0都会生效，而<code>??</code>只有左边为undefined或者null才会取右边的默认值；</p>
<h3 id="ES13-ECMAScript-2022-新增以下功能："><a href="#ES13-ECMAScript-2022-新增以下功能：" class="headerlink" title="ES13 (ECMAScript 2022) 新增以下功能："></a>ES13 (ECMAScript 2022) 新增以下功能：</h3><h5 id="顶级await"><a href="#顶级await" class="headerlink" title="顶级await"></a>顶级await</h5><p>从<a href="https://github.com/tc39/proposal-top-level-await">ES2022</a>开始，允许在模块的顶层独立使用<code>await</code>命令，使得上面那行代码不会报错了。它的主要目的是使用<code>await</code>解决模块异步加载的问题，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com&#x27;</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">const</span> showBlackTheme = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">includes</span>(<span class="string">&#x27;theme=black&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (showBlackTheme) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;/theme/black.js&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;/theme/white.js&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn"></a>Object.hasOwn</h5><p>我们经常需要知道对象上是否存在某个属性。怎么做？</p>
<p>“in”或“obj.hasOwnProperty”是用于此目的的两种最常用的方法。</p>
<p>如果指定的属性位于指定的对象或其原型链中，则 in 运算符返回 true。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;fatfish&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> p1) <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> p1) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>hasOwnProperty 方法返回一个布尔值，指示对象是否将指定属性作为其自己的属性（而不是继承它）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;fatfish&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)) <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure>
<p>以下情况使用<code>hasOwnProperty</code>会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>).<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// Uncaught TypeError: Object.create(...).hasOwnProperty is not a function</span></span><br></pre></td></tr></table></figure>
<p>不用担心，我们可以使用“Object.hasOwn”来规避这两个问题，这比“obj.hasOwnProperty”方法更方便、更安全。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123; <span class="attr">age</span>: <span class="number">24</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(object, <span class="string">&#x27;age&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123; <span class="attr">age</span>: <span class="number">24</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(object2, <span class="string">&#x27;age&#x27;</span>) <span class="comment">// false  The &#x27;age&#x27; attribute exists on the prototype</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object3 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(object3, <span class="string">&#x27;age&#x27;</span>) <span class="comment">// false an object that does not inherit from &quot;Object.prototype&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="数组-at-方法"><a href="#数组-at-方法" class="headerlink" title="数组.at()方法"></a>数组<code>.at()</code>方法</h5><blockquote>
<p>at 方法可以取正数或负数，这将决定它是从数组的头部还是尾部开始读取元素。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">const</span> lastItem = array.<span class="title function_">at</span>(-<span class="number">1</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">const</span> firstItem = array.<span class="title function_">at</span>(<span class="number">0</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h5 id="私有槽位-及方法"><a href="#私有槽位-及方法" class="headerlink" title="私有槽位#及方法"></a>私有槽位<code>#</code>及方法</h5><p>使用<code>#</code>来实现真正安全的私有属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  #money=<span class="number">1</span></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  get <span class="title function_">money</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#money</span><br><span class="line">  &#125;</span><br><span class="line">  set <span class="title function_">money</span> (money) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#money = money</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">showMoney</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#money)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;fatfish&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">money</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// p1.#money = 2 // We cannot modify #money in this way</span></span><br><span class="line">p1.<span class="property">money</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">money</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.#money) <span class="comment">// Uncaught SyntaxError: Private field &#x27;#money&#x27; must be declared in an enclosing class</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="实例方法：toReversed-，toSorted-，toSpliced-，with"><a href="#实例方法：toReversed-，toSorted-，toSpliced-，with" class="headerlink" title="实例方法：toReversed()，toSorted()，toSpliced()，with()"></a>实例方法：toReversed()，toSorted()，toSpliced()，with()</h5><p><code>toReversed()</code>对应<code>reverse()</code>，用来颠倒数组成员的位置。<br><code>toSorted()</code>对应<code>sort()</code>，用来对数组成员排序。<br><code>toSpliced()</code>对应<code>splice()</code>，用来在指定位置，删除指定数量的成员，并插入新成员。<br><code>with(index, value)</code>对应<code>splice(index, 1, value)</code>，用来将指定位置的成员替换为新的值。</p>
<p>两种方法对应用法完全一样，唯一区别的是不会改变原数组（要用babel转一下，有许多老款手机会报错不支持2024.5）</p>
<h5 id="实例方法：group-，groupToMap-只是提案，未能使用"><a href="#实例方法：group-，groupToMap-只是提案，未能使用" class="headerlink" title="实例方法：group()，groupToMap() (只是提案，未能使用)"></a>实例方法：group()，groupToMap() (只是提案，未能使用)</h5><h5 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h5><p>用于去除一个数的小数部分，返回整数部分</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub</title>
    <url>/blog/2017/11/17/GitHub/</url>
    <content><![CDATA[<h3 id="如何将本地文件上传到Github上？"><a href="#如何将本地文件上传到Github上？" class="headerlink" title="如何将本地文件上传到Github上？"></a>如何将本地文件上传到Github上？</h3><h4 id="1-在目录中创建新的-Git-仓库"><a href="#1-在目录中创建新的-Git-仓库" class="headerlink" title="1.在目录中创建新的 Git 仓库"></a>1.在目录中创建新的 Git 仓库</h4><p>进入到你本地项目的根目录下，执行 git init 命令，就可以创建一个 Git 仓库了</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h4 id="2、执行-git-add-命令，将项目的所有文件提交到暂存区"><a href="#2、执行-git-add-命令，将项目的所有文件提交到暂存区" class="headerlink" title="2、执行 git add . 命令，将项目的所有文件提交到暂存区"></a>2、执行 git add . 命令，将项目的所有文件提交到暂存区</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h4 id="3、执行git-commit-m-“注释语句”-命令，将暂存区内容添加到仓库中"><a href="#3、执行git-commit-m-“注释语句”-命令，将暂存区内容添加到仓库中" class="headerlink" title="3、执行git commit -m “注释语句” 命令，将暂存区内容添加到仓库中"></a>3、执行git commit -m “注释语句” 命令，将暂存区内容添加到仓库中</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;commitname&quot;</span><br></pre></td></tr></table></figure>

<h4 id="4、在-Github-新建一个-Repository，获取所创建的仓库的HTTPS地址"><a href="#4、在-Github-新建一个-Repository，获取所创建的仓库的HTTPS地址" class="headerlink" title="4、在 Github 新建一个 Repository，获取所创建的仓库的HTTPS地址"></a>4、在 Github 新建一个 Repository，获取所创建的仓库的HTTPS地址</h4><h4 id="5、将本地的仓库关联到Github上，上传代码到github远程仓库"><a href="#5、将本地的仓库关联到Github上，上传代码到github远程仓库" class="headerlink" title="5、将本地的仓库关联到Github上，上传代码到github远程仓库"></a>5、将本地的仓库关联到Github上，上传代码到github远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin [GitHub复制的https地址]</span><br></pre></td></tr></table></figure>
<h5 id="bingo！"><a href="#bingo！" class="headerlink" title="bingo！"></a>bingo！</h5>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>前端与原生交互</title>
    <url>/blog/2018/01/22/JS%E4%B8%8E%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h3 id="iOS中时间格式"><a href="#iOS中时间格式" class="headerlink" title="iOS中时间格式"></a>iOS中时间格式</h3><p>ios不支持时间格式如：new Date(2018-01-24)或者 new Date(2018.01.24)格式转换,会抛出NaN,所以要转换成<code>/</code>格式的，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let date = 2018-02-12;</span><br><span class="line">let newDate = date.replace(/-/g,&#x27;/&#x27;);</span><br><span class="line">let returnDate = new Date(newDate)</span><br><span class="line">加时分秒：</span><br><span class="line">例如：2018/10/10 12:34:59支持</span><br></pre></td></tr></table></figure>

<h3 id="iOS11-XX以上的iPhone注意"><a href="#iOS11-XX以上的iPhone注意" class="headerlink" title="iOS11.XX以上的iPhone注意"></a>iOS11.XX以上的iPhone注意</h3><p>1.如果页面中有弹窗有input标签的，此弹窗（包括所有input的父级元素）不能用fixed布局，当弹窗被键盘顶上去，会导致input光标错乱，而且弹窗上面的按钮无法点击；<br>解决办法：弹层改为position：absolute，其他所有元素都隐藏，相当于页面只留一个弹层，不再让弹层脱离流</p>
<h3 id="iOS环境css-active伪元素不起作用"><a href="#iOS环境css-active伪元素不起作用" class="headerlink" title="iOS环境css :active伪元素不起作用"></a>iOS环境css :active伪元素不起作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.addEventListener(&#x27;touchstart&#x27;, function () &#123; &#125;)</span><br></pre></td></tr></table></figure>
<p>如上，要给body或者点击的元素加touchstart事件，来触发:active伪元素</p>
<h3 id="IOS支持3D-touch的手机如果页面有a标签长按会触发3D-touch并且跳转浏览器"><a href="#IOS支持3D-touch的手机如果页面有a标签长按会触发3D-touch并且跳转浏览器" class="headerlink" title="IOS支持3D touch的手机如果页面有a标签长按会触发3D touch并且跳转浏览器"></a>IOS支持3D touch的手机如果页面有a标签长按会触发3D touch并且跳转浏览器</h3><h3 id="与原生交互方法定义"><a href="#与原生交互方法定义" class="headerlink" title="与原生交互方法定义"></a>与原生交互方法定义</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imgesPreview: function (data) &#123;</span><br><span class="line">    if (Basic.isAppVersionAbove &amp;&amp; Basic.isAppVersionAbove(&quot;2.4.7&quot;)) &#123;</span><br><span class="line">      //IOS</span><br><span class="line">      if (</span><br><span class="line">        window.webkit &amp;&amp;</span><br><span class="line">        window.webkit.messageHandlers &amp;&amp;</span><br><span class="line">        window.webkit.messageHandlers.imgesPreview</span><br><span class="line">      ) &#123;</span><br><span class="line">		//如果传入的data为空，ios要传一个空字符串&quot;&quot;</span><br><span class="line">        window.webkit.messageHandlers.imgesPreview.postMessage(JSON.stringify(data));</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">      //Android</span><br><span class="line">      if (window.AndroidCall &amp;&amp; window.AndroidCall.imgesPreview) &#123;</span><br><span class="line">        window.AndroidCall.imgesPreview(JSON.stringify(data));</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//调用：</span><br><span class="line">Webview.imgesPreview(dataObj);</span><br></pre></td></tr></table></figure>

<h3 id="ios下滚动背景body导致弹层中滚动条失效"><a href="#ios下滚动背景body导致弹层中滚动条失效" class="headerlink" title="ios下滚动背景body导致弹层中滚动条失效"></a>ios下滚动背景body导致弹层中滚动条失效</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//其中fixed为一个class给body设置fixed样式</span><br><span class="line">fixedHelper: (function(bodyCls) &#123;</span><br><span class="line">   var scrollTop;</span><br><span class="line">            return &#123;</span><br><span class="line">                afterOpen: function() &#123;</span><br><span class="line">					//document.scrollingElement 返回滚动文档的 Element 对象的引用</span><br><span class="line">                    scrollTop = document.scrollingElement.scrollTop;</span><br><span class="line">                    document.body.classList.add(bodyCls);</span><br><span class="line">                    document.body.style.top = -scrollTop + &#x27;px&#x27;;</span><br><span class="line">                &#125;,</span><br><span class="line">                beforeClose: function() &#123;</span><br><span class="line">                    document.body.classList.remove(bodyCls);</span><br><span class="line">                    // scrollTop lost after set position:fixed, restore it back.</span><br><span class="line">                    document.scrollingElement.scrollTop = scrollTop;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;         </span><br><span class="line">&#125;)(&#x27;fixed&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="拦截Android自带的物理返回键"><a href="#拦截Android自带的物理返回键" class="headerlink" title="拦截Android自带的物理返回键"></a>拦截Android自带的物理返回键</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拦截安卓回退按钮</span><br><span class="line">    history.pushState(null, null, location.href);</span><br><span class="line">    window.addEventListener(&quot;popstate&quot;, function(event) &#123;</span><br><span class="line">      history.pushState(null, null, location.href);</span><br><span class="line">      //此处加入回退时你要执行的代码</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="在app里用JS写滑动手势"><a href="#在app里用JS写滑动手势" class="headerlink" title="在app里用JS写滑动手势"></a>在app里用JS写滑动手势</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;body&quot;).on(&quot;touchstart&quot;, function (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            startX = e.originalEvent.changedTouches[0].pageX,</span><br><span class="line">                startY = e.originalEvent.changedTouches[0].pageY;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).on(&quot;touchmove&quot;, function (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            moveEndX = e.originalEvent.changedTouches[0].pageX,</span><br><span class="line">                moveEndY = e.originalEvent.changedTouches[0].pageY,</span><br><span class="line">                X = moveEndX - startX,</span><br><span class="line">                Y = moveEndY - startY;</span><br><span class="line"></span><br><span class="line">            if (Math.abs(X) &gt; Math.abs(Y) &amp;&amp; X &gt; 0) &#123;</span><br><span class="line">                // alert(&quot;left 2 right&quot;);</span><br><span class="line">                $(&quot;.show&quot;).hide()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="js监测手机浏览器是否切换到后台应用"><a href="#js监测手机浏览器是否切换到后台应用" class="headerlink" title="js监测手机浏览器是否切换到后台应用"></a>js监测手机浏览器是否切换到后台应用</h3><blockquote>
<p>这个功能常见作用于在浏览器h5页面唤醒app（前提是已安装app）浏览器就会被切换到后台装态</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*这时候</span></span><br><span class="line"><span class="comment">document.webkitVisibilityState==&#x27;hidden&#x27;表示已挂起 &#x27;visible&#x27;表示已切换到前台）*/</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;webkitvisibilitychange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">webkitVisibilityState</span> == <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>好吧，其实并没有说得很么卵用（至少目前的我是这么认为的），因为产品逻辑都会说，如果没有安装app要跳转下载页面，这时候就尴尬了，因为浏览器并没有改变webkitVisibilityState的值，所以无法走进这个方法（只有浏览器切换前后台才会改变）</p>
</blockquote>
<h3 id="非app环境打开页面自动提示-自动跳转app中对应页面，未成功跳转则跳转app下载页"><a href="#非app环境打开页面自动提示-自动跳转app中对应页面，未成功跳转则跳转app下载页" class="headerlink" title="非app环境打开页面自动提示&#x2F;自动跳转app中对应页面，未成功跳转则跳转app下载页"></a>非app环境打开页面自动提示&#x2F;自动跳转app中对应页面，未成功跳转则跳转app下载页</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定链接提示跳转/下载APP</span></span><br><span class="line"><span class="keyword">if</span> (!util.<span class="title function_">isApp</span>()) &#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">openApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (location.<span class="property">pathname</span> == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">//如果是首页，打开app首页</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;appname://&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//其他页面链接加参数后面</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span> =</span><br><span class="line">        <span class="string">&quot;appname://?openType=H5&amp;urlEncode=&quot;</span> +</span><br><span class="line">        <span class="built_in">encodeURIComponent</span>(location.<span class="property">href</span>) +</span><br><span class="line">        <span class="string">&quot;&amp;url=&quot;</span> +</span><br><span class="line">        location.<span class="property">href</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dates = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(iPhone|iPod|iPad);?/i</span>)) &#123;</span><br><span class="line">    <span class="comment">//ios设备</span></span><br><span class="line">    <span class="comment">//执行打开app方法</span></span><br><span class="line">    <span class="title function_">openApp</span>();</span><br><span class="line">    <span class="comment">//未打开app执行下面的方法跳转下载</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - dates &lt; <span class="number">1800</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;https://itunes.apple.com/cn/app&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/android/i</span>)) &#123;</span><br><span class="line">    <span class="comment">//Android设备</span></span><br><span class="line">    <span class="comment">//执行打开app方法</span></span><br><span class="line">    <span class="title function_">openApp</span>();</span><br><span class="line">    <span class="comment">//未打开app执行下面的方法跳转下载</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - dates &lt; <span class="number">1800</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;http://a.app.qq.com/o/simple.jsp&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>好记性不如markdown</p>
</blockquote>
]]></content>
      <categories>
        <category>Native</category>
      </categories>
      <tags>
        <tag>Native</tag>
      </tags>
  </entry>
  <entry>
    <title>JS常见问题</title>
    <url>/blog/2016/12/26/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="do-not-track-禁止跟踪"><a href="#do-not-track-禁止跟踪" class="headerlink" title="do not track (禁止跟踪)"></a>do not track (禁止跟踪)</h3><p>链接：<a href="https://www.zhangxinxu.com/wordpress/2018/07/navigator-do-not-track-api/">https://www.zhangxinxu.com/wordpress/2018/07/navigator-do-not-track-api/</a></p>
<h3 id="Ajax跨域问题解决"><a href="#Ajax跨域问题解决" class="headerlink" title="Ajax跨域问题解决"></a>Ajax跨域问题解决</h3><p>链接：<a href="http://www.cnblogs.com/pandang/p/5341250.html">http://www.cnblogs.com/pandang/p/5341250.html</a></p>
<h3 id="JS判断浏览器种类IE，FF，Opera-Safari-chrome…"><a href="#JS判断浏览器种类IE，FF，Opera-Safari-chrome…" class="headerlink" title="JS判断浏览器种类IE，FF，Opera,Safari,chrome…"></a>JS判断浏览器种类IE，FF，Opera,Safari,chrome…</h3><p>&#x2F;&#x2F;基本原理就是根据浏览器的userAgent判断<br>var userAgent &#x3D; navigator.userAgent;<br>&#x2F;&#x2F;例如：<br>if (userAgent.indexOf(“Safari”) &gt; -1) {<br>        return “Safari”;<br>} &#x2F;&#x2F;判断是否Safari浏览器</p>
<h3 id="encodeURIComponent-和decodeURIComponent-函数"><a href="#encodeURIComponent-和decodeURIComponent-函数" class="headerlink" title="encodeURIComponent()和decodeURIComponent()函数"></a>encodeURIComponent()和decodeURIComponent()函数</h3><ol>
<li><p>encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</p>
<blockquote>
<p>请注意 encodeURIComponent() 函数 与 encodeURI() 函数的区别之处，前者假定它的参数是 URI 的一部分（比如协议、主机名、路径或查询字符串）。因此 encodeURIComponent() 函数将转义用于分隔 URI 各个部分的标点符号。</p>
</blockquote>
</li>
<li><p>decodeURIComponent() 对 encodeURIComponent() 函数编码的 URI 进行解码</p>
</li>
</ol>
<h3 id="escape-encodeURI-encodeURIComponent"><a href="#escape-encodeURI-encodeURIComponent" class="headerlink" title="escape() encodeURI() encodeURIComponent()"></a>escape() encodeURI() encodeURIComponent()</h3><p>escape() 方法：</p>
<p>采用ISO Latin字符集对指定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非ASCII字符都将被转化成%xx格式的字符编码（xx等于该字符在字符集表里面的编码的16进制数字）。比如，空格符对应的编码是%20。unescape方法与此相反。不会被此方法编码的字符： @ * &#x2F; +</p>
<ul>
<li>对应的解码方法：unescape()</li>
</ul>
<p>encodeURI() 方法：<br>把URI字符串采用UTF-8编码格式转化成escape格式的字符串。不会被此方法编码的字符：! @ # $&amp; * ( ) &#x3D; : &#x2F; ; ? + ‘</p>
<ul>
<li>对应的解码方法：decodeURI()</li>
</ul>
<p>encodeURIComponent() 方法：</p>
<p>把URI字符串采用UTF-8编码格式转化成escape格式的字符串。与encodeURI()相比，这个方法将对更多的字符进行编码，比如 &#x2F; 等字符。所以如果字符串里面包含了URI的几个部分的话，不能用这个方法来进行编码，否则 &#x2F; 字符被编码之后URL将显示错误。不会被此方法编码的字符：! * ( ) </p>
<ul>
<li>对应的解码方法：decodeURIComponent()</li>
</ul>
<h3 id="JS监听动画完成事件"><a href="#JS监听动画完成事件" class="headerlink" title="JS监听动画完成事件"></a>JS监听动画完成事件</h3><p>tt.addEventListener(“webkitAnimationEnd”, function(){ &#x2F;&#x2F;动画结束时事件<br>this.className &#x3D; this.className.replace(‘change’, ‘ ‘);<br>}, false); </p>
<h3 id="元素scrollTop属性"><a href="#元素scrollTop属性" class="headerlink" title="元素scrollTop属性"></a>元素scrollTop属性</h3><blockquote>
<p>只有元素设置了overflow样式，且不为hidden时才会生效，jquery对象要加下标[index]，否则找不到此属性；</p>
</blockquote>
<h3 id="JS处理Range"><a href="#JS处理Range" class="headerlink" title="JS处理Range"></a>JS处理Range</h3><blockquote>
<p>所谓”Range”，是指HTML文档中任意一段内容。一个Range的起始点和结束点位置任意，甚至起始点和结束点可以是一样的（也就是空Range）。最常见的Range是用户文本选择范围(user text selection)。当用户选择了页面上的某一段文字后，你就可以把这个选择转为Range。当然，你也可以直接用程序定义Range<br>举几个常用的处理Range的方法：<br>1.获取用户选中的文本：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">oBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userSelection, text;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">getSelection</span>) &#123; </span><br><span class="line">        <span class="comment">//现代浏览器</span></span><br><span class="line">        userSelection = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">selection</span>) &#123; </span><br><span class="line">        <span class="comment">//IE浏览器 考虑到Opera，应该放在后面</span></span><br><span class="line">        userSelection = <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">createRange</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(text = userSelection.<span class="property">text</span>)) &#123;</span><br><span class="line">        text = userSelection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">alert</span>(text);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>2.点击表单内容全选：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SelectText</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(obj.<span class="property">createTextRange</span>)&#123;<span class="comment">//IE浏览器</span></span><br><span class="line">    <span class="keyword">var</span> range = obj.<span class="title function_">createTextRange</span>();              </span><br><span class="line">    range.<span class="title function_">moveEnd</span>(<span class="string">&quot;character&quot;</span>,结束序号);</span><br><span class="line">    range.<span class="title function_">moveStart</span>(<span class="string">&quot;character&quot;</span>, 起始序号);</span><br><span class="line">    range.<span class="title function_">select</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//非IE浏览器</span></span><br><span class="line">    obj.<span class="title function_">setSelectionRange</span>(起始序号, 结束序号);</span><br><span class="line">    obj.<span class="title function_">focus</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他详见张鑫旭博客：<br><a href="">http://www.zhangxinxu.com/wordpress/2011/04/js-range-html%E6%96%87%E6%A1%A3%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E9%80%89%E4%B8%AD%E3%80%81%E5%BA%93%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/</a></p>
<h3 id="clipboard-js实现移动端复制功能-！！！重中之重：iOS下要给点击的元素加onclick-””或者cursor：pointer，总之就是让iOS可以识别到这个元素可点击"><a href="#clipboard-js实现移动端复制功能-！！！重中之重：iOS下要给点击的元素加onclick-””或者cursor：pointer，总之就是让iOS可以识别到这个元素可点击" class="headerlink" title="clipboard.js实现移动端复制功能(！！！重中之重：iOS下要给点击的元素加onclick&#x3D;””或者cursor：pointer，总之就是让iOS可以识别到这个元素可点击)"></a>clipboard.js实现移动端复制功能(！！！重中之重：iOS下要给点击的元素加onclick&#x3D;””或者cursor：pointer，总之就是让iOS可以识别到这个元素可点击)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;J-browserLink&quot;</span> <span class="attr">style</span>=<span class="string">&quot;cursor: pointer;&quot;</span>&gt;</span>点击复制1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/clipboard.js/1.6.0/clipboard.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> clipboard1 = <span class="keyword">new</span> <span class="title class_">Clipboard</span>(<span class="string">&quot;.J-browserLink&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">text</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> $(<span class="string">&quot;.J-browserLink&quot;</span>).<span class="title function_">html</span>()</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">clipboard1.<span class="title function_">on</span>(<span class="string">&quot;success&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">alert</span>(<span class="string">&#x27;复制成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h3><p>返回当前 URL 的路径名：<br>console.log(location.pathname);</p>
<p>加载一个新的文档：<br>window.location.assign(“<a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a>“)</p>
<p>  ● location.hostname 返回 web 主机的域名<br>  ● location.pathname 返回当前页面的路径和文件名<br>  ● location.port 返回 web 主机的端口 （80 或 443）<br>  ● location.protocol 返回所使用的 web 协议（http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F;）</p>
<h3 id="app内返回不刷新导致订单状态没有更新解决，强制刷新"><a href="#app内返回不刷新导致订单状态没有更新解决，强制刷新" class="headerlink" title="app内返回不刷新导致订单状态没有更新解决，强制刷新"></a>app内返回不刷新导致订单状态没有更新解决，强制刷新</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JumpUrlForReturn</span>: <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">//定义页面展示时触发事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onpageshow</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="comment">//从缓存中读取页面时触发</span></span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">persisted</span> &amp;&amp; <span class="title class_">WebStorage</span>.<span class="property">forceRefresh</span>) &#123;</span><br><span class="line">            <span class="title class_">WebStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;forceRefresh&quot;</span>)</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>(<span class="literal">true</span>);<span class="comment">//强制刷新                  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//兼容不支持onpageshow: event.persisted </span></span><br><span class="line">    <span class="keyword">var</span> refresh = hzch5.<span class="title function_">getParameterByName</span>(<span class="string">&quot;refresh&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> curl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">    <span class="keyword">if</span> (curl.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (refresh &amp;&amp; refresh != <span class="string">&quot;&quot;</span> &amp;&amp; curl.<span class="title function_">indexOf</span>(<span class="string">&quot;refresh&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            curl = curl.<span class="title function_">replace</span>(<span class="string">&quot;refresh=&quot;</span> + refresh, <span class="string">&quot;refresh=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            curl += <span class="string">&quot;&amp;refresh=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        curl += <span class="string">&quot;?refresh=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">replaceState</span>(<span class="string">&quot;&quot;</span>, <span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">title</span>, curl);</span><br><span class="line">    <span class="comment">//End 兼容不支持onpageshow: event.persisted </span></span><br><span class="line"></span><br><span class="line">    url &amp;&amp; (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过身份证号得到生日，性别，年龄"><a href="#通过身份证号得到生日，性别，年龄" class="headerlink" title="通过身份证号得到生日，性别，年龄"></a>通过身份证号得到生日，性别，年龄</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取出生日期，7位到15位为出生年月</span></span><br><span class="line">birth = <span class="title class_">UUserCard</span>.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">10</span>)</span><br><span class="line"> + <span class="string">&quot;-&quot;</span> + <span class="title class_">UUserCard</span>.<span class="title function_">substring</span>(<span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">  + <span class="string">&quot;-&quot;</span> + <span class="title class_">UUserCard</span>.<span class="title function_">substring</span>(<span class="number">12</span>, <span class="number">14</span>);</span><br><span class="line"><span class="comment">//获取性别（其原理就是取身份证第17位除以2，余数1是男，否则是女）</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">UUserCard</span>.<span class="title function_">substr</span>(<span class="number">16</span>, <span class="number">1</span>)) % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="comment">/*获取年龄（年龄=当前年-身份证7至10位数字，</span></span><br><span class="line"><span class="comment">如果月比当前月小或者月与当前月相等&amp;&amp;日比当前日小于等于，则年龄+1）*/</span></span><br></pre></td></tr></table></figure>

<h3 id="多个同类型元素控制别的同类型的元素"><a href="#多个同类型元素控制别的同类型的元素" class="headerlink" title="多个同类型元素控制别的同类型的元素"></a>多个同类型元素控制别的同类型的元素</h3><p>举个栗子：<br>通过点击当前tab要控制侧边栏的导航tab，因为两个tab中的同级元素很多，所以可以根据他们的id来分别控制；<br>给点击的tab元素设置不同的id,<code>如：current1</code>，给被控制的元素设置id，<code>如：nav-current1</code>,与点击的元素id对应就好，然后就可以根据<code>nav-xxx</code><br>来对应元素进行操作</p>
<h3 id="JS实现滚动显示，停止滚动隐藏"><a href="#JS实现滚动显示，停止滚动隐藏" class="headerlink" title="JS实现滚动显示，停止滚动隐藏"></a>JS实现滚动显示，停止滚动隐藏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   $(<span class="string">&#x27;.div&#x27;</span>).<span class="title function_">hide</span>()</span><br><span class="line">   <span class="keyword">if</span> (timer)&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">   &#125;</span><br><span class="line">   timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      $(<span class="string">&#x27;.div&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">   &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JS兼容H5手机实现弹窗出现禁止背景滚动"><a href="#JS兼容H5手机实现弹窗出现禁止背景滚动" class="headerlink" title="JS兼容H5手机实现弹窗出现禁止背景滚动"></a>JS兼容H5手机实现弹窗出现禁止背景滚动</h3><p>既然我们要阻止页面滚动，那么何不将其固定在视窗（即position: fixed），这样它就无法滚动了，当蒙层关闭时再释放。<br>当然还有一些细节要考虑，将页面固定视窗后，内容会回头最顶端，这里我们需要记录一下，同步top值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bodyEl = <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line"><span class="keyword">let</span> top = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stopBodyScroll</span> (<span class="params">isFixed</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isFixed) &#123;</span><br><span class="line">    top = <span class="variable language_">window</span>.<span class="property">scrollY</span></span><br><span class="line"></span><br><span class="line">    bodyEl.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    bodyEl.<span class="property">style</span>.<span class="property">top</span> = -top + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bodyEl.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    bodyEl.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, top) <span class="comment">// 回到原先的top</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js获取链接中的参数"><a href="#js获取链接中的参数" class="headerlink" title="js获取链接中的参数"></a>js获取链接中的参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//name为参数名，queryString为链接</span></span><br><span class="line"><span class="attr">getParameterByName</span>: <span class="keyword">function</span> (<span class="params">name,queryString</span>) &#123;</span><br><span class="line">  name = name.<span class="title function_">replace</span>(<span class="regexp">/[\[]/</span>, <span class="string">&quot;\\[&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/[\]]/</span>, <span class="string">&quot;\\]&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!queryString) &#123;</span><br><span class="line">      queryString = location.<span class="property">search</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;[\\?&amp;]&quot;</span> + name + <span class="string">&quot;=([^&amp;#]*)&quot;</span>),</span><br><span class="line">  results = regex.<span class="title function_">exec</span>(queryString);</span><br><span class="line">  <span class="keyword">return</span> results == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="built_in">decodeURIComponent</span>(results[<span class="number">1</span>].<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>, <span class="string">&quot; &quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="canvas图片跨域"><a href="#canvas图片跨域" class="headerlink" title="canvas图片跨域"></a>canvas图片跨域</h3><p>因为生成图片时，生成图片路径和已有图片路径不同，可以把图片转为base64<br>canvas.toDataURL(type, encoderOptions);</p>
<h3 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h3><p>1.邮箱：&#x2F;^\w+((-\w+)|(.\w+))*@[A-Za-z0-9]+((.|-)[A-Za-z0-9]+)<em>.[A-Za-z0-9]+$&#x2F;<br>2.手机号：&#x2F;^1[3|4|5|6|7|8|9][0-9]{9}$&#x2F;<br>3.价格匹配：&#x2F;(?!^0</em>(.0{1,2})?$)^\d{1,13}(.\d{1,2})?$&#x2F;  <!-- 如果要精确到小数点任意位数，把最后面{1,2}中的2改为指定位数 --><br>4.中文匹配：&#x2F;[\u4e00-\u9fa5]+&#x2F;g</p>
<h3 id="对象数组合并相同ID的对象并计算出数量"><a href="#对象数组合并相同ID的对象并计算出数量" class="headerlink" title="对象数组合并相同ID的对象并计算出数量"></a>对象数组合并相同ID的对象并计算出数量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用reduce累加器特性过滤相同id的项并计算数量</span></span><br><span class="line"><span class="keyword">let</span> sameArr = [&#123;<span class="attr">id</span>:<span class="number">111</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">222</span>,<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">111</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> arr = sameArr;</span><br><span class="line">arr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> find = obj.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === item.<span class="property">id</span>)</span><br><span class="line"><span class="keyword">let</span> _d = &#123;</span><br><span class="line">    ...item,</span><br><span class="line">    <span class="attr">goods_count</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">isShow</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (find) &#123;</span><br><span class="line">    find.<span class="property">goods_count</span>++;</span><br><span class="line">    find.<span class="property">isShow</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _d.<span class="property">isShow</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">push</span>(_d)</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="comment">// console.log(arr)</span></span><br><span class="line">sameArr = arr;</span><br></pre></td></tr></table></figure>

<h3 id="HTML5-使用地理定位（谷歌浏览器无法获取位置，应该是被禁了，qq浏览器也不行，总之废了，EDGE倒是可以）"><a href="#HTML5-使用地理定位（谷歌浏览器无法获取位置，应该是被禁了，qq浏览器也不行，总之废了，EDGE倒是可以）" class="headerlink" title="HTML5 - 使用地理定位（谷歌浏览器无法获取位置，应该是被禁了，qq浏览器也不行，总之废了，EDGE倒是可以）"></a>HTML5 - 使用地理定位（谷歌浏览器无法获取位置，应该是被禁了，qq浏览器也不行，总之废了，EDGE倒是可以）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (navigator.<span class="property">geolocation</span>) &#123;</span><br><span class="line">		navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(showPosition, showError);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;此浏览器不支持地理位置&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getLocation</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showPosition</span>(<span class="params">position</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Latitude: &quot;</span> + position.<span class="property">coords</span>.<span class="property">latitude</span> + <span class="string">&quot; Longitude: &quot;</span> + position.<span class="property">coords</span>.<span class="property">longitude</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">	<span class="keyword">switch</span> (error.<span class="property">code</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> error.<span class="property">PERMISSION_DENIED</span>:</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户拒绝了地理位置的请求&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> error.<span class="property">POSITION_UNAVAILABLE</span>:</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;位置信息不可用&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> error.<span class="property">TIMEOUT</span>:</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取用户位置的请求超时&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> error.<span class="property">UNKNOWN_ERROR</span>:</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生未知错误&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Selection-collapse-方法可以收起当前选区到一个点。文档不会发生改变。如果选区的内容是可编辑的并且焦点落在上面，则光标会在该处闪烁"><a href="#Selection-collapse-方法可以收起当前选区到一个点。文档不会发生改变。如果选区的内容是可编辑的并且焦点落在上面，则光标会在该处闪烁" class="headerlink" title="Selection.collapse() 方法可以收起当前选区到一个点。文档不会发生改变。如果选区的内容是可编辑的并且焦点落在上面，则光标会在该处闪烁"></a>Selection.collapse() 方法可以收起当前选区到一个点。文档不会发生改变。如果选区的内容是可编辑的并且焦点落在上面，则光标会在该处闪烁</h3><p>要获取用于检查或修改的 Selection 对象，请调用 window.getSelection()<br>window.getSelection().collapse(parentNode, offset);<br>参数<br>parentNode<br>光标落在的目标节点。<br>offset 可选<br>落在节点的偏移量。</p>
<h3 id="防抖：延时执行函数，如果存在定时器，则清空定时器，重新设置定时器延时执行；节流：先立刻执行一次函数，进入延时，直到这个函数执行完成，才能再次执行函数"><a href="#防抖：延时执行函数，如果存在定时器，则清空定时器，重新设置定时器延时执行；节流：先立刻执行一次函数，进入延时，直到这个函数执行完成，才能再次执行函数" class="headerlink" title="防抖：延时执行函数，如果存在定时器，则清空定时器，重新设置定时器延时执行；节流：先立刻执行一次函数，进入延时，直到这个函数执行完成，才能再次执行函数"></a>防抖：延时执行函数，如果存在定时器，则清空定时器，重新设置定时器延时执行；节流：先立刻执行一次函数，进入延时，直到这个函数执行完成，才能再次执行函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay) <span class="comment">// 简化写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><p>对于小数组，我们可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.<span class="title function_">concat</span>(arr2);  <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>
<p>不过，<code>concat()</code>这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用<code>Array.prototype.push.apply(arr1,arr2)</code>来替代创建一个新数组。<br>这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(arr1, arr2); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>push 方法具有通用性。该方法和 <code>call()</code> 或 <code>apply()</code> 一起使用时，可应用在类似数组的对象上。<code>push</code> 方法根据 <code>length</code> 属性来决定从哪里开始插入给定的值。如果 <code>length</code> 不能被转成一个数值，则插入的元素索引为 0，包括 <code>length</code> 不存在时。当 <code>length</code> 不存在时，将会创建它。</p>
<p>唯一的原生类数组（array-like）对象是 <code>Strings</code>，尽管如此，它们并不适用该方法，因为字符串是不可改变的。</p>
</blockquote>
<h3 id="判断页面内容与可视窗口的交叉关系"><a href="#判断页面内容与可视窗口的交叉关系" class="headerlink" title="判断页面内容与可视窗口的交叉关系"></a>判断页面内容与可视窗口的交叉关系</h3><blockquote>
<p>IntersectionObserver</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intersectionObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果 intersectionRatio 为 0，则目标在视野外，</span></span><br><span class="line">  <span class="comment">// 我们不需要做任何事情。</span></span><br><span class="line">  <span class="keyword">if</span> (entries[<span class="number">0</span>].<span class="property">intersectionRatio</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loadItems</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loaded new items&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">intersectionObserver.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.scrollerFooter&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="递归的核心用法就是函数内部判断并自调用，而重要的是参数，传入的参数和自调用参数形成层级递归遍历"><a href="#递归的核心用法就是函数内部判断并自调用，而重要的是参数，传入的参数和自调用参数形成层级递归遍历" class="headerlink" title="递归的核心用法就是函数内部判断并自调用，而重要的是参数，传入的参数和自调用参数形成层级递归遍历"></a>递归的核心用法就是函数内部判断并自调用，而重要的是参数，传入的参数和自调用参数形成层级递归遍历</h3><h3 id="structuredClone"><a href="#structuredClone" class="headerlink" title="structuredClone()"></a>structuredClone()</h3><p>这个函数可以用来进行深拷贝 JavaScript 变量。 也支持循环引用，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">name</span>: <span class="string">&quot;MDN&quot;</span> &#125;;</span><br><span class="line">original.<span class="property">itself</span> = original;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="title function_">structuredClone</span>(original);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(clone !== original); <span class="comment">// the objects are not the same (not same identity)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(clone.<span class="property">name</span> === <span class="string">&quot;MDN&quot;</span>); <span class="comment">// they do have the same values</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(clone.<span class="property">itself</span> === clone); <span class="comment">// and the circular reference is preserved</span></span><br></pre></td></tr></table></figure>

<h3 id="切换全屏模式"><a href="#切换全屏模式" class="headerlink" title="切换全屏模式"></a>切换全屏模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fullscreen</span> = (<span class="params">mode = <span class="literal">true</span>, el = <span class="string">&#x27;body&#x27;</span></span>) =&gt;</span><br><span class="line">  mode</span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el).<span class="title function_">requestFullscreen</span>()</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">exitFullscreen</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">fullscreen</span>(); <span class="comment">// 在全屏模式打开网页</span></span><br><span class="line"><span class="title function_">fullscreen</span>(<span class="literal">false</span>); <span class="comment">// 退出全屏</span></span><br></pre></td></tr></table></figure>

<h3 id="时间格式转换"><a href="#时间格式转换" class="headerlink" title="时间格式转换"></a>时间格式转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">formatDate</span> = (<span class="params">date, format = <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 如果 date 是字符串或数字，转换为 Date 对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> date === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> date === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 date 不是 Date 对象，抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!(date <span class="keyword">instanceof</span> <span class="title class_">Date</span>) || <span class="built_in">isNaN</span>(date.<span class="title function_">getTime</span>())) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid date&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义时间部分的映射</span></span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="attr">YYYY</span>: date.<span class="title function_">getFullYear</span>(), <span class="comment">// 年份</span></span><br><span class="line">    <span class="attr">MM</span>: <span class="title class_">String</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>), <span class="comment">// 月份，补零</span></span><br><span class="line">    <span class="attr">DD</span>: <span class="title class_">String</span>(date.<span class="title function_">getDate</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>), <span class="comment">// 日期，补零</span></span><br><span class="line">    <span class="attr">HH</span>: <span class="title class_">String</span>(date.<span class="title function_">getHours</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>), <span class="comment">// 小时，补零</span></span><br><span class="line">    <span class="attr">mm</span>: <span class="title class_">String</span>(date.<span class="title function_">getMinutes</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>), <span class="comment">// 分钟，补零</span></span><br><span class="line">    <span class="attr">ss</span>: <span class="title class_">String</span>(date.<span class="title function_">getSeconds</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>), <span class="comment">// 秒，补零</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 替换格式字符串中的占位符</span></span><br><span class="line">  <span class="keyword">return</span> format.<span class="title function_">replace</span>(<span class="regexp">/YYYY|MM|DD|HH|mm|ss/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> map[match]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Date 对象方法<br>每个get方法都有对应的一个set方法，如：<br>getFullYear() 对应 setFullYear()<br>getMonth() 对应 setMonth()<br>getTime() 对应 setTime() &#x2F;&#x2F;返回 1970 年 1 月 1 日至今的毫秒数  和  	以毫秒设置 Date 对象。<br>Date.parse()和getTime()的区别：<br>getTime()方法是把一个date对象转成毫秒；parse()方法是把一个时间格式的字符串转换成毫秒。</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS字符串控制</title>
    <url>/blog/2016/11/30/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E6%95%B0%E7%BB%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="split-方法"><a href="#split-方法" class="headerlink" title=".split()方法"></a>.split()方法</h3><blockquote>
<p>stringObject.split(separator,howm)<br>separator: 必需，字符串或正则表达式，以这个字符对应要操作的字符串中的字符分割<br>howm: 可选，返回数组的最大长度<br>注 以多个字符分割字符串 正则搞定：<br>stringObject.split(&#x2F;[-,.&#x2F;]&#x2F;)</p>
</blockquote>
<h3 id="splice-方法"><a href="#splice-方法" class="headerlink" title=".splice()方法"></a>.splice()方法</h3><blockquote>
<p>array.splice(index,howmany,item1,…..,itemX);<br>参数1必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置。，<br>参数2必需。要删除的项目数量。如果设置为 0，则不会删除项目。，<br>参数3可选。向数组添加的新项目。</p>
</blockquote>
<h3 id="slice-方法-可从已有的数组中返回选定的元素"><a href="#slice-方法-可从已有的数组中返回选定的元素" class="headerlink" title=".slice()方法   可从已有的数组中返回选定的元素"></a>.slice()方法   可从已有的数组中返回选定的元素</h3><blockquote>
<p>包含起始位置，不包含结束位置</p>
</blockquote>
<h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title=".reverse()方法"></a>.reverse()方法</h3><blockquote>
<p>arrayPbject.reverse()<br>用于颠倒数组中元素顺序</p>
</blockquote>
<h3 id="join-方法-把数组中的所有元素放入一个字符串"><a href="#join-方法-把数组中的所有元素放入一个字符串" class="headerlink" title=".join()方法  &#x2F;&#x2F;把数组中的所有元素放入一个字符串"></a>.join()方法  &#x2F;&#x2F;把数组中的所有元素放入一个字符串</h3><blockquote>
<p>arrayObject.join(separator)<br>参数用来指定要使用的分隔符，默认为逗号</p>
</blockquote>
<h3 id="push-pop-unshift-shift-方法"><a href="#push-pop-unshift-shift-方法" class="headerlink" title=".push(),.pop(),.unshift(),.shift()方法"></a>.push(),.pop(),.unshift(),.shift()方法</h3><p>.push()方法在当前数组末尾添加新元素，返回值为新数组长度；<br>.pop()方法删除当前数组最后一个元素并返回这个元素；<br>.unshift()方法向数组开始位置添加元素；<br>.shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值</p>
<h3 id="toLocaleString-方法"><a href="#toLocaleString-方法" class="headerlink" title="toLocaleString()方法"></a>toLocaleString()方法</h3><p>toLocaleString()除了可以数组转字符串，如：[1,2,3,4].toLocaleString() &#x2F;&#x2F;‘1,2,3,4’<br>还可以：<br>数字(不能是字符串)转为千分位格式 let num &#x3D; 123456789;num..toLocaleString(‘en-US’) &#x2F;&#x2F;123,456,789</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Intl 对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化</span></span><br><span class="line"><span class="comment">//Collator，NumberFormat 和 DateTimeFormat 对象的构造函数是 Intl 对象的属性</span></span><br><span class="line"><span class="comment">//数字转千分位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>().<span class="title function_">format</span>(<span class="number">3500</span>));</span><br><span class="line"><span class="comment">//&quot;3,500&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="flat-方法"><a href="#flat-方法" class="headerlink" title="flat() 方法"></a>flat() 方法</h3><blockquote>
<p>会按照一个可指定的深度(默认值为1)递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</p>
</blockquote>
<ul>
<li>大白话就是，flat()可以把一个多层嵌套的数组转换成一个只有一层的数组</li>
<li>例子：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]];</span><br><span class="line">arr.<span class="title function_">flat</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br><span class="line">arr.<span class="title function_">flat</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// [1,2,3,4,5,[6,7,8]]</span></span><br><span class="line">arr.<span class="title function_">flat</span>()</span><br><span class="line"><span class="comment">// [1,2,3,4,5,[6,7,8]]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>1.利用空数组+空对象push法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeArrSame1</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> tmp = &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> newA = [];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"> 		<span class="keyword">if</span>(!tmp[arr[i]])&#123;</span><br><span class="line">			tmp[arr[i]] = <span class="number">1</span>;</span><br><span class="line">			newA.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;	</span><br><span class="line"> <span class="keyword">return</span> newA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.new一个新数组push方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeArrSame2</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> newA = [];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(newA.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>)&#123;</span><br><span class="line">			newA.<span class="title function_">push</span>(arr[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="substr-方法"><a href="#substr-方法" class="headerlink" title=".substr()方法"></a>.substr()方法</h3><p>string.substr(star,length)<br>第一个参数要抽取的字串的起始下标，如果是负数，倒数，<br>第二个参数表示字串字符数</p>
<h3 id="string-substring-方法"><a href="#string-substring-方法" class="headerlink" title="string.substring()方法"></a>string.substring()方法</h3><p>返回介于两个指定下标之间的字符，取第一个参数，不取第二个参数，第二个参数不填，则返回到结尾；</p>
<h3 id="字符串转换数字类型方法"><a href="#字符串转换数字类型方法" class="headerlink" title="字符串转换数字类型方法"></a>字符串转换数字类型方法</h3><p>1.parseInt(),parseFloat()<br>js提供了parseInt()和parseFloat()两个转换函数。前者把值转换成整数，后者把值转换成浮点数。只有对String类型调用这些方法，这两个函数才能正确运行；对其他类型返回的都是NaN(Not a Number)。</p>
<p>2.Number()<br>Number(value)——把给定的值转换成数字（可以是整数或浮点数）；</p>
<h3 id="字符串大小写互转"><a href="#字符串大小写互转" class="headerlink" title="字符串大小写互转"></a>字符串大小写互转</h3><h5 id="转换成小写"><a href="#转换成小写" class="headerlink" title="转换成小写"></a>转换成小写</h5><p>toLowerCase 方法<br>返回一个字符串，该字符串中的字母被转换为小写字母。</p>
<blockquote>
<p>strVariable.toLowerCase()<br>“String Literal”.toLowerCase()</p>
</blockquote>
<p>说明<br>toLowerCase 方法对非字母字符不会产生影响。</p>
<blockquote>
<p>var strVariable &#x3D; “This is a STRING object”;<br>strVariable &#x3D; strVariable.toLowerCase();</p>
</blockquote>
<p>值为：</p>
<blockquote>
<p>this is a string object</p>
</blockquote>
<h5 id="转换成大写"><a href="#转换成大写" class="headerlink" title="转换成大写"></a>转换成大写</h5><p>toUpperCase 方法<br>返回一个字符串，该字符串中的所有字母都被转化为大写字母。</p>
<blockquote>
<p>strVariable.toUpperCase()<br>“String Literal”.toUpperCase()</p>
</blockquote>
<p>说明<br>toUpperCase 方法对非字母字符不会产生影响。</p>
<blockquote>
<p>var strVariable &#x3D; “This is a STRING object”;<br>strVariable &#x3D; strVariable.toUpperCase();</p>
</blockquote>
<p>值为：</p>
<blockquote>
<p>THIS IS A STRING OBJECT</p>
</blockquote>
<h3 id="输出图形字符"><a href="#输出图形字符" class="headerlink" title="输出图形字符"></a>输出图形字符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1000</span>;i&lt;<span class="number">10000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五种方法去除字符串最后的逗号"><a href="#五种方法去除字符串最后的逗号" class="headerlink" title="五种方法去除字符串最后的逗号"></a>五种方法去除字符串最后的逗号</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">sex</span>: <span class="string">&quot;female&quot;</span>&#125;;<span class="comment">//定义一个object对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span><span class="comment">//定义一个空字符用来接收对象里的key或者value</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> obj) &#123;<span class="comment">//遍历item变量里的对象的属性和元素，</span></span></span><br><span class="line"><span class="language-javascript">        str += obj[item] + <span class="string">&quot;,&quot;</span><span class="comment">//将obj对象的值遍历出来，并且追加到str字符中。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//str += item + &quot;,&quot;//将obj对象的属性遍历出来，并且追加到str字符中。</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第一种方法、将字符串中最后一个元素&quot;,&quot;逗号去掉，</span></span></span><br><span class="line"><span class="language-javascript">    str = str.<span class="title function_">substring</span>(<span class="number">0</span>, str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;,&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第二种方法、将字符串中最后一个元素&quot;,&quot;逗号去掉，</span></span></span><br><span class="line"><span class="language-javascript">    str = (str.<span class="title function_">substring</span>(str.<span class="property">length</span> - <span class="number">1</span>) == <span class="string">&#x27;,&#x27;</span>) ? str.<span class="title function_">substring</span>(<span class="number">0</span>, str.<span class="property">length</span> - <span class="number">1</span>) : str;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第三种方法、将字符串中最后一个元素&quot;,&quot;逗号去掉，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str=str.<span class="title function_">substring</span>(<span class="number">0</span>,str.<span class="property">length</span>-<span class="number">1</span>);<span class="comment">//3、将字符串中最后一个元素&quot;,&quot;逗号去掉，</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第四种方法、将字符串中最后一个元素&quot;,&quot;逗号去掉，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> reg=<span class="regexp">/,$/gi</span>;</span></span><br><span class="line"><span class="language-javascript">    str=str.<span class="title function_">replace</span>(reg,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//最后一种用css解决</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;v in carNaP.sflb&quot;</span>&gt;</span>&#123;&#123;v.Label&#125;&#125;<span class="tag">&lt;<span class="name">i</span>&gt;</span>、<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">i</span>&#123;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/blog/2016/09/18/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题是每篇文章需要也是最常用的格式，在Markdown中，如果一段文字被定义为标题，只要在这段文字前加 <code>#</code> 号即可。<br><code># 一级标题</code><br>…<br><code>###### 六级标题</code></p>
<blockquote>
<p>以此类推，建议在 <code>#</code> 号后面加上一个空格，这是最标准的Markdown语法。</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在Markdown下，列表的显示只需要在文字前加上 <code>-</code> 或 <code>*</code> 即可变为无序列表，有序列表则直接在文字前加 <code>1.</code> <code>2.</code> <code>3.</code> 符号要和文字之间加上一个字符的空格。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>如果需要引用一小段别处的句子，那么可以用引用的格式。<br>只需要在文本钱加入 <code>&gt;</code> 这种大于号即可。</p>
<blockquote>
<p>例如这样</p>
</blockquote>
<h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>插入链接与插入图片的语法很像，区别在一个 <code>!</code> 号。<br>图片为： <code>![]()&#123;ImgCap&#125;&#123;/ImgCap&#125;</code><br>链接为： <code>[]()</code><br>插入图片的地址需要图床，推荐使用<a href="https://portal.qiniu.com/">七牛云</a>，生成URL地址即可。</p>
<h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><p>Markdown的粗体和斜体也非常简单，用左右各两个 <code>*</code> 或 <code>_</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 或 <code>_</code> 包含一段文本就是斜体的语法。</p>
<p><strong>这是粗体</strong> <strong>这是粗体</strong><br><em>这是斜体</em>   <em>这是斜体</em></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>例如：</p>
<blockquote>
<p><strong>| 表头           | 表头                 | 表头l         |</strong><br><strong>| ————-  |:————-:      | —–:       |</strong><br><strong>| 默认左对齐      | 左右各：居中对齐      | 右一个：右对齐 |</strong><br><strong>| 默认左对齐      | 左右各：居中对齐      | 右一个：右对齐 |</strong><br><strong>| 默认左对齐      | 左右各：居中对齐      | 右一个：右对齐 |</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线的语法只需要三个 <code>*</code> 号，例如：</p>
<hr>
<h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块也是非常常用的一种标记语法，语法非常简单，只需在代码前面加4个空格或1个制表符(tab),例如：<br>    这是一个代码区块</p>
<h3 id="添加图片描述"><a href="#添加图片描述" class="headerlink" title="添加图片描述"></a>添加图片描述</h3><p>如下所示添加标签文案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](http://www.guoxh.com/blog/img/nvm/8.png)</span><br><span class="line">&lt;center&gt;&lt;b&gt;&lt;font size =&#x27;1&#x27;&gt;这是图片描述&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt.js预渲染</title>
    <url>/blog/2019/12/05/Nuxt.js2.0%E9%A2%84%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="个人认为这个框架有点鸡肋，起初以为它可以做到SSR，事实too-young-too-naive-这个框架还是相当于封装了个prerender-spa-plugin插件，增加了一些独有的特性和方法，要想做到SSR还是得依赖node；"><a href="#个人认为这个框架有点鸡肋，起初以为它可以做到SSR，事实too-young-too-naive-这个框架还是相当于封装了个prerender-spa-plugin插件，增加了一些独有的特性和方法，要想做到SSR还是得依赖node；" class="headerlink" title="个人认为这个框架有点鸡肋，起初以为它可以做到SSR，事实too young too naive,这个框架还是相当于封装了个prerender-spa-plugin插件，增加了一些独有的特性和方法，要想做到SSR还是得依赖node；"></a>个人认为这个框架有点鸡肋，起初以为它可以做到SSR，事实too young too naive,这个框架还是相当于封装了个prerender-spa-plugin插件，增加了一些独有的特性和方法，要想做到SSR还是得依赖node；</h2><h3 id="nuxt基于vuejs的seo优化"><a href="#nuxt基于vuejs的seo优化" class="headerlink" title="nuxt基于vuejs的seo优化"></a>nuxt基于vuejs的seo优化</h3><p>一、css单独打包<br>在nuxt.config.js配置中加下面代码：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">build<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    extractCSS<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>二、html中TDK自定义<br>page目录下的.vue文件中加下面代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">head</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">title</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">			<span class="attr">meta</span>: [</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">hid</span>: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">					<span class="attr">content</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">hid</span>: <span class="string">&quot;keywords&quot;</span>,</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&quot;keywords&quot;</span>,</span><br><span class="line">					<span class="attr">content</span>: <span class="string">&quot;key&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三、修改局域网配置<br>在package.json中新添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nuxt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>四、插件引用<br>以生成二维码插件为例：<br>1.在<code>plugins</code>目录下新建<code>qrcode.js</code>文件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> qrcode <span class="keyword">from</span> <span class="string">&quot;qrcodejs2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$qrcode</span> = qrcode;</span><br></pre></td></tr></table></figure>
<p>2.在<code>nuxt.config.js</code>配置文件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">	&#123; <span class="attr">src</span>: <span class="string">&#x27;~/plugins/qrcode.js&#x27;</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这样就可以在全局.vue中使用了，<code>new this.$qrcode()</code></p>
<p>五、环境配置<br>1.<code>nuxt.config.js</code>文件中添加配置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">env</span>: &#123;</span><br><span class="line">	<span class="attr">BASE_URL</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">	<span class="attr">NODE_ENV</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>2.<code>package.json</code>文件中修改：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env BASE_URL=http://xxx NODE_ENV=development nuxt&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env BASE_URL=http://xxx NODE_ENV=production nuxt generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;generate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env BASE_URL=http://xxx NODE_ENV=production nuxt generate&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>这样，本地、测试、生产环境就都有了，执行对应命令即可如：npm run dev, npm run test, npm run generate</p>
<p>3.在axios等请求中就可以使用不同的<code>process.env.BASE_URL</code>来使用接口域名</p>
<p>六、asyncData 方法</p>
<ul>
<li>你可能想要在服务器端获取并渲染数据。Nuxt.js添加了asyncData方法使得你能够在渲染组件之前异步获取数据。</li>
</ul>
<p>七、css按需引入<br>通过阅读 nuxt 源码发现了端倪，发现在打包时将所有的公共css通过 splitChunks 进行分组，由于项目中组件都是动态引入的，这里直接在 nuxt.config.js 中修改webpack打包参数，将 splitChunks.cacheGroups.styles 配置删除，使用默认的 chunks: async 配置，即可实现按需引入。</p>
]]></content>
      <categories>
        <category>Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt.js 3.8</title>
    <url>/blog/2023/11/16/Nuxt3.8/</url>
    <content><![CDATA[<p>官网：<a href="https://nuxt.com.cn/">https://nuxt.com.cn/</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>1.根目录下新建文件<code>.env.development</code>和<code>.env.production</code>，当然文件<code>.env.xxx</code>都行，只要和后面对应上即可；<br>2.文件中增加全局环境变量，例如：<code>PUBLIC_API_BASE=https://api.com</code>;<br>3.<code>nuxt.config.ts</code>配置文件增加配置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line"><span class="attr">runtimeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">//默认为空字符串，在运行时使用process.env.NUXT_API_KEY自动设置，为项目域名</span></span><br><span class="line">    <span class="attr">public</span>: &#123;</span><br><span class="line">       <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">PUBLIC_API_BASE</span> <span class="comment">//暴露在前端的自定义路径</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>4.引用环境变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useRuntimeConfig</span>().<span class="property">public</span>.<span class="property">baseURL</span></span><br></pre></td></tr></table></figure>

<h3 id="配置api代理，解决跨域"><a href="#配置api代理，解决跨域" class="headerlink" title="配置api代理，解决跨域"></a>配置api代理，解决跨域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这种只适合在dev环境，配置也能看出来devProxy配置，如果是预渲染测试，则此配置不行，当然服务端渲染可</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line"><span class="attr">nitro</span>: &#123;</span><br><span class="line">    <span class="attr">devProxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://192.168.1.1&quot;</span>, <span class="comment">// 这里是接口地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">prependPath</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 该配置用于服务端请求转发</span></span><br><span class="line">    <span class="attr">routeRules</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api/**&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: <span class="string">&#x27;http://192.168.1.1/**&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在调用接口的地方直接使用`/api`即可，不需要配置域名和ip</span></span><br></pre></td></tr></table></figure>

<h3 id="封装api请求方法"><a href="#封装api请求方法" class="headerlink" title="封装api请求方法"></a>封装api请求方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络请求方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 响应结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">$http</span> = <span class="keyword">async</span> (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">useFetch</span>(</span><br><span class="line">      (obj.<span class="property">baseURL</span> ?? <span class="title function_">useRuntimeConfig</span>().<span class="property">public</span>.<span class="property">baseURL</span>) + obj.<span class="property">url</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">method</span>: obj.<span class="property">method</span> ?? <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">query</span>: obj?.<span class="property">query</span> ?? <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">body</span>: obj?.<span class="property">body</span> ?? <span class="literal">null</span>,</span><br><span class="line">        <span class="title function_">onRequest</span>(<span class="params">&#123; request, options &#125;</span>) &#123;</span><br><span class="line">          <span class="comment">// 设置请求报头</span></span><br><span class="line">          options.<span class="property">headers</span> = options.<span class="property">headers</span> || &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">onRequestError</span>(<span class="params">&#123; request, options, error &#125;</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理请求错误</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Request Error&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">onResponse</span>(<span class="params">&#123; request, response, options &#125;</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理响应数据</span></span><br><span class="line">          <span class="comment">// resolve(response._data)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">onResponseError</span>(<span class="params">&#123; request, response, options &#125;</span>) &#123;</span><br><span class="line">          message.<span class="title function_">warning</span>(<span class="string">&#x27;Request Error&#x27;</span>);</span><br><span class="line">          <span class="comment">// 处理响应错误</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">status</span>.<span class="property">value</span> === <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res.<span class="property">data</span>.<span class="property">value</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(res.<span class="property">error</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>useFetch</code>适合在ssr中使用，如果是在ssg中使用，用<code>$fetch</code>最佳，参数都相同，改个名即可，如果后面想转ssr，再改名就可以了</p>
<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>静态资源（如图片）放在<code>public</code>目录下，没有新建一个，引用时直接<code>/demo.png</code>即可。</p>
<h3 id="useState全局共享状态"><a href="#useState全局共享状态" class="headerlink" title="useState全局共享状态"></a>useState全局共享状态</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useCityName</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useState</span>(<span class="string">&quot;commonCityName&quot;</span>, <span class="function">() =&gt;</span> id);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//改变useState中的值，使用 .value 属性赋值；</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cityName = <span class="title function_">useCityName</span>();</span><br><span class="line">  cityName.<span class="property">value</span> = v.<span class="property">city_name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在不同端获取数据"><a href="#在不同端获取数据" class="headerlink" title="在不同端获取数据"></a>在不同端获取数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 此调用在水合之前执行 */</span></span><br><span class="line"><span class="keyword">const</span> &#123; article &#125; = <span class="keyword">await</span> <span class="title function_">useFetch</span>(<span class="string">&#x27;api/article&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此调用仅在客户端执行 */</span></span><br><span class="line"><span class="keyword">const</span> &#123; pending, <span class="attr">data</span>: posts &#125; = <span class="title function_">useFetch</span>(<span class="string">&#x27;/api/comments&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">server</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>要注意的是，如果使用的预渲染，水合之前执行的数据，img图片会有缓存，所以如果是经常变动的数据，不要使用这种方式请求数据；</p>
<h3 id="服务端渲染（ssr）相关配置"><a href="#服务端渲染（ssr）相关配置" class="headerlink" title="服务端渲染（ssr）相关配置"></a>服务端渲染（ssr）相关配置</h3><ol>
<li>新建文件<code>ecosystem.config.js</code>，并填写以下代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">apps</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;NuxtAppName&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="string">&#x27;8921&#x27;</span>,</span><br><span class="line">      path : <span class="string">&quot;服务器IP&quot;</span>,</span><br><span class="line">      <span class="attr">exec_mode</span>: <span class="string">&#x27;cluster&#x27;</span>,</span><br><span class="line">      <span class="attr">instances</span>: <span class="string">&#x27;max&#x27;</span>,</span><br><span class="line">      <span class="attr">script</span>: <span class="string">&#x27;./.output/server/index.mjs&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>安装pm2<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure></li>
<li>在服务器项目目录下运行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start nuxt</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>angular常用过滤器（差不多过去式了）</title>
    <url>/blog/2016/09/27/angular%E5%B8%B8%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一。表达式中添加过滤器"><a href="#一。表达式中添加过滤器" class="headerlink" title="一。表达式中添加过滤器"></a>一。表达式中添加过滤器</h2><h4 id="过滤器可以通过一个管道字符（-）和一个过滤器添加到表达式中。"><a href="#过滤器可以通过一个管道字符（-）和一个过滤器添加到表达式中。" class="headerlink" title="过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。"></a>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。</h4><blockquote>
<ol>
<li>uppercase 过滤器将字符串格式化为大写：</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名为 &#123;&#123; lastName | uppercase &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>lowercase 过滤器将字符串格式化为小写：</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名为 &#123;&#123; lastName | lowercase &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="3">
<li>currency 过滤器将数字格式化为货币格式：</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总价 = &#123;&#123; (quantity * price) | currency &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="二。向指令添加过滤器"><a href="#二。向指令添加过滤器" class="headerlink" title="二。向指令添加过滤器"></a>二。向指令添加过滤器</h2><blockquote>
<ol>
<li>orderBy 过滤器根据表达式排列数组：</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;x in names | orderBy:&#x27;country&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>filter 过滤器从数组中选择一个子集：</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$scope.names = [</span><br><span class="line">       &#123;&#x27;name&#x27;:&#x27;jack&#x27;,&#x27;country&#x27;:&#x27;china&#x27;,&#x27;sex&#x27;:&#x27;man&#x27;&#125;,</span><br><span class="line">       &#123;&#x27;name&#x27;:&#x27;nick&#x27;,&#x27;country&#x27;:&#x27;austrilear&#x27;,&#x27;sex&#x27;:&#x27;woman&#x27;&#125;,</span><br><span class="line">       &#123;&#x27;name&#x27;:&#x27;rose&#x27;,&#x27;country&#x27;:&#x27;rouma&#x27;,&#x27;sex&#x27;:&#x27;man&#x27;&#125;</span><br><span class="line">    ];</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;x in names | filter:test | orderBy:&#x27;country&#x27;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; (x.name | uppercase) + &#x27;, &#x27; + x.country &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>###limitTo过滤器：用来控制显示在页面的数量<br>ng-repeat:v in data | limitTo:15</p>
<p>###angularJS中的ng-bind-html指令和$sce服务<br>把$sce封装成一个过滤器就可以在模板上随时调用了</p>
<p>app.filter(‘to_trusted’, [‘$sce’, function ($sce) {<br>return function (text) {<br>    return $sce.trustAsHtml(text);<br>};</p>
<p ng-bind-html="currentWork.description | to_trusted"></p>
其中$sce是angularJS自带的安全处理模块，防止xss攻击（恶意插入html代码截取信息），$sce.trustAsHtml(input)方法便是将数据内容以html的形式进行解析并返回。将此过滤器添加到ng-bind-html所绑定的数据中，便实现了在数据加载时对于html标签的自动转义。]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>antd记录</title>
    <url>/blog/2022/11/25/antd%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="如果table分页最后一页只有一条数据，删除这条会导致分页和数据展示不一致"><a href="#如果table分页最后一页只有一条数据，删除这条会导致分页和数据展示不一致" class="headerlink" title="如果table分页最后一页只有一条数据，删除这条会导致分页和数据展示不一致"></a>如果table分页最后一页只有一条数据，删除这条会导致分页和数据展示不一致</h3><p>原因：如果需求要求记录当前table页，删除之后没有判断当前页是否还有数据，所以判断如果当前页只有一条&amp;&amp;当前页大于1，则重新请求时页数-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onDeleteItem</span>: <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;nodeManage/delete&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: &#123; id &#125;,</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleRefresh</span>(&#123;</span><br><span class="line">            <span class="attr">page</span>:</span><br><span class="line">                list.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; pagination.<span class="property">current</span> &gt; <span class="number">1</span></span><br><span class="line">                ? pagination.<span class="property">current</span> - <span class="number">1</span></span><br><span class="line">                : pagination.<span class="property">current</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="接口返回的数据填充Form，有时会无法填充"><a href="#接口返回的数据填充Form，有时会无法填充" class="headerlink" title="接口返回的数据填充Form，有时会无法填充"></a>接口返回的数据填充<code>Form</code>，有时会无法填充</h3><p>原因：接口返回比页面渲染慢，导致页面渲染完成还没有拿到数据<br>解决：保证接口返回数据再渲染页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果用了状态管理</span></span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">loadSuccess</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="title function_">query</span>(<span class="params">&#123; payload = &#123;&#125; &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">call</span>(getTaskDetail, payload);</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">                <span class="attr">payload</span>: &#123;</span><br><span class="line">                    <span class="attr">loadSuccess</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//在jsx文件中：</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">loadSuccess</span> &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>应该有更好的解决方案，这种如果加载时间长会白屏很长时间，等有好的解决思路再补充。。。</p>
</blockquote>
<blockquote>
<p>找到了，就是官方方法，在form标签上添加<code>fields=&#123;fields&#125;</code>属性，缺点是其中的<code>fields</code>值不是对象，而是包含<code>name</code>和<code>value</code>属性的对象数组，所以如果回显时，需要把对应的值遍历填充相应<code>value</code></p>
</blockquote>
<h3 id="获取路由中的id"><a href="#获取路由中的id" class="headerlink" title="获取路由中的id"></a>获取路由中的id</h3><p>dva.js store文件中无法使用react方法；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装path-to-regexp插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; pathToRegexp &#125; = <span class="built_in">require</span>(<span class="string">&quot;path-to-regexp&quot;</span>);</span><br><span class="line"><span class="attr">subscriptions</span>: &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">&#123; dispatch, history &#125;</span>) &#123;</span><br><span class="line">        history.<span class="title function_">listen</span>(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> match = <span class="title function_">pathToRegexp</span>(<span class="string">&#x27;/marketing/node/:id&#x27;</span>).<span class="title function_">exec</span>(location.<span class="property">pathname</span>);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;query&#x27;</span>, <span class="attr">payload</span>: &#123; <span class="attr">id</span>: match[<span class="number">1</span>] &#125; &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="Form表单中有上传组件Upload，无法在Form-Item的name属性绑定对应值，需要特殊处理下"><a href="#Form表单中有上传组件Upload，无法在Form-Item的name属性绑定对应值，需要特殊处理下" class="headerlink" title="Form表单中有上传组件Upload，无法在Form.Item的name属性绑定对应值，需要特殊处理下"></a>Form表单中有上传组件<code>Upload</code>，无法在Form.Item的name属性绑定对应值，需要特殊处理下</h3><p>一般是回显时使用<code>defaultFileList</code>属性绑定值，新增时可以用自带的<code>onChange</code>方法</p>
<h3 id="Form表单中的Form-Item组件name属性为数组时，可以做嵌套对象使用"><a href="#Form表单中的Form-Item组件name属性为数组时，可以做嵌套对象使用" class="headerlink" title="Form表单中的Form.Item组件name属性为数组时，可以做嵌套对象使用"></a>Form表单中的Form.Item组件<code>name</code>属性为数组时，可以做嵌套对象使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取相应值</span></span><br><span class="line">form.<span class="property">name</span>.<span class="property">secondname</span></span><br></pre></td></tr></table></figure>

<h3 id="react路由跳转进入，链接参数为数字，刷新后，链接参数变字符串"><a href="#react路由跳转进入，链接参数为数字，刷新后，链接参数变字符串" class="headerlink" title="react路由跳转进入，链接参数为数字，刷新后，链接参数变字符串"></a>react路由跳转进入，链接参数为数字，刷新后，链接参数变字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; cityId &#125; = query;</span><br><span class="line"><span class="title function_">typeof</span>(cityId) <span class="comment">//&#x27;string&#x27;</span></span><br><span class="line"><span class="comment">//antd中Form表单initialValues默认值填充校验数据类型，所以要和你Form表单中value类型相同，才能回显</span></span><br></pre></td></tr></table></figure>

<h3 id="tree组件实现筛选只保留目标项（而不是官方那种搜索项高亮-展开）"><a href="#tree组件实现筛选只保留目标项（而不是官方那种搜索项高亮-展开）" class="headerlink" title="tree组件实现筛选只保留目标项（而不是官方那种搜索项高亮+展开）"></a>tree组件实现筛选只保留目标项（而不是官方那种搜索项高亮+展开）</h3><blockquote>
<p><code>checkStrictly</code>是核心，可以使<code>checkedKeys</code>即选中的数组与<code>treeData</code>即树列表之间的绑定关系分离开，从<br>而做到筛选时暂时性的改变<code>treeData</code>数据不会影响<code>checkedKeys</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里最重要的是需要有一个常量一个变量来存储原始数据和筛选后的数据`normListCopy`为筛选后的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;搜索&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Tree</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&#123;278&#125;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">checkable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">checkStrictly</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onCheck</span>=<span class="string">&#123;this.onCheck&#125;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">checkedKeys</span>=<span class="string">&#123;checkedKeys&#125;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fieldNames</span>=<span class="string">&#123;&#123;</span> <span class="attr">title:</span> &quot;<span class="attr">title</span>&quot;, <span class="attr">key:</span> &quot;<span class="attr">id</span>&quot; &#125;&#125;</span></span><br><span class="line"><span class="tag">    <span class="attr">treeData</span>=<span class="string">&#123;normListCopy&#125;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">Tree</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="dispatch-…-then-报错-is-not-a-function"><a href="#dispatch-…-then-报错-is-not-a-function" class="headerlink" title="dispatch({…}).then(()&#x3D;&gt;{}) 报错 is not a function"></a>dispatch({…}).then(()&#x3D;&gt;{}) 报错 is not a function</h3><p>这种情况都是<code>dispatch</code>中的方法没找到，确认下方法是否声明，或者需要在调用的方法中<code>return</code>一个值；</p>
<h3 id="用umi搭建的项目，新增环境变量"><a href="#用umi搭建的项目，新增环境变量" class="headerlink" title="用umi搭建的项目，新增环境变量"></a>用umi搭建的项目，新增环境变量</h3><p>因为用了umi框架，所以不考虑用<code>cross-env</code>控制变量；<br>umi官方推荐一个<code>UMI_ENV</code>变量，在项目根目录新建<code>config.$&#123;UMI_ENV&#125;.ts</code>文件，添加代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">define</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加这个自定义的环境变量</span></span><br><span class="line">    <span class="string">&quot;process.env.UMI_ENV&quot;</span>: process.<span class="property">env</span>.<span class="property">UMI_ENV</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在任意页面代码中<code>process.env.UMI_ENV</code>就是当前环境变量值，这个和<code>vue-cli</code>中的<code>.env.&#123;mode&#125;</code>文件异曲同工，都是在环境配置文件输出环境变量</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>call()和apply()</title>
    <url>/blog/2016/09/14/call()%E5%92%8Capply()/</url>
    <content><![CDATA[<h3 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h3><blockquote>
<p>1、方法定义<br>call方法:<br>语法：<code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]]) </code><br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p>
</blockquote>
<p>apply方法：<br>语法：<code>apply([thisObj[,argArray]]) </code><br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。</p>
 <span id="more"></span>
<p>2、常用实例<br>a、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">     <span class="title function_">alert</span>(a+b);  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a,b</span>)  </span><br><span class="line"> &#123;  </span><br><span class="line">     <span class="title function_">alert</span>(a-b);  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> add.<span class="title function_">call</span>(sub,<span class="number">3</span>,<span class="number">1</span>);   </span><br></pre></td></tr></table></figure>
<p> 这个例子中的意思就是用 add 来替换 sub，add.call(sub,3,1) &#x3D;&#x3D; add(3,1) ，所以运行结果为：alert(4); &#x2F;&#x2F; 注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>
<p>b、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>)&#123;    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Animal&quot;</span>;    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;    </span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>)&#123;    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Cat&quot;</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>();    </span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。    </span></span><br><span class="line"><span class="comment">//输入结果为&quot;Cat&quot;    </span></span><br><span class="line">animal.<span class="property">showName</span>.<span class="title function_">call</span>(cat,<span class="string">&quot;,&quot;</span>);    </span><br><span class="line"><span class="comment">//animal.showName.apply(cat,[]);  </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>call 的意思是把 animal 的方法放到cat上执行，原来cat是没有showName() 方法，现在是把animal 的showName()方法放到 cat上来执行，所以this.name 应该是 Cat</p>
</blockquote>
<p>c、实现继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;      </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;      </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;      </span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);      </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;      </span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>)&#123;    </span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);    </span><br><span class="line">&#125;      </span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;Black Cat&quot;</span>);     </span><br><span class="line">cat.<span class="title function_">showName</span>();  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>Animal.call(this) 的意思就是使用 Animal对象代替this对象，那么 Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了.</p>
</blockquote>
<p>d、多重继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Class10</span>(<span class="params"></span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showSub</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="title function_">alert</span>(a-b);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Class11</span>(<span class="params"></span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showAdd</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="title function_">alert</span>(a+b);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Class2</span>(<span class="params"></span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="title class_">Class10</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">    <span class="title class_">Class11</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p> 很简单，使用两个 call 就实现多重继承了<br>当然，js的继承还有其他方法，例如使用原型链，这个不属于本文的范畴，只是在此说明call 的用法。说了call ，当然还有 apply，这两个方法基本上是一个意思，区别在于 call 的第二个参数可以是任意类型，而apply的第二个参数必须是数组，也可以是arguments<br>还有 callee，caller..</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas</title>
    <url>/blog/2022/12/05/canvas/</url>
    <content><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3>]]></content>
      <categories>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie</title>
    <url>/blog/2016/09/14/cookie/</url>
    <content><![CDATA[<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置cookie  </span></span><br><span class="line"><span class="comment">//name是cookie中的名，value是对应的值，iTime是多久过期（单位为天）  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name,value,iTime</span>)&#123;  </span><br><span class="line">    <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="title class_">Date</span>();  </span><br><span class="line">    <span class="comment">//设置cookie过期时间  </span></span><br><span class="line">    oDate.<span class="title function_">setDate</span>(oDate.<span class="title function_">getDate</span>()+iTime);  </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = name+<span class="string">&#x27;=&#x27;</span>+value+<span class="string">&#x27;;expires=&#x27;</span>+oDate.<span class="title function_">toGMTString</span>();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//获取cookie  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>)&#123;  </span><br><span class="line">    <span class="comment">//cookie中的数据都是以分号加空格区分开  </span></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(arr[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>] == name)&#123;  </span><br><span class="line">            <span class="keyword">return</span> arr[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//未找到对应的cookie则返回空字符串  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//删除cookie  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeCookie</span>(<span class="params">name</span>)&#123;  </span><br><span class="line">    <span class="comment">//调用setCookie方法，把时间设置为-1  </span></span><br><span class="line">    <span class="title function_">setCookie</span>(name,<span class="number">1</span>,-<span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>css-mask</title>
    <url>/blog/2018/12/28/css-mask/</url>
    <content><![CDATA[<blockquote>
<p>mask-position: 0px 0px;&#x2F;&#x2F;设置遮罩层的位置<br>mask-size: 100%;&#x2F;&#x2F;设置遮罩层的大小<br>mask-image：url() &#x2F;&#x2F;设置遮罩层的图像。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> clipRectSpIn &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span>   &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">20%</span>, <span class="number">50%</span> <span class="number">50%</span>, <span class="number">20%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">80%</span>, <span class="number">50%</span> <span class="number">50%</span>, <span class="number">80%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0%</span>, <span class="number">0%</span> <span class="number">0%</span>, <span class="number">0%</span> <span class="number">50%</span>, <span class="number">0%</span> <span class="number">100%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">100%</span> <span class="number">0%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span>   &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">20%</span>, <span class="number">50%</span> <span class="number">50%</span>, <span class="number">20%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">80%</span>, <span class="number">50%</span> <span class="number">50%</span>, <span class="number">80%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">650px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">392px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;http://www.guoxh.com/blog/img/blog/halibote2.webp&quot;</span>) no-repeat left top;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">mask</span>: <span class="built_in">url</span>(<span class="string">&quot;http://www.guoxh.com/blog/img/blog/halibote1.jpeg&quot;</span>); </span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">mask-size</span>: <span class="number">3000%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: maskMove <span class="number">2s</span> <span class="built_in">steps</span>(<span class="number">29</span>) infinite;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mask</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;http://www.guoxh.com/blog/img/blog/halibote1.jpeg&quot;</span>) no-repeat left top;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: clipRectSpIn <span class="number">6s</span> infinite;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 这是分割线 */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* VS效果 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mask2</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">650px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>:<span class="number">270px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;http://www.guoxh.com/blog/img/blog/halibote4.webp&quot;</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-position</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mask2</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">650px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>:<span class="number">270px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;http://www.guoxh.com/blog/img/blog/halibote5.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-position</span>:-<span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">mask</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#000</span> <span class="number">45%</span>, transparent <span class="number">55%</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div class=&quot;bg&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<style>
@keyframes clipRectSpIn {
    0%   {
        clip-path: polygon(50% 20%, 50% 50%, 20% 50%, 50% 50%, 50% 80%, 50% 50%, 80% 50%, 50% 50%);
    }
    50% {
        clip-path: polygon(50% 0%, 0% 0%, 0% 50%, 0% 100%, 50% 100%, 100% 100%, 100% 50%, 100% 0%);
    }
    100%   {
        clip-path: polygon(50% 20%, 50% 50%, 20% 50%, 50% 50%, 50% 80%, 50% 50%, 80% 50%, 50% 50%);
    }
}
.box{
    width: 650px;
    height: 392px;
    position:relative;
}
.mask {
    width: 100%;
    height: 100%;
    background:url("http://www.guoxh.com/blog/img/blog/halibote2.webp") no-repeat left top;
    background-size: cover;
    position: absolute;
    left: 0;
    top: 0;
}
.bg{
    width: 100%;
    height: 100%;
    -webkit-mask: url("http://www.guoxh.com/blog/img/blog/halibote1.jpeg"); 
    -webkit-mask-size: 3000% 100%;
    animation: maskMove 2s steps(29) infinite;
    position: absolute;
    left: 0;
    top: 0;
}
.mask::before{
    content:"";
    display:block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url("http://www.guoxh.com/blog/img/blog/halibote1.jpeg") no-repeat left top;
    background-size: cover;
    animation: clipRectSpIn 6s infinite;
}
/* 这是分割线 */
/* VS效果 */
.mask2{
    width:650px;
    height:270px;
    position:relative;
    background:url("http://www.guoxh.com/blog/img/blog/halibote4.webp") no-repeat;
    background-size:100% 100%;
    background-position:150px;
    margin-top:30px;
}
.mask2::before{
    content:"";
    display:block;
    width:650px;
    height:270px;
    position:absolute;
    top: 0;left: 0; right: 0;bottom: 0;
    background: url("http://www.guoxh.com/blog/img/blog/halibote5.png");
    background-position:-180px;
    -webkit-mask: linear-gradient(45deg, #000 45%, transparent 55%);
}
</style>

<body>
<div class="box">
<div class="mask"></div>
<!-- <div class="bg"></div> -->
</div>

<div class="mask2"></div>
</body>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>css3 animate</title>
    <url>/blog/2016/11/22/css3-animate/</url>
    <content><![CDATA[<h2 id="animation"><a href="#animation" class="headerlink" title="animation:"></a>animation:</h2><ul>
<li>animation-name : xuanzhuan  &#x2F;&#x2F;动画名字</li>
<li>animation-duration : 1s ;   &#x2F;&#x2F;动画时长</li>
<li>animation-timing-function : linear; &#x2F;&#x2F;动画运动方式</li>
<li>animation-fill-mode : both;  &#x2F;&#x2F;动画最终停留状态</li>
<li>animation-iteration-count : infinite; &#x2F;&#x2F;动画运动次数</li>
<li>animation-direction : alternate; &#x2F;&#x2F;动画来回</li>
<li>animation-delay : 1s;   &#x2F;&#x2F;动画延迟</li>
<li>animation-play-state : paused  &#x2F; running;  &#x2F;&#x2F;给js 用的动画控制</li>
</ul>
<p>$.fn.fullpage.  调用方法</p>
<h2 id="旋转图片：transform"><a href="#旋转图片：transform" class="headerlink" title="旋转图片：transform:"></a>旋转图片：transform:</h2><ul>
<li>旋转：rotateY  rotateZ  rotateX();          (deg)  </li>
<li>放大：scaleX scaleY scaleZ scale scale3d          (1.1)  </li>
<li>斜切：skewX skewY skewZ skew3d          (deg)</li>
<li>位移：translateX translateY  translateZ  translate3d (px)</li>
</ul>
<h2 id="背景图片颜色渐变："><a href="#背景图片颜色渐变：" class="headerlink" title="背景图片颜色渐变："></a>背景图片颜色渐变：</h2><p>   background-image:linear-gradient(#33bb11,#ffaacc)<br>   &lt; linear-gradient&gt;：使用线性渐变创建背景图像。<br>   &lt; radial-gradient&gt;：使用径向(放射性)渐变创建背景图像。<br>   &lt; repeating-linear-gradient&gt;：使用重复的线性渐变创建背景图像。<br>   &lt; repeating-radial-gradient&gt;：使用重复的径向(放射性)渐变创建背景图像</p>
<h2 id="定义一个动画的方法"><a href="#定义一个动画的方法" class="headerlink" title="定义一个动画的方法"></a>定义一个动画的方法</h2><ul>
<li>@keyframes</li>
</ul>
<h2 id="transform-origin-top-center"><a href="#transform-origin-top-center" class="headerlink" title="transform-origin:top center;"></a>transform-origin:top center;</h2><h2 id="永远不要写all-写那些真正需要监测的属性"><a href="#永远不要写all-写那些真正需要监测的属性" class="headerlink" title="永远不要写all 写那些真正需要监测的属性"></a>永远不要写all 写那些真正需要监测的属性</h2><ul>
<li>ease ease-in ease-in-out ease-out ease-out linear step-end step-start steps()</li>
<li>transition-property: all;</li>
<li>transition-duration: .8s;</li>
<li>transition-timing-function: ease;</li>
<li>transition-delay: 0;</li>
</ul>
<h2 id="animation-timing-function-cubic-bezier"><a href="#animation-timing-function-cubic-bezier" class="headerlink" title="animation-timing-function:cubic-bezier();"></a>animation-timing-function:cubic-bezier();</h2><pre><code>  both:让动画留在最后一帧；
  无限动画：infinite
</code></pre>
<p>&#x2F;&#x2F; 进入一屏的时候会调用afterLoad<br>afterLoad:function(name,index){<br>  name是当前这张的名字 index 当前是第几张<br>}<br>&#x2F;&#x2F; 离开一屏的时候 会调用onLeave<br>onLeave:function(index,next,dir){<br>  if(index &#x3D;&#x3D;&#x3D; 5){<br>    $(‘#section5 h1’).addClass(‘animate-fei’);<br>  }<br>  if(index &#x3D;&#x3D;&#x3D; 1){<br>    &#x2F;&#x2F;离开失效<br>    return false;<br>  }<br>}</p>
<h2 id="四、使用css结合js去制作页面中的动画"><a href="#四、使用css结合js去制作页面中的动画" class="headerlink" title="四、使用css结合js去制作页面中的动画"></a>四、使用css结合js去制作页面中的动画</h2><p>1、使用 transtion 结合fullpage 去制作动画</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transition:transform .5s ease 1s ,opacity .6s ease-in-out;</span><br><span class="line">transform:rotateX()</span><br><span class="line">transform:translate3d(30px,40px,0)</span><br></pre></td></tr></table></figure>
<p>2、使用 animation 结合 fullpage 去制作动画</p>
<p>a.要动的元素写到每一个section中<br>b.正常状态下采用一种动画(可选)<br>c.在section拥有active类的情况下彩另外一种动画<br>d.一些复杂的情况，把动画预先写好， 在配置项的onLeave afterLoad回调函数中通过添加类名</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3变量</title>
    <url>/blog/2016/11/27/css3%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>一、变量是个好东西<br>在任何语言中，变量的有一点作用都是一样的，那就是可以降低维护成本，附带还有更高性能，文件更高压缩率的好处。</p>
<p>随着CSS预编译工具Sass&#x2F;Less&#x2F;Stylus的关注和逐渐流行，CSS工作组迅速跟进CSS变量的规范制定，并且，很多浏览器已经跟进，目前，在部分项目中已经可以直接使用了。</p>
<p>Chrome&#x2F;Firefox&#x2F;Safari浏览器都是绿油油的，兼容性大大超出我的预期，于是果断尝鲜记录下语法用法和特性。</p>
<p>二、CSS变量var()语法和用法和特性<br>CSS中原生的变量定义语法是：–*，变量使用语法是：<code>var(--*)</code>，其中<code>*</code>表示我们的变量名称。关于命名这个东西，各种语言都有些显示，例如CSS选择器不能是数字开头，JS中的变量是不能直接数值的，但是，在CSS变量中，这些限制通通没有，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --<span class="number">1</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果背景色如下：</p>
<p>但是，不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  --深蓝: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--深蓝);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，我们就可以直接使用中文名称作为变量，即使英语4级没过的小伙伴也不会有压力了，我们也不需要随时挂个翻译器在身边了。</p>
<p>无论是变量的定义和使用只能在声明块{}里面，例如，下面这样是无效的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">--深蓝: <span class="number">#369</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--深蓝);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量的定义，或者说声明跟CSS计数器的声明类似的，你应该摆脱Sass&#x2F;Less等预编译工具语法先入为主的语法影响，把CSS的原生变量理解为一种CSS属性。</p>
<p>这样，你就对其权重和变量应用规则要容易理解地多。</p>
<p>例如下面这个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123; <span class="attr">--color</span>: purple; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attr">--color</span>: green; &#125;</span><br><span class="line"><span class="selector-id">#alert</span> &#123; <span class="attr">--color</span>: red; &#125;</span><br><span class="line">* &#123; <span class="attribute">color</span>: <span class="built_in">var</span>(--color); &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;我的紫色继承于根元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;我的绿色来自直接设置&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&#x27;alert&#x27;&gt;</span><br><span class="line">  ID选择器权重更高，因此阿拉是红色！</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;我也是红色，占了继承的光&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>上面这个例子我们可以获得这些信息：</p>
<p>变量也是跟着CSS选择器走的，如果变量所在的选择器和使用变量的元素没有交集，是没有效果的。例如#alert定义的变量，只有id为alert的元素才能享有。如果你想变量全局使用，则你可以设置在:root选择器上；<br>当存在多个同样名称的变量时候，变量的覆盖规则由CSS选择器的权重决定的，但并无!important这种用法，因为没有必要，!important设计初衷是干掉JS的style设置，但对于变量的定义则没有这样的需求。<br>CSS属性名可以走变量吗？</p>
<p>类似下面这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attr">--bc</span>: background-color;    </span><br><span class="line">    <span class="selector-tag">var</span>(<span class="attr">--bc</span>): <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br><span class="line">答案是“不可以”，要是可以支持的话，那CSS的压缩可就要逆天了，估计所有的属性都会变成<span class="number">1</span>~<span class="number">2</span>个字符。</span><br></pre></td></tr></table></figure>
<p>CSS变量支持同时多个声明吗？</p>
<p>类似下面这样：<br>…<br>不好意思，类似不了，语法上就根本不支持。</p>
<p>CSS变量使用完整语法<br>CSS变量使用的完整语法为：var( [, ]? )，用中文表示就是：var( &lt;自定义属性名&gt; [, &lt;默认值 ]? )，</p>
<p>意思就是，如果我们使用的变量没有定义（注意，仅限于没有定义），则使用后面的值作为元素的属性值。举个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  --<span class="number">1</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--<span class="number">1</span>, <span class="number">#cd0000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 则此时的背景色是#cd0000 **/</span></span><br></pre></td></tr></table></figure>

<p>CSS变量不合法的缺省特性</p>
<p>请看下面这个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--color</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color, <span class="number">#cd0000</span>);</span><br><span class="line">&#125;</span><br><span class="line">请问，此时&lt;<span class="selector-tag">body</span>&gt;的背景色是？</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">A</span>. transparent    <span class="selector-tag">B</span>. <span class="number">20px</span>     C. <span class="selector-id">#369</span>      D. <span class="selector-id">#cd0000</span></span><br><span class="line">答案是…………………………<span class="selector-tag">A</span>. transparent</span><br></pre></td></tr></table></figure>

<p>不知大家答对了没有！</p>
<p>这是CSS变量非常有意思的一个点，对于CSS变量，只要语法是正确的，就算变量里面的值是个乱七八糟的东西，也是会作为正常的声明解析，如果发现变量值是不合法的，例如上面背景色显然不能是20px，则使用背景色的缺省值，也就是默认值代替，于是，上面CSS等同于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attr">--color</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#369</span>;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>千万不能想当然得认为等同于background-color:20px，这也是为什么上面要强调CSS默认值的使用仅限于变量未定义的情况，并不包括变量不合法。</p>
<p>CSS变量的空格尾随特性</p>
<p>请看下面这个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--size</span>: <span class="number">20</span>;   </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--size)px;</span><br><span class="line">&#125;</span><br><span class="line">请问，此时&lt;<span class="selector-tag">body</span>&gt;的<span class="attribute">font-size</span>大小是多少？</span><br></pre></td></tr></table></figure>
<p>如果你以为是20px就太天真了，实际上，此处font-size:var(–size)px等同于font-size:20 px，注意，20后面有个空格，所以，这里的font-size使用的是<body>元素默认的大小。因此，就不要妄图取消就使用一个数值来贯穿全场，还是使用稳妥的做法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--size</span>: <span class="number">20px</span>;   </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--size);</span><br><span class="line">&#125;</span><br><span class="line">或者使用CSS3 calc()计算：</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--size</span>: <span class="number">20</span>;   </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--size) * <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line">此时，&lt;<span class="selector-tag">body</span>&gt;的<span class="attribute">font-size</span>大小才是<span class="number">20px</span>，</span><br></pre></td></tr></table></figure>
<p>CSS变量的相互传递特性</p>
<p>就是说，我们在CSS变量定义的时候可以直接引入其他变量给自己使用，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--green</span>: <span class="number">#4CAF50</span>;   </span><br><span class="line">  <span class="attr">--backgroundColor</span>: <span class="built_in">var</span>(--green);</span><br><span class="line">&#125;</span><br><span class="line">或者更复杂的使用CSS3 calc()计算，例如：</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--columns</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attr">--margins</span>: <span class="built_in">calc</span>(<span class="number">24px</span> / <span class="built_in">var</span>(--columns));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于复杂布局，CSS变量的这种相互传递和直接引用特性可以简化我们的代码和实现成本，尤其和动态布局在一起的时候，无论是CSS的响应式后者是JS驱动的布局变化。</p>
<p>我们来看一个CSS变量与响应式布局的例子，您可以狠狠地点击这里：CSS变量与响应式布局实例demo</p>
<p>默认进去是4栏，如下图：</p>
<p>随着浏览器宽度减小，4栏可能就变成3栏，2栏甚至1栏，我们实际开发的时候，显然不仅仅是栏目数量变化，宽度小，往往意味着访问设备尺寸有限，此时我们往往会缩小空白间距以及文字字号大小，这样，有限屏幕才能显示更多内容。</p>
<p>也就是说，当我们响应式变化的时候，改变的CSS属性值不是1个，而是3个或者更多，如果我们有3个响应点，是不是就至少需要9个CSS声明？但是，由于我们有了CSS变量，同时，CSS变量可以传递，当我们遭遇响应点的时候，我们只需要改变一个CSS属性值就可以了。</p>
<p>下面就是本demo核心CSS代码（只需要改变–columns这一个变量即可）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attr">--columns</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="attr">--margins</span>: <span class="built_in">calc</span>(<span class="number">24px</span> / <span class="built_in">var</span>(--columns));</span><br><span class="line">    <span class="attr">--space</span>: <span class="built_in">calc</span>(<span class="number">4px</span> * <span class="built_in">var</span>(--columns));</span><br><span class="line">    <span class="attr">--fontSize</span>: <span class="built_in">calc</span>(<span class="number">20px</span> - <span class="number">4</span> / <span class="built_in">var</span>(--columns));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attr">--columns</span>: <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attr">--columns</span>: <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attr">--columns</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是，我们在2栏下的效果就是，字号，间距随着栏目数量的减小也一并减小了，然后每栏之间间距是扩大了;</p>
<p>有没有觉得CSS越来越屌了呢！哈哈~</p>
<p>三、结束语<br>由于目前几乎没有关于CSS3 var()的文章，因此，上面关于var()的语法特性等都是自己通过看规范文档，外加细致的测试得到的。但是，一个人的能力总是有限的，因此，必然还有很多var()变量有意思的点没发现，因此，就希望大家若是发现var()其他有意思的地方，欢迎评论告知，我们及时添加在文章中，方便你我他她它。</p>
<p>多人合作项目我也会使用Less&#x2F;Sass之类的预编译工具，但是，基本上用到的就是变量，其他高级功能，几乎都不怎么使用。所以，如果浏览器全方位支持了原生的CSS变量，我十有八九就会抛弃Less&#x2F;Sass之类的工具。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css优化</title>
    <url>/blog/2023/04/04/css%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="css优化"><a href="#css优化" class="headerlink" title="css优化"></a>css优化</h3><ol>
<li><p>加载性能：<br>（1）css压缩：将写好的css进行打包压缩，可以减少很多的体积。<br>（2）css单一样式：当需要下边距和左边距的时候，很多时候选择：<code>margin:top0 bottom:0;</code>但<code>margin-bottom:bottom;margin-left:left;</code>执行的效率更高。<br>（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</p>
<span id="more"></span></li>
<li><p>选择器性能：<br>（1）关键选择器（keyselector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到<br>左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；<br>（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹<br>配它们了）。<br>（3）避免使用通配规则，如*{}计算次数惊人！只对需要用到的元素进行选择。<br>（4）尽量少的去对标签进行选择，而是用class。<br>（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过<br>三层，更多的使用类来关联每一个标签元素。<br>（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</p>
</li>
<li><p>渲染性能：<br>（1）慎重使用高性能属性：浮动、定位。<br>（2）尽量减少页面重排、重绘。<br>（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。<br>（4）属性值为0时，不加单位。<br>（5）属性值为浮动小数0.**，可以省略小数点之前的0。<br>（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。<br>（7）不使用@import前缀，它会影响css的加载速度。<br>（8）选择器优化嵌套，尽量避免层级过深。<br>（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清<br>楚，再使用。<br>（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。<br>（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。webfonts通常体积庞大，而且一些浏<br>览器在下载webfonts时会阻塞页面渲染损伤性能。</p>
</li>
<li><p>可维护性、健壮性：<br>（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。<br>（2）样式与内容分离：将css代码定义到外部css中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css关于Grid布局</title>
    <url>/blog/2023/04/21/css%E5%85%B3%E4%BA%8EGrid%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h3 id="如果说flex布局是一维布局，则grid布局则是二维布局"><a href="#如果说flex布局是一维布局，则grid布局则是二维布局" class="headerlink" title="如果说flex布局是一维布局，则grid布局则是二维布局"></a>如果说flex布局是一维布局，则grid布局则是二维布局</h3><style>
.wrap{
    display:grid;
    grid-template-columns:repeat(3,100px);
    grid-template-rows:repeat(4,100px);
    grid-template-areas: 'a b c' 'd e f' 'g h i';
    grid-gap:10px 20px;
}
.wrap div{
    display:grid;
    align-items:center;
    justify-items:center;
    place-items:center center; /* place-items是上面两个属性的简写形式 */
    font-size:20px;
    color:#fff;
}
.a1{
    background:blueviolet;
    grid-area:a;
    grid-column:1/3;
    grid-row:1/3;
}
.a2{
    background:lightblue;
}
.a3{
    background:cadetblue;
}
.a4{
    background:cornflowerblue;
}
.a5{
    background:darkblue;
}
.a6{
    background:deepskyblue;
}
.a7{
    background:dodgerblue;
}
.a8{
    background:lightsteelblue;
}
.a9{
    background:powderblue;
    /* grid-area:i;
    grid-column:1/2;
    grid-row:1/3; */
}
</style>
<div class="wrap">
    <div class="a1">1</div>
    <div class="a2">2</div>
    <div class="a3">3</div>
    <div class="a4">4</div>
    <div class="a5">5</div>
    <div class="a6">6</div>
    <div class="a7">7</div>
    <div class="a8">8</div>
    <div class="a9">9</div>
</div>

<span id="more"></span>

<p>以上布局充分体现出了<code>grid</code>布局的精髓，<code>grid</code>布局虽然属性之多，但是随之提供的是更灵活，更多样的布局方式；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多行布局使用repeat，如果不固定元素数量，则可以使用`auto-fill`参数 */</span></span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>:<span class="built_in">repeat</span>(auto-fill,<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面效果代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:grid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-template-rows</span>:<span class="built_in">repeat</span>(<span class="number">4</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a b c&#x27;</span> <span class="string">&#x27;d e f&#x27;</span> <span class="string">&#x27;g h i&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-gap</span>:<span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:grid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-items</span>:center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">place-items</span>:center center; <span class="comment">/* place-items是上面两个属性的简写形式 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:blueviolet;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-area</span>:a;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-column</span>:<span class="number">1</span>/<span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">grid-row</span>:<span class="number">1</span>/<span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a2</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:lightblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a3</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:cadetblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a4</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:cornflowerblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a5</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:darkblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a6</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:deepskyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a7</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:dodgerblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a8</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:lightsteelblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a9</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:powderblue;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* grid-area:i;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    grid-column:1/2;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    grid-row:1/3; */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a7&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a8&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a9&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>关于表单</title>
    <url>/blog/2016/09/14/css%E5%85%B3%E4%BA%8E%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><blockquote>
<p>关于input表单的一些样式和JS问题：<br>input的placeholder属性字体颜色：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-moz-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>::-moz-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-ms-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- input的选中状态： -->
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">border</span>:<span class="number">1px</span> solid red &#125;</span><br></pre></td></tr></table></figure>

<h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><blockquote>
<p>IE：不管该行有没有文字，光标高度与font-size一致。</p>
</blockquote>
<p>FF：该行有文字时，光标高度与font-size一致。该行无文字时，光标高度与input的height一致。</p>
<p>Chrome：该行无文字时，光标高度与line-height一致；该行有文字时，光标高度从input顶部到文字底部(这两种情况都是在有设定line-height的时候)，如果没有line-height，则是与font-size一致。</p>
<p>解决的方案：</p>
<p>给input的height设定一个较小的高度（或者不设置高度），然后用padding去填充，基本上可以解决所有浏览器的问题</p>
<h3 id="CSS控制输入文本大小写"><a href="#CSS控制输入文本大小写" class="headerlink" title="CSS控制输入文本大小写"></a>CSS控制输入文本大小写</h3><blockquote>
<p>text-transform：none；capitalize；uppercase；lowercase；inherit；<br>none默认。定义带有小写字母和大写字母的标准的文本。<br>capitalize文本中的每个单词以大写字母开头。<br>uppercase定义仅有大写字母。lowercase定义无大写字母，仅有小写字母。<br>inherit规定应该从父元素继承 text-transform 属性的值。</p>
</blockquote>
<h3 id="控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏-其实就是改变placeholder中的文字颜色"><a href="#控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏-其实就是改变placeholder中的文字颜色" class="headerlink" title="控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏(其实就是改变placeholder中的文字颜色)"></a>控制input标签的placeholder属性实现获取焦点显示暗文，失去焦点隐藏(其实就是改变placeholder中的文字颜色)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;::-webkit-input-placeholder &#123; <span class="attribute">color</span>:transparent; &#125;</span><br><span class="line">&amp;:-moz-placeholder &#123; <span class="attribute">color</span>:transparent; &#125;</span><br><span class="line">&amp;::-moz-placeholder &#123; <span class="attribute">color</span>:transparent; &#125;</span><br><span class="line">&amp;:-ms-input-placeholder &#123; <span class="attribute">color</span>:transparent;&#125;</span><br><span class="line">&amp;<span class="selector-pseudo">:focus</span>::-webkit-input-placeholder &#123; <span class="attribute">color</span>:<span class="number">#9fb0bf</span>; &#125;</span><br><span class="line">&amp;<span class="selector-pseudo">:focus</span>:-moz-placeholder &#123; <span class="attribute">color</span>:<span class="number">#9fb0bf</span>; &#125;</span><br><span class="line">&amp;<span class="selector-pseudo">:focus</span>::-moz-placeholder &#123; <span class="attribute">color</span>:<span class="number">#9fb0bf</span>; &#125;</span><br><span class="line">&amp;<span class="selector-pseudo">:focus</span>:-ms-input-placeholder &#123; <span class="attribute">color</span>:<span class="number">#9fb0bf</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="ios在fixed布局下出现bug问题"><a href="#ios在fixed布局下出现bug问题" class="headerlink" title="ios在fixed布局下出现bug问题"></a>ios在fixed布局下出现bug问题</h3><p>软键盘唤起后，页面的fixed 元素将失效（即无法浮动，也可以理解为变成了absolute定位），所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。<br>这便是 iOS 上 fixed 元素和输入框的 bug 。其中不仅限于 type&#x3D;text 的输入框，凡是软键盘（比如时间日期选择、select 选择等等）被唤起，都会遇到同样地问题。<br>解决方法：<br>    将原 body 滚动的区域域移到 main 内部，而 header 和footer 的样式不变。<br>.main{<br>    position: absolute;<br>    top: 50px;<br>    bottom: 34px;<br>    overflow-y: scroll;<br>}<br>.main  .content {<br>    height: 2000px;<br>}</p>
<p>这样布局可能会是的滚动失去原来的流畅，加以下代码，恢复之前丝滑般的滚动：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的布局在h5是行不通的，所以需要用JS来控制内部滚动元素的高度：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 内部滚动</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        h = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;  <span class="comment">//获取窗口的高度与宽度(不包含工具条与滚动条):</span></span><br><span class="line">    $(<span class="string">&#x27;#js_orderConWrap&#x27;</span>).<span class="title function_">height</span>(h - $(<span class="string">&#x27;.cm-header-wrap&#x27;</span>).<span class="title function_">height</span>());  <span class="comment">//内部元素的高度 = 窗口高度 - 头部或底部的高度(如果有)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//既然都在h5了，所以还要考虑APP环境，在APP环境下头部是不会用h5的，所以需要判断h5和APP环境；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.弹层显示，禁止背景滚动</span></span><br><span class="line"><span class="comment">//关闭滚动条</span></span><br><span class="line">        $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;touchmove&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>($(<span class="string">&#x27;.app-popup-container&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;display&#x27;</span>) === <span class="string">&#x27;block&#x27;</span>)&#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="定义插入光标（caret）的颜色"><a href="#定义插入光标（caret）的颜色" class="headerlink" title="定义插入光标（caret）的颜色"></a>定义插入光标（caret）的颜色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">caret-color</span>: red;</span><br></pre></td></tr></table></figure>

<h3 id="修改-chrome-记住密码后自动填充表单的黄色背景"><a href="#修改-chrome-记住密码后自动填充表单的黄色背景" class="headerlink" title="修改 chrome 记住密码后自动填充表单的黄色背景"></a>修改 chrome 记住密码后自动填充表单的黄色背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* chrome表单自动填充后，input文本框的背景会变成黄色的，通过审查元素可以看到这是由于chrome会默认给自动填充的in</span></span><br><span class="line"><span class="comment">put表单加上input:-webkit-autofill私有属性，然后对其赋予以下样式： */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>,<span class="number">255</span>,<span class="number">189</span>) <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">background-image</span>: none <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对chrome默认定义的background-color，background-image，color使用important是不能提高其优先级的，但是</span></span><br><span class="line"><span class="comment">其他属性可使用。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用足够大的纯色内阴影来覆盖input输入框的黄色背景，处理如下 */</span></span><br><span class="line"><span class="selector-tag">input</span>:-webkit-autofill,textarea:-webkit-autofill,select:-webkit-autofill&#123;</span><br><span class="line">-webkit-<span class="attribute">box-shadow</span>: <span class="number">000px</span> <span class="number">1000px</span> white inset;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCC</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>其他css问题</title>
    <url>/blog/2016/09/14/css%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="css相关能写一万年，考虑分开写了，太多了"><a href="#css相关能写一万年，考虑分开写了，太多了" class="headerlink" title="css相关能写一万年，考虑分开写了，太多了"></a>css相关能写一万年，考虑分开写了，太多了</h3><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool">更多参见阮老师blog</a><br>1.意为弹性布局，块元素：display:flex;行内元素：display:inline-flex;<br>2.不同内核浏览器需要加前缀区分，如：display:-webkit-flex; &#x2F;<em>Safari</em>&#x2F;  <code>非规范属性值：display:-webkit-box</code><br>3.设为flex布局后，子元素的float,clear,vertical-align属性将失效。  <code>非规范属性：-webkit-box-orient：vertical //垂直排列子元素</code><br>4.flex属性：<br>1）flex-direction:row（默认值）：主轴为水平方向，起点在左端。<br>                  row-reverse：主轴为水平方向，起点在右端。<br>                  column：主轴为垂直方向，起点在上沿。<br>                  column-reverse：主轴为垂直方向，起点在下沿<br>2)flex-wrap属性: nowrap（默认）：不换行。<br>                wrap：换行，第一行在上方。<br>                wrap-reverse：换行，第一行在下方。<br>3)flex-flow：属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br>4)justify-content:flex-start | flex-end | center | space-between | space-around<br>5)align-items: flex-start | flex-end | center | baseline | stretch;<br>6)当使用了<code>flex-direction:column</code>之后,未定宽的元素会自动适应宽度为100%；给元素加个非默认值<code>align-self:stretch</code>外的值就可以</p>
<h3 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h3><p>grid布局比起flex布局更加灵活，flex布局只有横轴纵轴概念，grid布局则多了个网格概念，可以控制每个单元格样式</p>
<h3 id="清除所有a标签在点击时出现的特效"><a href="#清除所有a标签在点击时出现的特效" class="headerlink" title="清除所有a标签在点击时出现的特效"></a>清除所有a标签在点击时出现的特效</h3><blockquote>
<p>清除所有a标签在点击时出现的特效：a{ -webkit-tap-highlight-color:rgba(255,0,0,0);}</p>
</blockquote>
<h3 id="文字与图片不能垂直居中对齐"><a href="#文字与图片不能垂直居中对齐" class="headerlink" title="文字与图片不能垂直居中对齐"></a>文字与图片不能垂直居中对齐</h3><blockquote>
<p>给图片添加css样式<br>vertical-align:text-bottom；<br>vertical-align只适用于行内块元素</p>
</blockquote>
<h3 id="css实现禁止点击事件"><a href="#css实现禁止点击事件" class="headerlink" title="css实现禁止点击事件"></a>css实现禁止点击事件</h3><blockquote>
<p>pointer-events: none;<br>阻止点击事件，变为默认光标，阻止触发hover，active，阻止JS点击事件<br>none:<br>元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</p>
</blockquote>
<ul>
<li>扩展：如果有一个公共组件，里面有个可移动元素，父元素设置<code>pointer-events: none;</code>，并且子元素设置<code>pointer-events: auto;</code>，可以实现子元素移动同时父元素不可点击并且不影响被父元素遮盖的元素点击事件，比如小程序里可拖动组件如果全屏拖动必须area标签设置全屏，然后下面的元素就无法选中。</li>
</ul>
<h3 id="img标签和同级div之间的间隙处理"><a href="#img标签和同级div之间的间隙处理" class="headerlink" title="img标签和同级div之间的间隙处理"></a>img标签和同级div之间的间隙处理</h3><blockquote>
<p>给img标签设置 vertical-align:middle;display:block;</p>
</blockquote>
<h3 id="在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）"><a href="#在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）" class="headerlink" title="在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）"></a>在移动端手机APP中禁止长按来阻止其他手机自带默认事件（如：iPhone的3Dtouch）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="comment">/* 当你触摸并按住触摸目标时候，禁止或显示系统默认菜单 */</span></span><br><span class="line">  touch-callout: none; </span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">  <span class="comment">/* 用户能否选中文本 */</span></span><br><span class="line">  -webkit-<span class="attribute">user-select</span>: none; </span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本超出后显示省略号"><a href="#文本超出后显示省略号" class="headerlink" title="文本超出后显示省略号"></a>文本超出后显示省略号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 一行 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">40px</span>;</span><br><span class="line">   <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">   <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 多行 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;                <span class="comment">/* 超出部分隐藏 */</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;         <span class="comment">/* 显示省略号来修饰被剪掉的文本 */</span></span><br><span class="line">    <span class="attribute">display</span>: box;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="selector-tag">line</span>-clamp: <span class="number">3</span>;        <span class="comment">/* 非规范属性，实现规定文本行数 火狐不支持这个属性 */</span></span><br><span class="line">    -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-orient</span>: vertical;    <span class="comment">/* 规定框的子元素应该被水平或垂直排列 */</span></span><br><span class="line">    -moz-<span class="attribute">box-orient</span>: vertical;       <span class="comment">/* 支持火狐的写法 */</span></span><br><span class="line">    <span class="attribute">word-break</span>: break-word;</span><br><span class="line">&#125; </span><br><span class="line">*<span class="selector-tag">line</span>-clamp*</span><br><span class="line">限制在一个块元素显示的文本的行数。</span><br><span class="line">-webkit-<span class="selector-tag">line</span>-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</span><br><span class="line">为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：</span><br><span class="line"><span class="attribute">display</span>: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</span><br><span class="line">-webkit-<span class="attribute">box-orient</span> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</span><br><span class="line"><span class="attribute">text-overflow</span>，可以用来多行文本的情况下，用省略号“...”隐藏超出范围的文本 。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>升级版：<a href="https://codepen.io/xboxyan/pen/VwpPNbm?fileGuid=YcHxPHhHvDtpqvDw">https://codepen.io/xboxyan/pen/VwpPNbm?fileGuid=YcHxPHhHvDtpqvDw</a></p>
</blockquote>
<p>word-break 已弃用，但是如果想单词不换行，只有特长单词一行放不下才换行，只能用这个值；</p>
<h3 id="自定义鼠标指针"><a href="#自定义鼠标指针" class="headerlink" title="自定义鼠标指针"></a>自定义鼠标指针</h3><blockquote>
<p>cursor: url(&#x2F;路径&#x2F;cursor.cur), url(two.svg) 5 5,auto; </p>
</blockquote>
<blockquote>
<p>url(…)或者逗号分隔的url(…), url(…), …，指向图片文件。用大于一个url值提供后备，以防某些指针图片类型不被支持。最后必须提供一个非 URL 后备值。<br>可选 x，y 坐标。两个小于 32 的无单位非负数。</p>
</blockquote>
<h3 id="文字竖排排列显示方案"><a href="#文字竖排排列显示方案" class="headerlink" title="文字竖排排列显示方案"></a>文字竖排排列显示方案</h3><p>1.writing-mode:lr-tb或writing-mode:tb-rl<br>  参数：<br>    &lt;1&gt;、lr-tb：从左向右，从上往下<br>    &lt;2&gt;、tb-rl：从上往下，从右向左<br>    运行代码发现，IE显示正常，火狐、谷歌浏览器却不支持，所以不建议使用writing-mode属性。<br>2.对文字对象宽度设置只能排下一个文字的宽度距离，让文字一行排不下两个文字使其文字自动换行，就形成了竖立排版需求。<br>3.利用html <code>br</code> 换行标签实现文字换行，对每个文字后加上换行br标签让其竖列排版。</p>
<h3 id="webkit-overflow-scrolling"><a href="#webkit-overflow-scrolling" class="headerlink" title="-webkit-overflow-scrolling"></a>-webkit-overflow-scrolling</h3><blockquote>
<p>用来控制元素在移动设备上是否使用滚动回弹效果.<br>兼容安卓和IOS的写法如下</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling: touch; <span class="comment">/* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span> </span><br><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling: auto; <span class="comment">/* 当手指从触摸屏上移开，滚动会立即停止 */</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>Bug<br>当你给一个元素设置过position:absolute;或者position:relative;后再增加-webkit-overflow-scrolling: touch;属性后，你会发现，滑动几次后可滚动区域会卡主，不能在滑动，这时给元素增加个z-index值就可以了。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling: touch; </span><br><span class="line"><span class="attribute">position</span>:absolute; </span><br><span class="line"><span class="attribute">z-index</span>:<span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<h3 id="overscroll-behavior可以控制只触发当前层的滚动效果"><a href="#overscroll-behavior可以控制只触发当前层的滚动效果" class="headerlink" title="overscroll-behavior可以控制只触发当前层的滚动效果"></a>overscroll-behavior可以控制只触发当前层的滚动效果</h3><p>overscroll-behavior: auto | contain | none</p>
<blockquote>
<p>auto:（默认值），即滚动到边缘后继续滚动外部的可滚动容器<br>contain: 默认的滚动溢出行为只会表现在当前元素的内部（例如“反弹”效果或刷新），并且会阻止默认的滚动溢出行为<br>none:相邻的滚动区域不会发生滚动，并且会阻止默认的滚动溢出行为<br>contain和none的行为差异体现主要在移动端</p>
</blockquote>
<h3 id="overflow-anchor属性改变滚动行为来控制可视区内容"><a href="#overflow-anchor属性改变滚动行为来控制可视区内容" class="headerlink" title="overflow-anchor属性改变滚动行为来控制可视区内容"></a>overflow-anchor属性改变滚动行为来控制可视区内容</h3><p>overflow-anchor: auto | none</p>
<blockquote>
<p>auto:（默认值），即滚动时不会受内容变化影响。滚动条变化，可视内容不变<br>none:即滚动时会受内容变化影响，可视区插入内容会显示插入的内容。滚动条不变，可视内容变化</p>
</blockquote>
<h3 id="css3滤镜效果：-webkit-filter"><a href="#css3滤镜效果：-webkit-filter" class="headerlink" title="css3滤镜效果：-webkit-filter"></a>css3滤镜效果：-webkit-filter</h3><p><a href="">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a></p>
<h3 id="字体抗锯齿效果"><a href="#字体抗锯齿效果" class="headerlink" title="字体抗锯齿效果"></a>字体抗锯齿效果</h3><p>Webkit在自己的引擎中支持了这一效果。<br>-webkit-font-smoothing<br>它有三个属性值：<br>none —— 对低像素的文本比较好<br>subpixel-antialiased——默认值<br>antialiased ——抗锯齿很好<br>.icon {<br>-webkit-font-smoothing: antialiased;<br>-moz-osx-font-smoothing: grayscale;  &#x2F;&#x2F;Gecko也推出了自己的抗锯齿效果的非标定义<br>}</p>
<h3 id="弹层出现禁用背景body滚动条"><a href="#弹层出现禁用背景body滚动条" class="headerlink" title="弹层出现禁用背景body滚动条"></a>弹层出现禁用背景body滚动条</h3><p>height:100%;overscroll:hidden;<br>touch-action:none;&#x2F;&#x2F;禁止触发默认的手势操作。<br>pan-x：可以在父级元素(the nearest ancestor)内进行水平移动的手势操作。<br>pan-y：可以在父级元素内进行垂直移动的手势操作。<br>manipulation：允许手势水平&#x2F;垂直平移或持续的缩放。任何auto属性支持的额外操作都不支持；<br>注：touch-action只支持具有行内块，块级的元素</p>
<h3 id="will-change提高页面滚动、动画等渲染性能css3"><a href="#will-change提高页面滚动、动画等渲染性能css3" class="headerlink" title="will-change提高页面滚动、动画等渲染性能css3"></a>will-change提高页面滚动、动画等渲染性能css3</h3><p>参考张鑫旭blog:<br><a href="">http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/</a></p>
<h3 id="支持webkit内核浏览器的滚动条样式自定义"><a href="#支持webkit内核浏览器的滚动条样式自定义" class="headerlink" title="支持webkit内核浏览器的滚动条样式自定义"></a>支持webkit内核浏览器的滚动条样式自定义</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar&#123;<span class="attribute">width</span>: <span class="number">5px</span>;<span class="attribute">height</span>: <span class="number">8px</span>;<span class="attribute">background-color</span>: <span class="number">#aaa</span>&#125; <span class="comment">/*滚动条垂直方向的宽度与水平方向的高度*/</span> </span><br><span class="line">::-webkit-scrollbar-button&#123;<span class="attribute">background-color</span>: <span class="number">#aaa</span>&#125; <span class="comment">/*滚动条按钮*/</span> </span><br><span class="line">::-webkit-scrollbar-track&#123;<span class="attribute">background-color</span>: <span class="number">#aaa</span>&#125; <span class="comment">/*滚动条轨道*/</span> </span><br><span class="line">::-webkit-scrollbar-track-piece&#123;<span class="attribute">background-color</span>: <span class="number">#aaa</span>&#125; <span class="comment">/*滚动条垂直方向轨道件*/</span> </span><br><span class="line">::-webkit-scrollbar-thumb&#123;<span class="attribute">background-color</span>: <span class="number">#aaa</span>&#125; <span class="comment">/*滚动条轨道上的按钮*/</span> </span><br><span class="line">::-webkit-scrollbar-corner&#123;<span class="attribute">background-color</span>: <span class="number">#aaa</span>&#125; <span class="comment">/*滚动条轨道上的滚动角*/</span> </span><br></pre></td></tr></table></figure>

<h3 id="页面加滤镜"><a href="#页面加滤镜" class="headerlink" title="页面加滤镜"></a>页面加滤镜</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 高斯模糊 */</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(px)；</span><br><span class="line"><span class="comment">/* 转换为灰度图像 */</span></span><br><span class="line">filter: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">-webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">-moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">-ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">-o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line"><span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">-webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">1</span>);    </span><br></pre></td></tr></table></figure>

<h3 id="mask"><a href="#mask" class="headerlink" title="mask"></a>mask</h3><p>css的mask属性允许使用者通过部分或者完全隐藏一个元素的可见区域。这种效果可以通过遮罩或者裁切特定区域的图片。<br>mask-reference:设置遮罩图片的路径<br>masking-mode:设置遮罩图片的模式<br>position:设置遮罩图片的位置<br>bg-size:设置遮罩的大小<br>repeat-style:设置遮罩图片的重复性<br>compositing-operator:设置遮罩图层的组合操作</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.anothertarget</span> &#123;</span><br><span class="line">  <span class="attribute">mask</span>: <span class="built_in">url</span>(<span class="string">resources.svg#c1</span>) <span class="number">50px</span> <span class="number">30px</span>/<span class="number">10px</span> <span class="number">10px</span> repeat-x exclude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="clip-图像裁剪"><a href="#clip-图像裁剪" class="headerlink" title="clip 图像裁剪"></a>clip 图像裁剪</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">clip</span>:<span class="built_in">rect</span>(<span class="number">0px</span>,<span class="number">0px</span>,<span class="number">0px</span>,<span class="number">0px</span>) //四个值分别对应上右下左</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="滚动动画"><a href="#滚动动画" class="headerlink" title="滚动动画"></a>滚动动画</h3><p>html, body { scroll-behavior:smooth; }<br>凡是需要滚动的地方都加一句scroll-behavior:smooth就好了！<br>如：<a href="#">返回顶部</a></p>
<blockquote>
<p>js处理：<br>target.scrollIntoView({<br>    behavior: “smooth”<br>});<br>我们随便打开一个有链接的页面，把首个链接滚动到屏幕外，然后控制台输入类似下面代码，我们就可以看到页面平滑滚动定位了：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">links</span>[<span class="number">0</span>].<span class="title function_">scrollIntoView</span>(&#123;</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="box-shadow添加多个不同的阴影"><a href="#box-shadow添加多个不同的阴影" class="headerlink" title="box-shadow添加多个不同的阴影"></a>box-shadow添加多个不同的阴影</h3><blockquote>
<p>用逗号分隔即可<br>如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">243</span>,<span class="number">132</span>,<span class="number">0</span>, <span class="number">0.35</span>), <span class="number">0</span> -<span class="number">6px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">244</span>, <span class="number">149</span>, <span class="number">0</span>,<span class="number">0.35</span>) inset;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="背景色渐变"><a href="#背景色渐变" class="headerlink" title="背景色渐变"></a>背景色渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="comment">/* 渐变轴为45度，从蓝色渐变到红色 */</span></span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, blue, red);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从右下到左上、从蓝色渐变到红色 */</span></span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(to left top, blue, red);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从下到上，从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span></span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(<span class="number">0deg</span>, blue, green <span class="number">40%</span>, red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="iphoenX适配问题-利用media限制iPhone-X屏幕尺寸"><a href="#iphoenX适配问题-利用media限制iPhone-X屏幕尺寸" class="headerlink" title="iphoenX适配问题(利用media限制iPhone X屏幕尺寸)"></a>iphoenX适配问题(利用media限制iPhone X屏幕尺寸)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css部分，利用media做你想要的适配，我这里通过一个白色div留出安全距离防挡 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">812px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="selector-class">.adapt</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="position-sticky"><a href="#position-sticky" class="headerlink" title="position:sticky"></a>position:sticky</h3><p>1.父级元素不能有任何overflow:visible以为的overflow设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。因此，如果你的position:sticky无效，看看是不是某一个祖先元素设置了overflow:hidden，移除之即可。<br>2.同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。<br>3.sticky定位，不仅可以设置top，基于滚动容器上边缘定位；还可以设置bottom，也就是相对底部粘滞。如果是水平滚动，也可以设置left和right值。</p>
<h3 id="css设置暗黑模式"><a href="#css设置暗黑模式" class="headerlink" title="css设置暗黑模式"></a>css设置暗黑模式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">        <span class="attribute">background</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS-all"><a href="#CSS-all" class="headerlink" title="CSS all"></a>CSS all</h3><blockquote>
<p>CSS <code>all</code> 简写属性 将除却 <code>unicode-bidi</code> 与 <code>direction</code> 之外的所有属性重设至其初始值，或继承值。</p>
</blockquote>
<ul>
<li>取值<br>initial<br>该关键字代表改变该元素或其父元素的所有属性至初始值。<br>inherit<br>该关键字代表改变该元素或其父元素的所有属性的值至他们的父元素属性的值。inherited values<br>unset<br>该关键字代表如果该元素的属性的值是可继承的，则改变该元素或该元素的父元素的所有属性的值为他们父元素的属性值，反之则改变为初始值。</li>
</ul>
<h3 id="css设置图片img标签显示样式"><a href="#css设置图片img标签显示样式" class="headerlink" title="css设置图片img标签显示样式"></a>css设置图片<code>img</code>标签显示样式</h3><p><code>object-fit</code>属性</p>
<ul>
<li>支持：chrome: &gt;&#x3D; 31.0; IE: &gt;&#x3D; 16.0; firefox: &gt;&#x3D; 36.0; safari: &gt;&#x3D; 7.1;<blockquote>
<p>值	     描述 <br/><br>fill	   默认，不保证保持原有的比例，内容拉伸填充整个内容容器。 <br/><br>contain	 保持原有尺寸比例。内容被缩放。 <br/><br>cover	   保持原有尺寸比例。但部分内容可能被剪切。 <br/><br>none	   保留原有元素内容的长度和宽度，也就是说内容不会被重置。 <br/><br>scale-down	保持原有尺寸比例。内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。 <br/><br>initial	 设置为默认值 <br/><br>inherit	 从该元素的父元素继承属性。</p>
</blockquote>
</li>
</ul>
<p><code>object-position</code>属性</p>
<blockquote>
<p>object-position 属性与 object-fit 属性一起使用，指定图像或视频应如何在其内容框中使用 x&#x2F;y 坐标进行定位。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">object-position</span>: bottom right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="卡片翻转效果实现"><a href="#卡片翻转效果实现" class="headerlink" title="卡片翻转效果实现"></a>卡片翻转效果实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: <span class="number">0.6s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;<span class="comment">/*子元素将保留其 3D 位置*/</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span><span class="selector-class">.rotate</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.front</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">backface-visibility</span>: hidden;<span class="comment">/* 定义当元素不面向屏幕时是否可见，hidden：背面是不可见的 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.back</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">backface-visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="empty-选择器"><a href="#empty-选择器" class="headerlink" title=":empty 选择器"></a>:empty 选择器</h3><blockquote>
<p><code>:empty</code>代表没有子元素的元素。子元素只可以是元素节点或文本（包括空格）。注释或处理指令都不会产生影响。</p>
</blockquote>
<ul>
<li>之前判断数据为空显示<code>暂无数据</code>需要判断数据length为0显示一个包裹暂无数据文案的标签，而用了<code>:empty</code>伪类选择器，只需要在外层div加一个伪类就可以实现；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;—— 没有更多了 ——&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="gap属性"><a href="#gap属性" class="headerlink" title="gap属性"></a>gap属性</h3><p>当我们需要每个子元素之间距离等分而又除不尽时，就可以用到<code>gap</code>属性，<code>gap</code>属性它适用于<code>Grid</code>布局、<code>Flex</code>布局以及多列布局，并不一定只是<code>Grid</code>布局中可以使用。<br>比如我们要让每个元素之间隔开<code>20px</code>， 那么使用<code>gap</code>我们可以这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex | grid；</span><br><span class="line">  gap: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="background-clip-实现文本背景图"><a href="#background-clip-实现文本背景图" class="headerlink" title="background-clip 实现文本背景图"></a>background-clip 实现文本背景图</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="invalid-伪类"><a href="#invalid-伪类" class="headerlink" title=":invalid 伪类"></a>:invalid 伪类</h3><blockquote>
<p>选择任何未通过验证的<code>&lt;form&gt;</code>、<code>&lt;fieldset&gt;</code>、<code>&lt;input&gt;</code>或其他表单元素。</p>
</blockquote>
<h3 id="focus-within-伪类"><a href="#focus-within-伪类" class="headerlink" title=":focus-within 伪类"></a>:focus-within 伪类</h3><blockquote>
<p>当元素或其任意后代元素被聚焦时，将匹配该元素。换言之，它表示<code>:focus</code>伪类匹配到该元素自身或它的后代时，该伪类生效。</p>
</blockquote>
<h3 id="mix-blend-mode-difference"><a href="#mix-blend-mode-difference" class="headerlink" title="mix-blend-mode:difference"></a>mix-blend-mode:difference</h3><blockquote>
<p><code>mix-blend-mode</code>属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。其中，difference 表示差值。</p>
</blockquote>
<h3 id="line-start和-block-end相关属性"><a href="#line-start和-block-end相关属性" class="headerlink" title="*-line-start和*-block-end相关属性"></a><code>*-line-start</code>和<code>*-block-end</code>相关属性</h3><p>其中 inline 和 block 表示方向， start 和 end 表示起止方位。</p>
<p>在中文和英文网页环境中，inline元素（文字、图片、按钮等）的默认是从左往右水平排列的；block元素（如<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>元素等）默认是从上往下垂直排列的。</p>
<p>因此，<code>margin-inline-start</code>就表示内联元素排列方向的起始位置，就是“左侧”，<code>margin-inline-end</code>就表示内联元素排列方向的终止位置，就是“右侧”；<code>margin-block-start</code>就表示块级元素排列方向的起始位置，就是“上面”，<code>margin-block-end</code>就表示块级元素排列方向的终止位置，就是“下面”。</p>
<blockquote>
<p>由此拓展出的<code>border-inline</code>和<code>border-block</code>相信可以举一反三了；</p>
</blockquote>
<h3 id="flex-布局-子元素不设置宽高，高度撑满父元素的问题"><a href="#flex-布局-子元素不设置宽高，高度撑满父元素的问题" class="headerlink" title="flex 布局 子元素不设置宽高，高度撑满父元素的问题"></a>flex 布局 子元素不设置宽高，高度撑满父元素的问题</h3><p>在 <code>flex</code> 布局中，我们通过 <code>align-items</code> 来控制元素在交叉轴上的对齐方式。</p>
<p>它可能取5个值：<br>flex-start: 交叉轴的起点对齐<br>flex-end: 交叉轴的终点对齐<br>center: 交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch (默认值）: 如果子元素未设置高度或者高度为auto，将占满整个容器的高度。</p>
<p>当我们没有给子元素增加高度的时候，其在交叉轴方向的对齐方式就是默认值 <code>stretch</code>，因此他的高度与父元素的高度一致。<br>所以如果想要自适应高度，子元素需单独设置<code>align-self:flex-start</code>，或者父元素不设置高度，靠子元素撑开;</p>
<h3 id="多个标题竖向排列，有中文扩号【「导致顶端无法对齐解决"><a href="#多个标题竖向排列，有中文扩号【「导致顶端无法对齐解决" class="headerlink" title="多个标题竖向排列，有中文扩号【「导致顶端无法对齐解决"></a>多个标题竖向排列，有中文扩号<code>【「</code>导致顶端无法对齐解决</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-attr">[title^=<span class="string">&quot;【&quot;</span>]</span>,<span class="selector-tag">p</span><span class="selector-attr">[title^=<span class="string">&quot;「&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-indent</span>: -<span class="number">0.5em</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;【你好，晚安，早安，午安】&quot;</span>&gt;</span>【你好，晚安，早安，午安】<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，晚安，早安，午安<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;「你好，晚安，早安，午安」&quot;</span>&gt;</span>「你好，晚安，早安，午安」<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，晚安，早安，午安<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>扩展：</p>
<blockquote>
<p>[attribute^&#x3D;value]  p[title^&#x3D;”【”]  选择其<code>title</code>属性值以<code>【 </code>开头的每个<code>&lt;p&gt;</code>元素。<br>[attribute<del>&#x3D;value]  [title</del>&#x3D;flower] 选择带有包含<code>flower</code>一词(而且必须是前后都有空格才可以，当然中文亦可以)的<code>title</code>属性的所有元素。</p>
</blockquote>
<h3 id="怎么使position-fixed元素相对于屏幕视口位置改为相对于祖先元素位置"><a href="#怎么使position-fixed元素相对于屏幕视口位置改为相对于祖先元素位置" class="headerlink" title="怎么使position:fixed元素相对于屏幕视口位置改为相对于祖先元素位置"></a>怎么使position:fixed元素相对于屏幕视口位置改为相对于祖先元素位置</h3><blockquote>
<p>当元素设置<code>position:fixed</code>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。<code>fixed</code>属性会创建新的层叠上下文。当元素祖先的<code>transform</code>、<code>perspective</code>、<code>filter</code>或<code>backdrop-filter</code>属性非<code>none</code>时，容器由视口改为该祖先。</p>
</blockquote>
<p>所以只需要祖先元素设置任意其中的一个值非<code>none</code>，就会使元素重回文档流，当然同时也意味着元素失去<code>fixed</code>浮动的特性。</p>
<h3 id="不定高元素设置高度渐变动画"><a href="#不定高元素设置高度渐变动画" class="headerlink" title="不定高元素设置高度渐变动画"></a>不定高元素设置高度渐变动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 因为不定高，无法设置高度动画，所以换个方式，设置最大值，保证最大值不会小于实际高度 */</span></span><br><span class="line"><span class="comment">/* 如果还是不放心，可以包一个子元素，子元素设置相同max-height,并且设置滚动条 */</span></span><br><span class="line"><span class="selector-class">.autoDiv</span>&#123;</span><br><span class="line">  <span class="attribute">max-height</span>:<span class="number">0</span>;</span><br><span class="line">  &amp;<span class="selector-class">.act</span>&#123;</span><br><span class="line">    <span class="attribute">max-height</span>:<span class="number">1000px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.childDiv</span>&#123;</span><br><span class="line">    <span class="attribute">max-height</span>:<span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>:scroll;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="white-space参数"><a href="#white-space参数" class="headerlink" title="white-space参数"></a>white-space参数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: normal;  <span class="comment">/* 连续的空白符会被合并 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;  <span class="comment">/* 和 normal 一样合并空白符，但阻止文本换行 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: pre;     <span class="comment">/* 连续的空白符会被保留。仅在遇到换行符或 &lt;br&gt; 元素时才会换行。*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: pre-wrap;<span class="comment">/* 连续的空白符会被保留。在遇到换行符或 &lt;br&gt; 元素时，或者根据填充行框盒子的需要换行。*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: pre-line;<span class="comment">/* 连续的空白符会被合并。在遇到换行符或 &lt;br&gt; 元素时，或者根据填充行框盒子的需要换行。*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: break-spaces;<span class="comment">/* 与 pre-wrap 的行为相同，但空白占空间并且可被截断 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="inset"><a href="#inset" class="headerlink" title="inset"></a>inset</h3><p>在处理位置时，您可以使用 inset 属性，而不是使用 top、right、bottom、left 属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以这样替代上面写法*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">inset</span>: <span class="number">20px</span> <span class="number">25px</span> <span class="number">16px</span> <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择前几个元素"><a href="#选择前几个元素" class="headerlink" title="选择前几个元素"></a>选择前几个元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">:nth-child</span>(-n + <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="视觉文案居中"><a href="#视觉文案居中" class="headerlink" title="视觉文案居中"></a>视觉文案居中</h3><p>我们知道，中文标点字符基本和中文字符占同样的像素宽，就导致视觉上文案会偏左（如果标点符号在结尾时）；所以就有了下面的方案：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用了绝对定位不占父元素空间的特点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>智能加成，加亮加实力<span class="tag">&lt;<span class="name">span</span>&gt;</span>。<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="backdrop-filter"><a href="#backdrop-filter" class="headerlink" title="backdrop-filter"></a>backdrop-filter</h3><p>简直就是神仙属性,可以在父元素设置模糊作用到子元素上</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css自定义属性</title>
    <url>/blog/2019/05/07/css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h3 id="css自定义属性"><a href="#css自定义属性" class="headerlink" title="css自定义属性"></a>css自定义属性</h3><blockquote>
<p>CSS自定义属性 对于很多前端同学可能并没有接触过，甚至没有听说过，但如果说CSS的变量，估计就很多同学有听说过。但这里再次强调，我们应该纠正这样的说法：<br>CSS没有变量，没有变量，没有变量；只有自定义属性，只有自定义属性，只有自定义属性！</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是什么颜色？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>那我是什么颜色？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>我又是啥颜色？<span class="tag">&lt;<span class="name">p</span>&gt;</span>那我呢？<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:root</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--color</span>:yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.alert</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--color</span>:blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:<span class="built_in">var</span>(--color);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>:root表示是在根元素上声明的，–color: red，将会影响所有的元素</li>
<li>div是一个标签元素选择器，其声明的–color: yellow将会影响所有div元素以及他的后代元素</li>
<li>.alert是一个类选择器，其声明的–color: blue会影响类名为.alert的元素以及其后代码元素所以在第一个div的文本颜色是一个yellow(它覆盖了:root的red颜色)；第一p的文本颜色是red（运用了:root的red色），第二个div.alert以及它的子元素p的文本颜色是blue（运用了.alert中的blue）。</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>discuz</title>
    <url>/blog/2021/11/05/discuz/</url>
    <content><![CDATA[<h3 id="运行npm-install-出现thon-Python-is-not-set-from-command-line-or-npm-configuration解决方案"><a href="#运行npm-install-出现thon-Python-is-not-set-from-command-line-or-npm-configuration解决方案" class="headerlink" title="运行npm install 出现thon Python is not set from command line or npm configuration解决方案"></a>运行npm install 出现thon Python is not set from command line or npm configuration解决方案</h3><p>管理员权限打开执行：npm install –global –production windows-build-tools</p>
<h3 id="解决Error-ENOENT-no-such-file-or-directory-scandir-安装node-sass报错"><a href="#解决Error-ENOENT-no-such-file-or-directory-scandir-安装node-sass报错" class="headerlink" title="解决Error: ENOENT: no such file or directory, scandir 安装node-sass报错"></a>解决Error: ENOENT: no such file or directory, scandir 安装node-sass报错</h3><p>npm rebuild node-sass</p>
<h3 id="npm-install-项目时，报：gyp-ERR-stack-Error-gyp-failed-with-exit-code-1"><a href="#npm-install-项目时，报：gyp-ERR-stack-Error-gyp-failed-with-exit-code-1" class="headerlink" title="npm install 项目时，报：gyp ERR! stack Error: gyp failed with exit code: 1"></a>npm install 项目时，报：gyp ERR! stack Error: <code>gyp</code> failed with exit code: 1</h3><ol>
<li><blockquote>
<p>npm install -g <a href="mailto:&#x63;&#110;&#x70;&#x6d;&#x40;&#54;&#46;&#x30;&#46;&#x30;">&#x63;&#110;&#x70;&#x6d;&#x40;&#54;&#46;&#x30;&#46;&#x30;</a> –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</blockquote>
</li>
</ol>
<p>其中的@6.0.0是指定cnpm的版本号，cnpm版本号一定要和npm版本（npm -v）一致，（如npm6.x.x则cnpm版本为6.x.x，大版本一致即可）</p>
<ol start="2">
<li><blockquote>
<p>cnpm install</p>
</blockquote>
</li>
</ol>
<p>如果<code>cnpm install</code>失败，多构建几次尝试</p>
<ol start="3">
<li><blockquote>
<p>npm install<br>会发现<code>npm install</code>也可以了</p>
</blockquote>
</li>
<li><p>如果<code>npm run dev</code>报错，再执行一次<code>npm install</code>，可能cnpm有的插件没安装下来？</p>
</li>
</ol>
<h3 id="gyp-ERR-find-Python-解决方案"><a href="#gyp-ERR-find-Python-解决方案" class="headerlink" title="gyp ERR! find Python 解决方案"></a>gyp ERR! find Python 解决方案</h3><p><a href="https://segmentfault.com/a/1190000023271417">gyp ERR! find Python 解决方案</a></p>
<p>1.安装node-gyp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g node-gyp</span><br></pre></td></tr></table></figure>

<p>2.安装python</p>
<h3 id="jenkins-node-js版本不对解决"><a href="#jenkins-node-js版本不对解决" class="headerlink" title="jenkins node.js版本不对解决"></a>jenkins node.js版本不对解决</h3><p>1.管理Jenkins - 管理插件 - 下载NodeJS插件</p>
<p>2.下载的插件在：$JENKINS_HOME&#x2F;plugins目录下</p>
<p>3.管理Jenkins - Global Tool Configuration(全局工具配置) - 选择需要安装的nodejs版本（会从nodejs官网下载安装，nodejs安装包在：$JENKINS_HOME&#x2F;tools目录下）<br><img src="http://www.guoxh.com/blog/img/Jenkins/1.png"></p>
<blockquote>
<p>这里可以添加多个node版本，然后就可以实现不同项目使用不同的node版本，以实现项目代码对node版本的要求</p>
</blockquote>
<p>2.项目构建环境勾选<code>Provide Node &amp; npm bin/ folder to PATH</code>选项<br><img src="http://www.guoxh.com/blog/img/Jenkins/2.png"></p>
<blockquote>
<p>每次build，都会首先执行环境构建，环境构建无误后，才会开始真正的构建过程<br>会下载nodejs并安装配置，并把node添加到当前PATH环境变量中，这样就支持node和npm命令啦！</p>
</blockquote>
<h3 id="taro-UI按需引用样式文件报错引用taro-UI报错Error-Cannot-find-module-style-index-scss"><a href="#taro-UI按需引用样式文件报错引用taro-UI报错Error-Cannot-find-module-style-index-scss" class="headerlink" title="taro UI按需引用样式文件报错引用taro UI报错Error: Cannot find module &#39;./style/index.scss&#39;"></a>taro UI按需引用样式文件报错<code>引用taro UI报错Error: Cannot find module &#39;./style/index.scss&#39;</code></h3><p>安装tao-ui时,如果出现报错，可以尝试安装taro-ui版本，因为目前taro ui2.+和taro3.+版本不兼容,使用以下命令可解决</p>
<p>npm install <a href="mailto:&#x74;&#x61;&#x72;&#111;&#x2d;&#x75;&#105;&#x40;&#51;&#x2e;&#48;&#46;&#x30;&#x2d;&#x61;&#108;&#112;&#x68;&#97;&#46;&#51;">&#x74;&#x61;&#x72;&#111;&#x2d;&#x75;&#105;&#x40;&#51;&#x2e;&#48;&#46;&#x30;&#x2d;&#x61;&#108;&#112;&#x68;&#97;&#46;&#51;</a></p>
<h3 id="web端代码不支持修改NODE-ENV环境变量，因为next打包基于production环境变量"><a href="#web端代码不支持修改NODE-ENV环境变量，因为next打包基于production环境变量" class="headerlink" title="web端代码不支持修改NODE_ENV环境变量，因为next打包基于production环境变量"></a>web端代码不支持修改NODE_ENV环境变量，因为next打包基于production环境变量</h3><h3 id="PC发布帖子，小程序不显示"><a href="#PC发布帖子，小程序不显示" class="headerlink" title="PC发布帖子，小程序不显示"></a>PC发布帖子，小程序不显示</h3><p>需要再管理后台<code>全局</code>-<code>站点设置</code>-<code>功能设置</code>勾选<code>打赏、悬赏、红包、匿名、私信、商品、帖子付费、用户组付费、充值</code>选项</p>
<h3 id="taro子组件不能直接调用onShow生命周期，所以需要"><a href="#taro子组件不能直接调用onShow生命周期，所以需要" class="headerlink" title="taro子组件不能直接调用onShow生命周期，所以需要"></a>taro子组件不能直接调用onShow生命周期，所以需要</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Taro</span>, &#123; eventCenter, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span>;</span><br><span class="line">$instance = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> onShowEventId = <span class="variable language_">this</span>.<span class="property">$instance</span>.<span class="property">router</span>.<span class="property">onShow</span>;</span><br><span class="line">    eventCenter.<span class="title function_">on</span>(onShowEventId, <span class="variable language_">this</span>.<span class="property">onShow</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  onShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这样就可以调用onShow了</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//始终记得要在这个react组件卸载前生命周期方法里清除onShow事件，否则会一直累加</span></span><br><span class="line">    <span class="keyword">const</span> onShowEventId = <span class="variable language_">this</span>.<span class="property">$instance</span>.<span class="property">router</span>.<span class="property">onShow</span>;</span><br><span class="line">    eventCenter.<span class="title function_">off</span>(onShowEventId, <span class="variable language_">this</span>.<span class="property">onShow</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="因为微信新增小程序隐私协议的原因，升级taro"><a href="#因为微信新增小程序隐私协议的原因，升级taro" class="headerlink" title="因为微信新增小程序隐私协议的原因，升级taro"></a>因为微信新增小程序隐私协议的原因，升级taro</h3><ol>
<li>全局安装Taro cli:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @tarojs/cli </span><br></pre></td></tr></table></figure></li>
<li>查看Taro所有命令及帮助：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro --help</span><br></pre></td></tr></table></figure></li>
<li>更新taro版本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro updata self</span><br></pre></td></tr></table></figure></li>
<li>更新项目中的Taro相关依赖：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro update project</span><br></pre></td></tr></table></figure></li>
<li>环境及依赖检测<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro info</span><br></pre></td></tr></table></figure></li>
</ol>
<p>更多见官网说明：<a href="https://taro-docs.jd.com/docs/cli">https://taro-docs.jd.com/docs/cli</a></p>
<p>但是会有第三方插件不支持最新版taro的情况，所以可以另辟蹊径，采用taro官方补丁插件：</p>
<h4 id="tarojs-plugin-inject"><a href="#tarojs-plugin-inject" class="headerlink" title="@tarojs&#x2F;plugin-inject"></a>@tarojs&#x2F;plugin-inject</h4><blockquote>
<p>可以为小程序平台注入公共的组件、API 等逻辑</p>
</blockquote>
<h5 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h5><h6 id="Taro-3-3"><a href="#Taro-3-3" class="headerlink" title="Taro 3.3+"></a>Taro 3.3+</h6><p>请使用本插件的<code>1.0</code>或以上版本</p>
<h6 id="Taro-3-1-3-2"><a href="#Taro-3-1-3-2" class="headerlink" title="Taro 3.1&#x2F;3.2"></a>Taro 3.1&#x2F;3.2</h6><p>请使用本插件的<code>0.0.2</code>或以上版本</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>在 Taro 项目根目录下安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i @tarojs/plugin-inject --save</span><br></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h6><p>请确保<code>Taro CLI</code>已升级至<code>Taro 3.1.0</code>的最新版本。</p>
<p>修改项目<code>config/index.js</code>中的<code>plugins</code>配置为如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@tarojs/plugin-inject&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 配置需要新增的 API</span></span><br><span class="line">        <span class="attr">syncApis</span>: [<span class="string">&#x27;getPrivacySetting&#x27;</span>, <span class="string">&#x27;openPrivacyContract&#x27;</span>, <span class="string">&#x27;requirePrivacyAuthorize&#x27;</span>, <span class="string">&#x27;onNeedPrivacyAuthorization&#x27;</span>], <span class="comment">//同步API</span></span><br><span class="line">        <span class="attr">asyncApis</span>:[<span class="string">&#x27;&#x27;</span>],<span class="comment">//异步</span></span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">          <span class="comment">// 配置组件新增 属性和事件</span></span><br><span class="line">          <span class="title class_">Button</span>: &#123;</span><br><span class="line">            <span class="string">&quot;open-type&quot;</span>: <span class="string">&quot;agreePrivacyAuthorization&quot;</span>, <span class="comment">//属性写法</span></span><br><span class="line">            <span class="attr">bindAgreePrivacyAuthorization</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//事件写法（一定要写成小程序官方事件名，不能写成taro事件名）</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方文档：<a href="https://github.com/NervJS/taro-plugin-inject">https://github.com/NervJS/taro-plugin-inject</a></p>
</blockquote>
<h3 id="taro使用原生组件"><a href="#taro使用原生组件" class="headerlink" title="taro使用原生组件"></a>taro使用原生组件</h3><ol>
<li>在<code>app</code>或页面配置文件<code>page.config.js</code>中配置<code>usingComponents</code>属性：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">usingComponents</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义需要引入的第三方组件</span></span><br><span class="line">    <span class="comment">// 1. key 值指定第三方组件名字，以小写开头</span></span><br><span class="line">    <span class="comment">// 2. value 值指定第三方组件 js 文件的相对路径</span></span><br><span class="line">    <span class="string">&#x27;ec-canvas&#x27;</span>: <span class="string">&#x27;../../components/ec-canvas/ec-canvas&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用组件：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">ec</span>: &#123;</span><br><span class="line">      <span class="attr">onInit</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ec-canvas</span> <span class="attr">id</span>=<span class="string">&#x27;mychart-dom-area&#x27;</span> <span class="attr">canvas-id</span>=<span class="string">&#x27;mychart-area&#x27;</span> <span class="attr">ec</span>=<span class="string">&#123;this.state.ec&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="There-are-multiple-modules-with-names-that-only-differ-in-casing报错"><a href="#There-are-multiple-modules-with-names-that-only-differ-in-casing报错" class="headerlink" title="There are multiple modules with names that only differ in casing报错"></a>There are multiple modules with names that only differ in casing报错</h3><p>一般是组件文件夹名用了驼峰命名，改成<code>小写</code>加<code>-</code>即可</p>
<p><a href="https://github.com/hsuna/taro-privacy-popup/blob/master/src/components/PrivacyPopup/index.jsx">https://github.com/hsuna/taro-privacy-popup/blob/master/src/components/PrivacyPopup/index.jsx</a></p>
]]></content>
      <categories>
        <category>discuz</category>
      </categories>
      <tags>
        <tag>discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>element记录</title>
    <url>/blog/2022/11/25/elementUI/</url>
    <content><![CDATA[<h3 id="input中加slot标签，表单验证无法回显"><a href="#input中加slot标签，表单验证无法回显" class="headerlink" title="input中加slot标签，表单验证无法回显"></a>input中加slot标签，表单验证无法回显</h3><p>默认宽度可能会覆盖回显值，设置足够宽度</p>
<h3 id="Form表单验证通过，却没反应"><a href="#Form表单验证通过，却没反应" class="headerlink" title="Form表单验证通过，却没反应"></a>Form表单验证通过，却没反应</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果表单验证rules对象中有自定义验证，必须在验证函数最后返回回调函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">validatePass1</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^0*(\.0&#123;1,2&#125;)?$)^\d&#123;1,13&#125;(\.\d&#123;1,2&#125;)?$/</span>;</span><br><span class="line"><span class="keyword">if</span> (value &amp;&amp; !reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;仅支持输入大于0的数字&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//这里必须返回</span></span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="attr">market_price</span>: [&#123; <span class="attr">validator</span>: validatePass1, <span class="attr">trigger</span>: <span class="string">&quot;change&quot;</span> &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Form表单如果是动态遍历添加表单项，且遍历项是字符串不是对象"><a href="#Form表单如果是动态遍历添加表单项，且遍历项是字符串不是对象" class="headerlink" title="Form表单如果是动态遍历添加表单项，且遍历项是字符串不是对象"></a>Form表单如果是动态遍历添加表单项，且遍历项是字符串不是对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in form.commodity_label&quot;</span> <span class="attr">:prop</span>=<span class="string">&quot;&#x27;commodity_label.&#x27; + index&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.commodity_label[index]&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;removeMark(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="el-upload组件list-type-picture-card-属性如果是上传视频无法正常显示，不如antd，狗头"><a href="#el-upload组件list-type-picture-card-属性如果是上传视频无法正常显示，不如antd，狗头" class="headerlink" title="el-upload组件list-type=&quot;picture-card&quot;属性如果是上传视频无法正常显示，不如antd，狗头"></a><code>el-upload</code>组件<code>list-type=&quot;picture-card&quot;</code>属性如果是上传视频无法正常显示，不如antd，狗头</h3><p>所以要改为<code>list-type=&quot;text&quot;</code>，这样只能显示文件名，不会显示成卡片样式，而且样式需要自己改动<br>或者自己写一个视频展示样式</p>
<h3 id="列表筛选条件添加到链接，以实现跳转详情返回保存筛选条件"><a href="#列表筛选条件添加到链接，以实现跳转详情返回保存筛选条件" class="headerlink" title="列表筛选条件添加到链接，以实现跳转详情返回保存筛选条件"></a>列表筛选条件添加到链接，以实现跳转详情返回保存筛选条件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选中筛选条件，点击搜索时</span></span><br><span class="line"><span class="title function_">handleSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; path &#125; = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">currentRoute</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">form</span> = &#123;&#125;；<span class="comment">//筛选参数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; path, <span class="attr">query</span>: <span class="variable language_">this</span>.<span class="property">form</span> &#125;, <span class="function">() =&gt;</span> &#123; &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//返回列表页</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; query &#125; = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">currentRoute</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">form</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(query));<span class="comment">//回显筛选项值，用深拷贝是为了form和query彻底隔离开，否则会影响form赋值</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="需要传入数组的组件，需要提前声明变量为数组，否则调接口返回填充还是不显示，并且不报错"><a href="#需要传入数组的组件，需要提前声明变量为数组，否则调接口返回填充还是不显示，并且不报错" class="headerlink" title="需要传入数组的组件，需要提前声明变量为数组，否则调接口返回填充还是不显示，并且不报错"></a>需要传入数组的组件，需要提前声明变量为数组，否则调接口返回填充还是不显示，并且不报错</h3><h3 id="element-plus的el-scroller监听滑动到底部"><a href="#element-plus的el-scroller监听滑动到底部" class="headerlink" title="element-plus的el-scroller监听滑动到底部"></a>element-plus的el-scroller监听滑动到底部</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> scrollEl = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">scroll</span> = (<span class="params">e</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//scrollEl.value.wrapRef.scrollHeight：当前内容高度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//scrollEl.value.wrapRef.clientHeight：当前内容可视高度（外部scroll标签设置的高度）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//e.scrollTop 滚动条距顶部距离</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">    scrollEl.<span class="property">value</span>.<span class="property">wrapRef</span>.<span class="property">scrollHeight</span> - scrollEl.<span class="property">value</span>.<span class="property">wrapRef</span>.<span class="property">clientHeight</span> ==</span></span><br><span class="line"><span class="language-javascript">    e.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">  ) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触底&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">ref</span>=<span class="string">&quot;scrollEl&quot;</span> @<span class="attr">scroll</span>=<span class="string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="element同时上传两个文件时，on-success只执行一次"><a href="#element同时上传两个文件时，on-success只执行一次" class="headerlink" title="element同时上传两个文件时，on-success只执行一次"></a>element同时上传两个文件时，on-success只执行一次</h3><p>前提：如果on-success里面如果给file-list进行了赋值，此时这个回调方法只执行一次<br>解决：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传成功回调</span></span><br><span class="line"><span class="title function_">onSuccess</span>(<span class="params">response, file, fileList</span>)&#123;</span><br><span class="line">  <span class="comment">//等待所有文件都上传完成，这里注意fileList是所有的文件（包含已上传的）</span></span><br><span class="line">  <span class="keyword">if</span>(fileList.<span class="title function_">every</span>(<span class="function"><span class="params">it</span> =&gt;</span> it.<span class="property">status</span> == <span class="string">&#x27;success&#x27;</span>)) &#123; </span><br><span class="line">    fileList.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//只push新上传的 （带有response）</span></span><br><span class="line">    item.<span class="property">response</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:item.<span class="property">response</span>.<span class="property">data</span>.<span class="property">originalName</span>,<span class="attr">url</span>:item.<span class="property">response</span>.<span class="property">data</span>.<span class="property">link</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//提交父组件改变的文件列表</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, <span class="variable language_">this</span>.<span class="property">fileList</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>fiddler抓包</title>
    <url>/blog/2019/04/25/fiddler%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p><a href="https://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/ConfigureForiOS">fiddler官方文档</a></p>
<h3 id="1-IOS使用Fiddler抓包配置"><a href="#1-IOS使用Fiddler抓包配置" class="headerlink" title="1.IOS使用Fiddler抓包配置"></a>1.IOS使用Fiddler抓包配置</h3><p>1.点击 <code>Tools &gt; Options</code> 确保选中<code>允许远程客户端连接</code>,端口默认8888：<br><img src="http://www.guoxh.com/blog/img/fiddler/fiddler-1.png"></p>
<p>2.将鼠标悬停在Fiddler工具栏最右侧的在线指示器<code>Online</code>上，以显示分配给Fiddler机器的IP地址:<br><img src="http://www.guoxh.com/blog/img/fiddler/fiddler-2.png"></p>
<p>3.浏览器(必须safari)中输入<code>ip:8888</code>,点击下方安装证书按钮，下载证书：<br><img src="http://www.guoxh.com/blog/img/fiddler/fiddler-3.png"></p>
<p>4.在设置中会显示一行下载的证书按钮</p>
<p>5.在iOS 10及更高版本上，安装FiddlerRoot证书后，转到<code>设置 - &gt; 常规 - &gt; 关于 - &gt; 证书信任设置</code>，并手动启用FiddlerRoot根证书的完全信任。接受对话框，说明这将允许第三方窃听您的所有通信。</p>
<h3 id="2-卸载FiddlerRoot证书"><a href="#2-卸载FiddlerRoot证书" class="headerlink" title="2.卸载FiddlerRoot证书"></a>2.卸载FiddlerRoot证书</h3><p>如果您决定卸载根证书：</p>
<p>点按“ 设置”应用。</p>
<p>点击常规。</p>
<p>滚动到个人资料。</p>
<p>点击DO_NOT_TRUST_FiddlerRoot *个人资料。</p>
<p>点击删除。</p>
]]></content>
      <categories>
        <category>fiddler</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题配置优化</title>
    <url>/blog/2016/11/22/hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="技术迭代版本飞快，只有时刻保持学习和探索，才能跟上不掉队，框架更是如此，需要不断更新，不断修改文章记录，如果一成不变，那写文章将毫无意义"><a href="#技术迭代版本飞快，只有时刻保持学习和探索，才能跟上不掉队，框架更是如此，需要不断更新，不断修改文章记录，如果一成不变，那写文章将毫无意义" class="headerlink" title="技术迭代版本飞快，只有时刻保持学习和探索，才能跟上不掉队，框架更是如此，需要不断更新，不断修改文章记录，如果一成不变，那写文章将毫无意义"></a>技术迭代版本飞快，只有时刻保持学习和探索，才能跟上不掉队，框架更是如此，需要不断更新，不断修改文章记录，如果一成不变，那写文章将毫无意义</h3><h3 id="NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看"><a href="#NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看" class="headerlink" title="NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看"></a>NEXT主题官方文档，操作扩展都非常详细，有兴趣可以看一看</h3><p><a href="http://theme-next.iissnan.com/theme-settings.html">NEXT主题配置</a><br><a href="https://theme-next.js.org/docs/getting-started/">NEXT官方文档</a></p>
<h2 id="配置"><a name="t4"></a>配置</h2>

<h3 id="我目前更新使用-hexo-6-3-0版本，next-7-8-0版本"><a href="#我目前更新使用-hexo-6-3-0版本，next-7-8-0版本" class="headerlink" title="我目前更新使用 hexo 6.3.0版本，next 7.8.0版本"></a>我目前更新使用 hexo 6.3.0版本，next 7.8.0版本</h3><p>我更新了hexo，已经支持在根目录<code>source</code>文件夹下同步next配置，再也不用担心更改<code>themes/next/_config.yml</code>配置文件，换个电脑配置找不到了！<br>在根目录source文件夹下新建<code>_data</code>文件夹，并新建<code>next.yml</code>文件，然后把主题配置文件复制到这个文件中，修改这个文件中的配置项，主题配置就会生效，这个操作其实在<code>themes/next/_config.yml</code>文件中开头都有提到。</p>
<h3 id="首先我们看看-主题配置文件-的配置-hexo-source-data-next-yml"><a href="#首先我们看看-主题配置文件-的配置-hexo-source-data-next-yml" class="headerlink" title="首先我们看看 主题配置文件 的配置 \hexo\source\_data_\next.yml"></a>首先我们看看 <code>主题配置文件</code> 的配置 <code>\hexo\source\_data_\next.yml</code></h3><p>use_motion || motion: true  # 开启动画效果<br>use_motion: false # 关闭动画效果</p>
<ol>
<li><p>把页面中的动画效果取消，把enable改为对应的false改为true，然后hexo d -g，再进主页，问题就解决了，下面的length参数对应的是文章预览的文本长度，可以自己设置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个配置在next新版本配置中已经被取消，需要自己安装一个插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>
<p>在站点配置文件(不是主题的配置文件)_config.yml添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt:			# 一定要顶格写，注意格式</span><br><span class="line">  depth: 5			# 他的大小就是全文阅读预览长度设置</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true  #是否隐藏整个帖子摘录</span><br></pre></td></tr></table></figure>
<p>在主题配置文件中_config.yml里 <code>excerpt_description</code> 改为 <code>true</code></p>
</blockquote>
</li>
<li><p>设置菜单项的显示文本和图标<br>NexT 使用的是 <a href="http://fontawesome.dashgame.com/">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。</p>
</li>
<li><p>浏览页面的时候显示当前浏览进度<br>搜索关键字 scrollpercent ,把 false 改为 true。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加顶部加载条<br>打开 <code>\source\_data_\next.yml</code> ，搜索关键字 <code>pace</code> ,设置为 <code>true</code> ,可以更换加载样式：</p>
</li>
<li><p>修改文章底部的那个带#号的标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改模板`/themes/hexo-theme-next/layout/_macro/post.swig`，</span><br><span class="line">搜索 `rel=&quot;tag&quot;&gt;#`，将 `#` 换成`&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;`</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加本地搜索功能<br>1&gt; 在你站点的根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>2&gt; 主题配置文件 <code>next.yml</code> 添加 <code>search</code> 选项，修改 <code>local_search</code> 选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span>  <span class="comment">#不添加也可以，功能照用</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span> <span class="comment">#如果是auto，通过改变输入触发搜索。如果是手动，按回车键或搜索按钮触发搜索</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span> <span class="comment">#显示每篇文章的前n个结果，设置为-1显示所有结果</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span> <span class="comment">#将html字符串转义为可读的。</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span> <span class="comment">#在页面加载时预加载搜索数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自动摘录，主题配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span> <span class="comment">##自动摘录主页中的描述作为序言文本</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span> <span class="comment">#阅读更多按钮显示</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文章阴影设置</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章阴影</span></span><br><span class="line"><span class="selector-class">.post-block</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文章顶部显示文章字数统计,阅读时长,总字数<br>安装 hexo-symbols-count-time 插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<p>编辑站点配置文件 hexo&#x2F;_config.yml，添加如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 文章阅读时间统计</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>  <span class="comment"># 站点总阅读时间统计</span></span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 next.yml 中 symbols_count_time 选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span> <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span> <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span> <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span> <span class="comment"># 平均字长</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment"># 每分钟阅读字数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建404公益界面，在<code>source</code>文件夹下新建<code>404/index.html</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com/404/search_children.js&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>11.我们再看看 <code>站点配置文件</code> 的配置 <code>F:\hexo\_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">blog</span> <span class="string">station</span>  <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。</span>	<span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">郭雪辉博客</span>  <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">郭雪辉博客</span> <span class="comment">#网站的关键词。支持多个关键词。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">郭雪辉</span> <span class="comment">#您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment">#网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span> <span class="comment">#网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</span></span><br><span class="line"><span class="comment">#其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://gxhpersonal.github.io/blog</span> <span class="comment">#网址, 必须以 http:// 或 https:// 开头</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span> <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>  <span class="comment">#文章的 永久链接 格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>  <span class="comment">#永久链接中各部分的默认值</span></span><br><span class="line"><span class="attr">pretty_urls:</span>  <span class="comment">#改写 permalink 的值来美化 URL</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># 是否在永久链接中保留尾部的 index.html，设置为 false 时去除</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>  <span class="comment">#资源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span> <span class="comment">#Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="comment">#跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment">#新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#预设布局</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment">#在中文和英文之间加入空格</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment">#把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="comment">#在新标签中打开链接</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment">#对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#需要排除的域名。主域名和子域名如 www 需分别配置</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment">#显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span> <span class="comment">#代码块的设置, 请参考 Highlight.js 进行设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span> <span class="comment">#代码块的设置, 请参考 PrismJS 进行设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">category_map:</span> <span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span> <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="comment">## Hexo 使用 Moment.js 来解析和显示时间</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span> <span class="comment">#日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span> <span class="comment">#时间格式</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span> <span class="comment">#当 Front Matter 中没有指定 updated 时 updated 的取值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">blog</span> <span class="comment">#分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">http://www.guoxh.com/blog/img/avatar.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/gxhpersonal/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度分享服务</span></span><br><span class="line"><span class="attr">baidushare:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多说热评文章 true 或者 false</span></span><br><span class="line"><span class="comment"># duoshuo_hotartical: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># search:</span></span><br><span class="line"><span class="comment">#   path: search.xml</span></span><br><span class="line"><span class="comment">#   field: post</span></span><br><span class="line"><span class="comment">#   format: html</span></span><br><span class="line"><span class="comment">#   limit: 10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>12.如果遇到本地生成样式没问题，上线样式错乱，先执行：<code>hexo clean</code>，再执行<code>hexo d -g</code></p>
<p>13.文章指定摘录段落&amp;&amp;修改阅读全文样式</p>
<p>next 在需要显示摘要的地方加上 <code>&lt;!--more--&gt;</code> ，就不会显示全文，在<code>\hexo\source\_data_\style\styles.styl</code>中写入下面内容，修改默认的 Read More 按钮样式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [Read More]按钮样式</span></span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: unset;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ff5200</span> <span class="number">0%</span>, <span class="number">#ffd600</span> <span class="number">50%</span>, <span class="number">#ff5200</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面修改样式的配置都可以自己自定义，只需要在F12中找到对应类名，在<code>\hexo\source\_data_\style\styles.styl</code>文件中添加对应类名想要的样式就好了</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>hexo强力搭建github博客</title>
    <url>/blog/2016/09/14/hexo%E5%BC%BA%E5%8A%9B%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>不知道亚林兄借鉴谁的，但是我是借鉴亚林兄的，版权所有，归他</p>
<span id="more"></span>

<p>如果是小小白，可以先花时间去了解下：</p>
<ul>
<li><a href="http://git-scm.com/book/zh/v2">Git</a></li>
<li><a href="https://github.com/">GitHub</a></li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
<li><a href="https://hexo.io/zh-cn/">Hexo</a></li>
<li><a href="http://www.appinn.com/markdown/#autoescape">Markdown</a></li>
</ul>
<h1 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h1><h2 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为blog。</p>
<h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h3><p>在windows下安装git比较常用的有两种方式：</p>
<ol>
<li><a href="http://git-scm.com/download/win">Git 官方版本的安装</a></li>
<li><a href="https://desktop.github.com/">GitHub for Windows</a></li>
</ol>
<h3 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h3><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;username@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">安装 Git</a></li>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE">配置 Git</a></li>
</ul>
<h2 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h2><h3 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h3><p>这里，我们要区分清楚git与github。</p>
<p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p>
<h3 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p>
<h4 id="2-3-2-1-检查电脑是否已经有SSH-keys。"><a href="#2-3-2-1-检查电脑是否已经有SSH-keys。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH keys。"></a>2.3.2.1 检查电脑是否已经有SSH keys。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al ~/.ssh</span><br><span class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p>
<h4 id="2-3-2-2-如果没有SSH-key，则生成新的SSH-key。"><a href="#2-3-2-2-如果没有SSH-key，则生成新的SSH-key。" class="headerlink" title="2.3.2.2 如果没有SSH key，则生成新的SSH key。"></a>2.3.2.2 如果没有SSH key，则生成新的SSH key。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></span><br></pre></td></tr></table></figure>
<p>之后一路回车即可。</p>
<h4 id="2-3-2-3-向ssh-agent添加key。"><a href="#2-3-2-3-向ssh-agent添加key。" class="headerlink" title="2.3.2.3 向ssh-agent添加key。"></a>2.3.2.3 向ssh-agent添加key。</h4><p>首先确保ssh-agent可运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line">$ ssh-agent -s</span><br></pre></td></tr></table></figure>
<p>然后添加SSH key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-4-在GitHub添加SSH-key。"><a href="#2-3-2-4-在GitHub添加SSH-key。" class="headerlink" title="2.3.2.4 在GitHub添加SSH key。"></a>2.3.2.4 在GitHub添加SSH key。</h4><p>首先，拷贝key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your cllipboard</span></span><br></pre></td></tr></table></figure>
<p>然后，在GitHub右上方点击头像，选择”Settings”，在左边的”SSH and GPG keys”侧边栏选择”New SSH key”。接着粘贴key，点击”Add key”按钮。最后，测试链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"><span class="comment"># Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure>
<p>如果你看到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;github.com (207.97.227.239)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
<p>就键入：yes。之后将会看到如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi username! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">provide shell access.</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/generating-ssh-keys/">Generating SSH keys</a></li>
</ul>
<h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a></li>
<li><a href="http://git-scm.com/">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你喜欢的文件夹内（例如f：\Blog），点击鼠标右键选择Git bash，输入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p>
<h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a></li>
</ul>
<h2 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h2><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p>
<h3 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h3><p>我们继续使用上面的文件夹f:\Blog（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p>
<p>默认生成的_config.yml：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br></pre></td></tr></table></figure>

<p>修改后的_config.yml：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 对应仓库的https地址（可以在GitHub对应的仓库中复制）</span><br><span class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：冒号后面要加上一个空格，否则会报错。</li>
</ul>
<p>如果你的仓库不是使用的github的主仓库，则需要改_config.yml的root：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /blog/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后，执行下列指令即可完成部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>如果 hexo deploy 报错，请在Git Bash里边打开重新走上面两步</p>
<p>之后，可以通过在浏览器键入：username.github.io&#x2F;blog进行浏览，开心吧~</p>
<h3 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h3><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p>
<p>详细步骤可以参考网上的指南。</p>
<h3 id="3-3-发表博文"><a href="#3-3-发表博文" class="headerlink" title="3.3 发表博文"></a>3.3 发表博文</h3><p>辛苦了这么久，终于回到我们搭建博客最初的目标–写作，现在来看看怎么写博文并发表吧。</p>
<h4 id="3-3-1-新建博文"><a href="#3-3-1-新建博文" class="headerlink" title="3.3.1 新建博文"></a>3.3.1 新建博文</h4><p>我们可以使用命令新建一篇博文,使用 Git Shell 进入 Hexo 文件夹，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章题目&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>命令执行完后，就会发现在 Hexo\source_posts 目录中多了一个文件博文名.md，这就是我们刚才新建的博文。</p>
</li>
<li><p>此外，我们也可以直接进入 Hexo\source_posts 目录中，右键新建一个文本文档，将名字改为博文名.md,这样也新建了一篇博文。</p>
</li>
</ul>
<h4 id="3-3-2-新建页面"><a href="#3-3-2-新建页面" class="headerlink" title="3.3.2 新建页面"></a>3.3.2 新建页面</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;页面名称&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>命令执行完后，就会发现在在 Hexo\source 目录中多了一个文件夹，里面还有一个index.md,这就代表我们新建了一个页面。</li>
</ul>
<h3 id="3-4-写博文"><a href="#3-4-写博文" class="headerlink" title="3.4 写博文"></a>3.4 写博文</h3><p>用文本编辑器打开上面新建的博文，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: GitHub Pages + Hexo搭建博客</span><br><span class="line"><span class="built_in">date</span>: 2016-08-07 17:04:35</span><br><span class="line">tags:</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li><p>新建的页面略有不同，没有tags和categories标签。</p>
</li>
<li><p>三个”-“后面就是博文的正文内容，接下来就是正儿八经地撰写博文了。</p>
</li>
<li><p>因为我们的博文都是用Markdown语言写的，所以首先，你需要一个好用的Markdown编辑器。其实好用的Markdown编辑器一大堆，这里就给大家推荐两个，如果你用的不习惯也可以换其它的。</p>
</li>
<li><p>本地编辑器：<a href="http://sunwhut.com/2015/10/30/buildBlog/">Haroopad</a>,非常小众的一款Markdown编辑器，左边编辑右边实时预览效果，非常轻便；</p>
</li>
<li><p>在线编辑器：<a href="http://mahua.jser.me/">MaHua</a>,也是比较小众的一款Markdown编辑器，但效果确实很棒。</p>
</li>
<li><p>现在你可以打开新建的博文了，然而还不造怎么下手对吧。其实很简单，除了特殊格式，其它的你就当做在word里面写文章就行了，具体请看这里的Markdown教程：<a href="http://www.jianshu.com/p/1e402922ee32/#">Markdown——入门指南</a>.</p>
</li>
</ul>
<h3 id="3-5-发博文"><a href="#3-5-发博文" class="headerlink" title="3.5 发博文"></a>3.5 发博文</h3><p>博文写好了，依然在 Git Shell 中进入 Hexo 文件夹，执行下面几条命令，将博客部署到 GitHub 上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate (若要本地预览就先执行 hexo server)</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">快捷命令：</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo n == hexo new</span><br></pre></td></tr></table></figure>
<p>还能组合使用，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<p>刷新你的个人博客，就可以看到新鲜出炉的博文了。</p>
<h2 id="四、安装主题"><a href="#四、安装主题" class="headerlink" title="四、安装主题"></a>四、安装主题</h2><h3 id="4-1-选择主题"><a href="#4-1-选择主题" class="headerlink" title="4.1 选择主题"></a>4.1 选择主题</h3><p>我们刚才使用Hexo生成的博客使用的是Hexo的默认主题：Landscape。</p>
<p>不过hexo 给我们提供了大量的主题，<a href="https://github.com/hexojs/hexo/wiki/Themes">Themes·Hexo</a> 我选择的是这个主题：NexT。</p>
<h3 id="4-2-安装NexT主题"><a href="#4-2-安装NexT主题" class="headerlink" title="4.2 安装NexT主题"></a>4.2 安装NexT主题</h3><p>Hexo 有两份主要的配置文件<code>_config.yml</code>，一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>，后者称为 <code>主题配置文件</code>。</p>
<h4 id="4-2-1-下载-NexT-主题"><a href="#4-2-1-下载-NexT-主题" class="headerlink" title="4.2.1 下载 NexT 主题"></a>4.2.1 下载 NexT 主题</h4><p>使用 Git Shell 进入 Hexo 文件夹，输入以下两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Hexo</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-启用NexT主题"><a href="#4-2-2-启用NexT主题" class="headerlink" title="4.2.2 启用NexT主题"></a>4.2.2 启用NexT主题</h4><p>下载完成后，打开 <code>站点配置文件</code>，找到 theme 字段，并将其值更改为 next。</p>
<h4 id="4-2-3-验证主题是否启用"><a href="#4-2-3-验证主题是否启用" class="headerlink" title="4.2.3 验证主题是否启用"></a>4.2.3 验证主题是否启用</h4><p>执行上面发博文的命令($ hexo d -g)，刷新你的个人博客，就能看到你设置的主题是否启用。</p>
<h3 id="4-3-设置NexT主题和第三方服务"><a href="#4-3-设置NexT主题和第三方服务" class="headerlink" title="4.3 设置NexT主题和第三方服务"></a>4.3 设置NexT主题和第三方服务</h3><p>安装完NexT之后，还是发现不够漂亮对不对，所以下面我们来慢慢地润色你的个人博客。</p>
<h4 id="4-3-1-选择样式"><a href="#4-3-1-选择样式" class="headerlink" title="4.3.1 选择样式"></a>4.3.1 选择样式</h4><p>NexT默认的样式其实也比较丑，幸好作者提供了一款十分漂亮的样式:Mist。启用 Mist 很简单，仅需在 <code>主题配置文件</code>中将 #scheme: Mist 前面的 # 注释去掉即可。</p>
<h4 id="4-3-2-菜单设置"><a href="#4-3-2-菜单设置" class="headerlink" title="4.3.2 菜单设置"></a>4.3.2 菜单设置</h4><p>菜单配置在 主题配置文件 的 menu，下面是菜单配置示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  <span class="comment">#home: /</span></span><br><span class="line">  archives: /archives</span><br><span class="line">  about: /about</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  <span class="comment">#commonweal: /404.html</span></span><br></pre></td></tr></table></figure>
<ul>
<li>除了home和archives菜单主题自带，其他菜单需要自己建文件夹，非常简单的还是；<br>其它的很多在<a href="http://theme-next.iissnan.com/">NexT官方文档</a>里面已经讲的很清楚了,可以自己去研究研究。</li>
</ul>
<h2 id="五、-优化部署与管理"><a href="#五、-优化部署与管理" class="headerlink" title="五、 优化部署与管理"></a>五、 优化部署与管理</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p>
<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>
<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。</p>
<p>所以，我利用了分支！！！</p>
<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>
<p>下面以我的博客作为例子详细地讲述。</p>
<h3 id="5-2-我的博客搭建流程"><a href="#5-2-我的博客搭建流程" class="headerlink" title="5.2 我的博客搭建流程"></a>5.2 我的博客搭建流程</h3><ol>
<li>github创建仓库，blog</li>
<li>在本地新建的&#x2F;blog文件夹中运行Git Bash,输入git init(在当前目录新建一个Git代码库);</li>
<li>接着命令行输入git remote add origin <a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D.git">https://github.com/用户名/仓库名.git</a></li>
<li>依次执行git add .、git commit -m “…”、git push origin master提交网站相关的文件；<br>PS: 我是在gh-pages分支上改的，所以提交代码时会提示github上没有master分支，然后点击确定会帮你创建一个master分支，就可以提交成功了；</li>
</ol>
<p>这样一来，在GitHub上的gxhpersonal.github.io仓库就有两个分支，一个master分支用来存放网站的原始文件，一个gh-pages分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p>
<h3 id="5-3-我的博客管理流程"><a href="#5-3-我的博客管理流程" class="headerlink" title="5.3 我的博客管理流程"></a>5.3 我的博客管理流程</h3><h4 id="5-3-1-日常修改"><a href="#5-3-1-日常修改" class="headerlink" title="5.3.1 日常修改"></a>5.3.1 日常修改</h4><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>
<blockquote>
<p>个人习惯：</p>
</blockquote>
<ol>
<li>先依次执行git add .、git commit -m “…”、git push origin master指令将改动推送到GitHub（此时当前分支应为master）；</li>
<li>然后才执行hexo generate -d发布网站到gh-pages分支上。</li>
<li>PS:其实gh-pages分支不用管的，当你运行hexo d -g 的时候就会把生成的博客代码自动提交到gh-pages分支;</li>
</ol>
<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
<p>tips:在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法：<br>在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式 (除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。)</p>
<h4 id="5-3-2-本地资料丢失"><a href="#5-3-2-本地资料丢失" class="headerlink" title="5.3.2 本地资料丢失"></a>5.3.2 本地资料丢失</h4><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ol>
<li>使用git clone <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#111;&#x6d;</a>:gxhpersonal&#x2F;blog.git拷贝仓库（默认分支为master）；</li>
<li>在本地新拷贝的blog文件夹下通过Git bash依次执行下列指令：npm install hexo、npm i hexo-cli -g、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo集成live2D动画</title>
    <url>/blog/2019/03/15/hexo%E9%9B%86%E6%88%90live2D%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h3 id="1-hexo博客文件目录下安装live2D插件，执行下面命令："><a href="#1-hexo博客文件目录下安装live2D插件，执行下面命令：" class="headerlink" title="1.hexo博客文件目录下安装live2D插件，执行下面命令："></a>1.hexo博客文件目录下安装live2D插件，执行下面命令：</h3><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<h3 id="2-下载live2D动画模型，下面展示了动画列表"><a href="#2-下载live2D动画模型，下面展示了动画列表" class="headerlink" title="2.下载live2D动画模型，下面展示了动画列表"></a>2.下载live2D动画模型，下面展示了动画列表</h3><blockquote>
<p>  live2d-widget-model-chitose<br>    live2d-widget-model-z16<br>    live2d-widget-model-epsilon2_1<br>    live2d-widget-model-gf<br>    live2d-widget-model-haru&#x2F;01<br>    live2d-widget-model-haru&#x2F;02<br>    live2d-widget-model-haruto<br>    live2d-widget-model-hibiki<br>    live2d-widget-model-hijiki<br>    live2d-widget-model-izumi<br>    live2d-widget-model-koharu<br>    live2d-widget-model-miku<br>    live2d-widget-model-ni-j<br>    live2d-widget-model-nico<br>    live2d-widget-model-nietzsche<br>    live2d-widget-model-nipsilon<br>    live2d-widget-model-nito<br>    live2d-widget-model-shizuku<br>    live2d-widget-model-tororo<br>    live2d-widget-model-tsumiki<br>    live2d-widget-model-unitychan<br>    live2d-widget-model-wanko</p>
</blockquote>
<p>执行下面命令，安装具体的动画模型包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install [live2d-widget-model-wanko]</span><br></pre></td></tr></table></figure>
<p><a href="https://huaji8.top/post/live2d-plugin-2.0/">具体动画模型展示</a></p>
<h3 id="3-最后，修改站点配置文件-config-yml-添加下面配置："><a href="#3-最后，修改站点配置文件-config-yml-添加下面配置：" class="headerlink" title="3.最后，修改站点配置文件_config.yml,添加下面配置："></a>3.最后，修改站点配置文件<code>_config.yml</code>,添加下面配置：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true #隐藏/显示</span><br><span class="line">  pluginRootPath: live2dw/    #插件在站点上的根路径(相对)</span><br><span class="line">  pluginJsPath: lib/          #与插件根目录相关的JavaScript路径(相对)</span><br><span class="line">  pluginModelPath: assets/    #与插件根(相对)相关的模型路径</span><br><span class="line">  scriptFrom: local # Default</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span><br><span class="line">  tagMode: false  #是否只替换live2d标签而不是注入到所有页面</span><br><span class="line">  log: false #是否在控制台显示日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko #安装的模型包名称</span><br><span class="line">  display:  #设置位置和宽高（设置的宽高*2为实际像素，如：50=100px）</span><br><span class="line">    position: left </span><br><span class="line">    width: 50</span><br><span class="line">    height: 100</span><br><span class="line">  mobile:</span><br><span class="line">    show: false #是否在移动端上显示</span><br></pre></td></tr></table></figure>
<h4 id="hexo-d-g执行即可"><a href="#hexo-d-g执行即可" class="headerlink" title="hexo d -g执行即可"></a>hexo d -g执行即可</h4><p><a href="https://github.com/EYHN/hexo-helper-live2d">插件GitHub地址</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>html常见问题</title>
    <url>/blog/2016/11/25/html%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="标签变为可编辑"><a href="#标签变为可编辑" class="headerlink" title="标签变为可编辑"></a>标签变为可编辑</h3><blockquote>
<p>contenteditable&#x3D;true</p>
</blockquote>
<h3 id="textarea标签问题"><a href="#textarea标签问题" class="headerlink" title="textarea标签问题"></a>textarea标签问题</h3><p>加边框在移动端会出现双边框</p>
<h3 id="img标签中的图片无法显示"><a href="#img标签中的图片无法显示" class="headerlink" title="img标签中的图片无法显示"></a>img标签中的图片无法显示</h3><p>1、让这个图片元素隐藏：<br>onerror&#x3D;”this.style.display&#x3D;’none’”&#x2F;&gt;<br>2、用默认的图片替换：</p>
<ul>
<li>控制onerror事件只触发一次，需要增加这句话：this.onerror&#x3D;null;<br>onerror&#x3D;”this.src&#x3D;’默认图片的url地址;this.onerror&#x3D;null’”&#x2F;&gt;</li>
</ul>
<h3 id="input标签在chrome浏览器下背景颜色变黄色的问题"><a href="#input标签在chrome浏览器下背景颜色变黄色的问题" class="headerlink" title="input标签在chrome浏览器下背景颜色变黄色的问题"></a>input标签在chrome浏览器下背景颜色变黄色的问题</h3><p>如图<br><img src="http://ota5i8p1g.bkt.clouddn.com/input.png"></p>
<p>解决方法：</p>
<blockquote>
<p>方法一：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;  autocomplete=&quot;off&quot;&gt;，没错，就是给input标签设置禁用自动完成属性；出现黄色背景就是因为启用了自动完成属性；</span><br></pre></td></tr></table></figure>
<blockquote>
<p>方法二：<br> -webkit-box-shadow: 0 0 0px 1000px white inset；  没错，就是给input设置内置阴影！而且一定要大，至少要比你的input本身大！不过，box-shadow是很慢的！而且，如果你的input是用图片做背景or，是没有办法做这么干的！</p>
</blockquote>
<h3 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;Data&quot;</span>)) || &#123;&#125;;  <span class="comment">//从本地取localstorage数据</span></span><br><span class="line">storage[<span class="string">&quot;typeId&quot;</span>] = id;    <span class="comment">//localstorage数据设置key = value;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;Data&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(storage));   <span class="comment">// 设置好的数据存到localstorage</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>()将字符串转换为对象</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>()将对象转换为字符串</span><br></pre></td></tr></table></figure>


<h3 id="a标签href属性多功能"><a href="#a标签href属性多功能" class="headerlink" title="a标签href属性多功能"></a>a标签href属性多功能</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、&lt;a href=&quot;tel:400-888-6633&quot;&gt;拨打电话&lt;a&gt;</span><br><span class="line">2、&lt;a href=&quot;sms:19956321564&quot;&gt;发送短信&lt;a&gt;</span><br><span class="line">3、&lt;a href=&quot;mailto:mail@mail.com&quot;&gt;发送邮件&lt;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="a标签rel"><a href="#a标签rel" class="headerlink" title="a标签rel"></a>a标签rel</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a rel=&quot;nofollow noopener noreferrer&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>使用a标签的target&#x3D;”_blank”属性，或者window.open(url)在新窗口中打开页面时，会存在潜在的安全问题。为什么呢？这个锅是一个叫opener的全局对象的锅。<br>通过在a标签上添加这个noopener属性，可以将新打开窗口的opner置为空<br>可解决除IE外的安全问题，和所有现代浏览器的性能问题</p>
<h3 id="利用css3-media-媒体查询方法实现-引用不同link标签"><a href="#利用css3-media-媒体查询方法实现-引用不同link标签" class="headerlink" title="利用css3 @media 媒体查询方法实现 引用不同link标签"></a>利用css3 @media 媒体查询方法实现 引用不同link标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mediatype: all || print || screen || speech --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;mediatype and|not|only (media feature)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystylesheet.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体示例: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (max-width:750px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width:750px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/indexPC.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="利用meta标签在Safari浏览器显示下载app-tab"><a href="#利用meta标签在Safari浏览器显示下载app-tab" class="headerlink" title="利用meta标签在Safari浏览器显示下载app tab"></a>利用meta标签在Safari浏览器显示下载app tab</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-itunes-app&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app-id=xxxxx, app-argument=appname://feed&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文案中的引号和字段外的引号冲突解决"><a href="#文案中的引号和字段外的引号冲突解决" class="headerlink" title="文案中的引号和字段外的引号冲突解决"></a>文案中的引号和字段外的引号冲突解决</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用反斜杠\包裹引号</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;BIG SHOTS\&#x27;\ COMMENTS&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="js中并不能直接使用↵换行，可以替换为-n"><a href="#js中并不能直接使用↵换行，可以替换为-n" class="headerlink" title="js中并不能直接使用↵换行，可以替换为\n"></a>js中并不能直接使用<code>↵</code>换行，可以替换为<code>\n</code></h3><h3 id="video标签autoplay无法自动播放"><a href="#video标签autoplay无法自动播放" class="headerlink" title="video标签autoplay无法自动播放"></a>video标签autoplay无法自动播放</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;550&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">playsinline</span> <span class="attr">loop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>playsinline：一个布尔属性，指明视频将内嵌（inline）播放，即在元素的播放区域内。请注意，没有此属性并不意味着视频始终是全屏播放的。<br>muted：一个布尔属性，指明在视频中音频的默认设置。设置后，音频会初始化为静音。默认值是 false, 意味着视频播放的时候音频也会播放。（在chorme里不设置muted:true，autoplay不会生效）<br>loop：一个布尔属性；指定后会在视频播放结束的时候，自动返回视频开始的地方，继续播放。</p>
</blockquote>
<p>微信内IOS页面视频不会自动播放，需要特殊判断下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>) &#123;</span><br><span class="line">  <span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(<span class="string">&quot;getNetworkType&quot;</span>, &#123;&#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      that.<span class="property">player</span>.<span class="title function_">play</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  that.<span class="property">player</span>.<span class="title function_">play</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IOS浏览器内不自动播放加个<code>playsinline</code>属性，是禁止放大全屏播放属性，正好也解决了微信内会自动放大的问题；</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery常见问题</title>
    <url>/blog/2016/12/29/jquery%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="trigger-方法"><a href="#trigger-方法" class="headerlink" title="trigger() 方法"></a>trigger() 方法</h3><p>给指定元素添加触发事件，例：$(“#this”).trigger(“click”)</p>
<p>###jQuery noConflict() 方法<br>noConflict() 方法会释放会 $ 标识符的控制，这样其他脚本就可以使用它了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = $.<span class="title function_">noConflict</span>();</span><br><span class="line"><span class="title function_">jq</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">jq</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">jq</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;jQuery 仍在运行！&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="ready-方法"><a href="#ready-方法" class="headerlink" title="ready()方法"></a>ready()方法</h3><p>当 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会发生 ready 事件。</p>
<blockquote>
<p>ready() 函数仅能用于当前文档，因此无需选择器。<br>语法 1<br>$(document).ready(function)<br>语法 2<br>$().ready(function)<br>语法 3<br>$(function)</p>
</blockquote>
<ul>
<li>提示：ready() 函数不应与 <body onload=""> 一起使用。</li>
</ul>
]]></content>
      <categories>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>js黑科技</title>
    <url>/blog/2019/05/02/js%E9%BB%91%E7%A7%91%E6%8A%80/</url>
    <content><![CDATA[<h2 id="主要记录了js中不常用的一些技巧和逻辑"><a href="#主要记录了js中不常用的一些技巧和逻辑" class="headerlink" title="主要记录了js中不常用的一些技巧和逻辑"></a>主要记录了js中不常用的一些技巧和逻辑</h2><h3 id="1-js中-和-，-和-的区别："><a href="#1-js中-和-，-和-的区别：" class="headerlink" title="1.js中 &amp;&amp; 和 &amp; ，|| 和 | 的区别："></a>1.js中 <code>&amp;&amp;</code> 和 <code>&amp;</code> ，<code>||</code> 和 <code>|</code> 的区别：</h3><h5 id=""><a href="#" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">2</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>JS中的逻辑运算符 <code>&amp;&amp;</code> 与，左边为真才走右边，左边为假只走左边。</p>
<h5 id="-1"><a href="#-1" class="headerlink" title="&amp;"></a>&amp;</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp; <span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp; <span class="number">0</span>)  <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp; <span class="number">123</span>)  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>&amp;是表示位的与运算，把左右两边的数字转化为二进制，然后每一位分别进行比较，如果相等就为1，不相等即为0。<br>同时&amp;具有强制转换的功能，把false,true转换成了0和1进行比较。而0又表示false的意思，所以带有false的都挂掉了，偶尔也可以当做逻辑与来使用。<br>1转换为二进制为1,2转换为二进制为10，  所以1&amp;2实际是0001&amp;0010,没有相等的部分，最终结果就是0了。</p>
<h3 id="2-获取url参数最简写法"><a href="#2-获取url参数最简写法" class="headerlink" title="2.获取url参数最简写法"></a>2.获取url参数最简写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">q=&#123;&#125;;location.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="regexp">/([^?&amp;=]+)=([^&amp;]+)/g</span>,<span class="function">(<span class="params">_,k,v</span>)=&gt;</span>q[k]=v);q;</span><br><span class="line"><span class="comment">// emm..所谓最简是获取当前页面链接可以，如果获取指定链接参数：</span></span><br><span class="line"><span class="keyword">let</span> q = &#123;&#125;;</span><br><span class="line"><span class="built_in">decodeURIComponent</span>(url).<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>].<span class="title function_">replace</span>(<span class="regexp">/([^?&amp;=]+)=([^&amp;]+)/g</span>, <span class="function">(<span class="params">_, k, v</span>) =&gt;</span> q[k] = v); <span class="comment">//就是把search手动截取</span></span><br><span class="line"><span class="comment">// 额，js有原生api直接取值：（小程序不适用没有URL对象）</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://www.guoxh.com/blog?a=123&#x27;</span>).<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="string">&#x27;?a=123&#x27;</span>).<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h3 id="3-返回一个键盘？"><a href="#3-返回一个键盘？" class="headerlink" title="3.返回一个键盘？"></a>3.返回一个键盘？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">_</span>=&gt;</span>[...<span class="string">&quot;`1234567890-=~~QWERTYUIOP[]\\~ASDFGHJKL;&#x27;~~ZXCVBNM,./~&quot;</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>(o+=<span class="string">`/<span class="subst">$&#123;b=<span class="string">&#x27;_&#x27;</span>.repeat(w=x&lt;y?<span class="number">2</span>:<span class="string">&#x27; 667699&#x27;</span>[x=[<span class="string">&quot;BS&quot;</span>,<span class="string">&quot;TAB&quot;</span>,<span class="string">&quot;CAPS&quot;</span>,<span class="string">&quot;ENTER&quot;</span>][p++]||<span class="string">&#x27;SHIFT&#x27;</span>,p])&#125;</span>\\|`</span>,m+=y+(x+<span class="string">&#x27;    &#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>,w)+y+y,n+=y+b+y+y,l+=<span class="string">&#x27; __&#x27;</span>+b)[<span class="number">73</span>]&amp;&amp;(k.<span class="title function_">push</span>(l,m,n,o),l=<span class="string">&#x27;&#x27;</span>,m=n=o=y),m=n=o=y=<span class="string">&#x27;|&#x27;</span>,p=l=k=[])&amp;&amp;k.<span class="property">join</span><span class="string">`</span></span><br><span class="line"><span class="string">`</span>)()</span><br></pre></td></tr></table></figure>

<h3 id="js原生-警告，确认，信息输入弹窗"><a href="#js原生-警告，确认，信息输入弹窗" class="headerlink" title="js原生 警告，确认，信息输入弹窗"></a>js原生 警告，确认，信息输入弹窗</h3><p>alert confirm prompt</p>
<h3 id="console玩法"><a href="#console玩法" class="headerlink" title="console玩法"></a>console玩法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupCollapsed</span>(<span class="string">&#x27;这里是外面&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这里是里面&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//小区别：</span></span><br><span class="line">  - <span class="variable language_">console</span>.<span class="property">group</span> 默认是展开状态</span><br><span class="line">  - <span class="variable language_">console</span>.<span class="property">groupCollapsed</span> 默认是收起状态</span><br></pre></td></tr></table></figure>

<h3 id="骂人不带脏字-–-””"><a href="#骂人不带脏字-–-””" class="headerlink" title="骂人不带脏字(!(+[])+{})[–[+””][+[]][+[]]+~~!+[]]+({}+[])[[!+[]]~+[]]"></a>骂人不带脏字(!(<del>+[])+{})[–[</del>+””][+[]]<em>[<del>+[]]+~~!+[]]+({}+[])[[</del>!+[]]</em>~+[]]</h3><h3 id="禁止别人调试代码"><a href="#禁止别人调试代码" class="headerlink" title="禁止别人调试代码"></a>禁止别人调试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">block</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerHeight</span> - <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt; <span class="number">200</span> || <span class="variable language_">window</span>.<span class="property">outerWidth</span> - <span class="variable language_">window</span>.<span class="property">innerWidth</span> &gt; <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;检测到非法调试,请关闭后刷新重试!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      [<span class="string">&#x27;constructor&#x27;</span>](<span class="string">&#x27;debugger&#x27;</span>)</span><br><span class="line">      [<span class="string">&#x27;call&#x27;</span>]());</span><br><span class="line">    &#125;, <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">block</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123; &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="chrome打印对象默认会隐藏value，强制显示value"><a href="#chrome打印对象默认会隐藏value，强制显示value" class="headerlink" title="chrome打印对象默认会隐藏value，强制显示value"></a>chrome打印对象默认会隐藏value，强制显示value</h3><p>用<code>console.log(&#39;item&#39;, JSON.parse(JSON.stringify(item)))</code></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序记录</title>
    <url>/blog/2019/03/05/mini-program/</url>
    <content><![CDATA[<h3 id="生命周期执行顺序：onLoad-onShow-onReady"><a href="#生命周期执行顺序：onLoad-onShow-onReady" class="headerlink" title="生命周期执行顺序：onLoad &gt; onShow &gt; onReady"></a>生命周期执行顺序：onLoad &gt; onShow &gt; onReady</h3><h3 id="禁止下拉"><a href="#禁止下拉" class="headerlink" title="禁止下拉"></a>禁止下拉</h3><p>app.json中window下加enablePullDownRefresh:false</p>
<h3 id="摇一摇实现相应操作"><a href="#摇一摇实现相应操作" class="headerlink" title="摇一摇实现相应操作"></a>摇一摇实现相应操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//重力加速度</span></span><br><span class="line">    wx.<span class="title function_">onAccelerometerChange</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">//console.log(res)</span></span><br><span class="line">        <span class="comment">//可以自定义大小，来决定摇晃什么程度触发方法</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">x</span> &gt; <span class="number">.7</span> &amp;&amp; res.<span class="property">y</span> &gt; <span class="number">.7</span>) &#123;</span><br><span class="line">            wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;摇一摇成功&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="环境判断"><a href="#环境判断" class="headerlink" title="环境判断"></a>环境判断</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//__wxConfig这个内置对象在小程序官方文档没查到，所以慎用，自测可以</span></span><br><span class="line"><span class="keyword">let</span> version = __wxConfig.<span class="property">envVersion</span>;</span><br><span class="line"><span class="keyword">if</span> (!version) version = __wxConfig.<span class="property">platform</span>;</span><br><span class="line"><span class="comment">// console.log(&#x27;版本号&#x27;, version)</span></span><br><span class="line"><span class="keyword">switch</span> (version) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;devtools&#x27;</span>: <span class="comment">//开发版</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://xxx.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;develop&#x27;</span>: <span class="comment">//真机调试版</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://xxx.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;trial&#x27;</span>: <span class="comment">//体验版</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://xxx.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;release&#x27;</span>: <span class="comment">//正式版</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://bbb.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://bbb.com&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义tabbar"><a href="#自定义tabbar" class="headerlink" title="自定义tabbar"></a>自定义tabbar</h3><p>和自定义组件相同<br>特别注意要在自定义组件中定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件的对外属性，是属性名到属性设置的映射表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="comment">//在这里初始化定义对外的数据</span></span><br><span class="line">  <span class="attr">selected</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 在tabbar页面要调用getTabBar()方法，来高亮选择，以兼容某些安卓手机</span></span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">getTabBar</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getTabBar</span>()) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getTabBar</span>().<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">selected</span>: <span class="number">0</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>env(safe-area-inset-bottom)</code>这个css属性只适用于苹果手机，该变量是IOS 系统内核提供的，在IOS上正常使用；而安卓和开发工具上用的是 Chromium 内核，没有这个变量，所以不支持<br>官方文档给的tabbar示例中有个css方法：<br>padding-bottom: env(safe-area-inset-bottom);<br>这个方法是用来兼容全面屏手机，如iPhoneX，XR,XS等，会在底部留下安全距离，但是引发另一个问题，就是滚动时页面会暴露在tabbar下面，像这样：<br><img src="http://www.guoxh.com/blog/img/blog/min-p.png"><br>其实如果不是这种凸出来的，加个<code>background</code>就搞定了，相当于挡住了下面的页面，而像上面这种就不能简简单单<code>background</code>了,<br>这时候可以取个巧，利用背景渐变来达到效果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tab-bar</span>&#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(transparent <span class="number">35%</span>,<span class="number">#fff</span> <span class="number">35%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>!!!不要把自定义tabbar文件夹放在最外层，否则会导致全局引用</li>
</ul>
<h3 id="swiper指示点样式控制"><a href="#swiper指示点样式控制" class="headerlink" title="swiper指示点样式控制"></a>swiper指示点样式控制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意要加重点标记 */</span></span><br><span class="line"><span class="selector-class">.wx-swiper-dot</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6</span>rpx <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6</span>rpx <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8</span>rpx <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wx-swiper-dot-active</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12</span>rpx <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6</span>rpx <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3</span>rpx <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wx-swiper-dot</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>; </span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8</span>rpx</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wx-swiper-dot-active</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">244</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>swiper-item一张时，真机调试出现不显示的情况，暂时处理为一张时不用swiper<br>找到解决方法了，哈哈哈哈哈哈哈，e，<br>每次更新数据的时候(数组的长度可能减小),所以记得:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">current</span>=<span class="string">&quot;&#123;&#123;current&#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">current</span>:<span class="number">0</span> <span class="comment">// current的值不能大于list.length,所以每次更新数据的时候重置为0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="小程序中ios不支持时间格式为-或者-的转换必须转换为-格式"><a href="#小程序中ios不支持时间格式为-或者-的转换必须转换为-格式" class="headerlink" title="小程序中ios不支持时间格式为 - 或者 . 的转换必须转换为 &#x2F; 格式"></a>小程序中ios不支持时间格式为 - 或者 . 的转换必须转换为 &#x2F; 格式</h3><p>例如：new Date(“2019-07-05 12:00:00”.replace(&#x2F;-&#x2F;g, “&#x2F;“));<br>只有这样可以得到正确的时间格式，其他转换可能也行，但是没试</p>
<h3 id="去除button默认样式"><a href="#去除button默认样式" class="headerlink" title="去除button默认样式"></a>去除button默认样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">  <span class="attribute">outline</span>:none;</span><br><span class="line">  <span class="attribute">border</span>:none;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: normal;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分享图片华为手机不支持本地图片，会有50-概率读取不到，亲测，放在cdn上是可以的"><a href="#分享图片华为手机不支持本地图片，会有50-概率读取不到，亲测，放在cdn上是可以的" class="headerlink" title="分享图片华为手机不支持本地图片，会有50%概率读取不到，亲测，放在cdn上是可以的"></a>分享图片华为手机不支持本地图片，会有50%概率读取不到，亲测，放在cdn上是可以的</h3><h3 id="js-canvas生成二维码，华为手机显示不出来，亲测，调用两边draw方法就可以成功"><a href="#js-canvas生成二维码，华为手机显示不出来，亲测，调用两边draw方法就可以成功" class="headerlink" title="js canvas生成二维码，华为手机显示不出来，亲测，调用两边draw方法就可以成功"></a>js canvas生成二维码，华为手机显示不出来，亲测，调用两边draw方法就可以成功</h3><h3 id="wx-chooseImage中使用wx-showLoading"><a href="#wx-chooseImage中使用wx-showLoading" class="headerlink" title="wx.chooseImage中使用wx.showLoading"></a>wx.chooseImage中使用wx.showLoading</h3><ul>
<li>wx.chooseImage方法中使用wx.showLoading会导致wx.showLoading不显示，微信客户端bug，初步方案为加个setTimeout方法可以解决，时间必须设置300ms以上</li>
</ul>
<h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><h4 id="自定义组件中css不建议使用标签选择器，手机调试会看到警告提醒，page中可以使用"><a href="#自定义组件中css不建议使用标签选择器，手机调试会看到警告提醒，page中可以使用" class="headerlink" title="自定义组件中css不建议使用标签选择器，手机调试会看到警告提醒，page中可以使用"></a>自定义组件中css不建议使用标签选择器，手机调试会看到警告提醒，page中可以使用</h4><h4 id="自定义组件中获取canvas2d元素与page中获取方法不同："><a href="#自定义组件中获取canvas2d元素与page中获取方法不同：" class="headerlink" title="自定义组件中获取canvas2d元素与page中获取方法不同："></a>自定义组件中获取canvas2d元素与page中获取方法不同：</h4><p>pages中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">createSelectorQuery</span>().<span class="title function_">select</span>(<span class="string">&#x27;#canvas&#x27;</span>).<span class="title function_">fields</span>(&#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;).<span class="title function_">exec</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span>;</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>自定义组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">createSelectorQuery</span>().<span class="title function_">in</span>(<span class="variable language_">this</span>).<span class="title function_">select</span>(<span class="string">&#x27;#canvas&#x27;</span>).<span class="title function_">fields</span>(&#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;).<span class="title function_">exec</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span>;</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>区别在于组件中要先调用<code>.in(this)</code>方法获取当前实例，才能再选择canvas</li>
</ul>
<h4 id="自定义组件监听数据变化"><a href="#自定义组件监听数据变化" class="headerlink" title="自定义组件监听数据变化"></a>自定义组件监听数据变化</h4><p>属性值的改变情况可以使用 observer 来监听。目前，在新版本基础库中不推荐使用这个字段，而是使用 Component 构造器的 observers 字段代替，它更加强大且性能更好。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">min</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">observer</span>: <span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">        <span class="comment">// 属性值变化时执行 不推荐</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="comment">//推荐这种方式监听</span></span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">allData</span>: data</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">formateData</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">allData</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="scroll-view-组件子元素高度不够无法刷新解决办法"><a href="#scroll-view-组件子元素高度不够无法刷新解决办法" class="headerlink" title="scroll-view 组件子元素高度不够无法刷新解决办法"></a>scroll-view 组件子元素高度不够无法刷新解决办法</h3><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000a806cc2c4b0055c0a6a7735b013">传送门</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span>  <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;dataList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;width:2rpx;height:2rpx;bottom:-2rpx;position:absolute;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:100%;padding-bottom: 20vw;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原理都相同，加个空<code>view标签</code>撑起内容高度，我试了第二种实现了，第一种没实现</p>
<p>svroll-view下拉刷新有时会莫名抖动2020.07.24</p>
<h3 id="用npm包时，先检查根目录是否有package-json文件，没有新建一个，再npm-install"><a href="#用npm包时，先检查根目录是否有package-json文件，没有新建一个，再npm-install" class="headerlink" title="用npm包时，先检查根目录是否有package.json文件，没有新建一个，再npm install"></a>用npm包时，先检查根目录是否有package.json文件，没有新建一个，再npm install</h3><h3 id="list页跳转detail页，detail页操作数据后，list做到不刷新同步数据"><a href="#list页跳转detail页，detail页操作数据后，list做到不刷新同步数据" class="headerlink" title="list页跳转detail页，detail页操作数据后，list做到不刷新同步数据"></a>list页跳转detail页，detail页操作数据后，list做到不刷新同步数据</h3><p>非常简单，利用小程序中自带方法<code>getCurrentPages()</code>可以获取上个页面数据方法的特性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在detail调用列表页方法，以实现不刷新页面改变状态</span></span><br><span class="line"><span class="keyword">let</span> pages = <span class="title function_">getCurrentPages</span>();</span><br><span class="line"><span class="keyword">if</span> (pages.<span class="property">length</span> &gt;= <span class="number">2</span> &amp;&amp; pages[pages.<span class="property">length</span> - <span class="number">2</span>].<span class="property">route</span> == <span class="string">&quot;page/list/list&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">//如果上个页面为list页</span></span><br><span class="line">  <span class="keyword">let</span> preData = pages[pages.<span class="property">length</span> - <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">let</span> arg = &#123;</span><br><span class="line">    <span class="attr">resultFlag</span>: res.<span class="property">infoMap</span>.<span class="property">resultFlag</span>,</span><br><span class="line">    <span class="attr">id</span>: item.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">type</span>: type,</span><br><span class="line">    <span class="attr">count</span>: res.<span class="property">infoMap</span>.<span class="property">count</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//调用list方法更新数据</span></span><br><span class="line">  preData.<span class="title function_">detailSetData</span>(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wx-setNavigationBarTitle方法不区分页面，导致异步请求未完成返回会显示在前一个页面"><a href="#wx-setNavigationBarTitle方法不区分页面，导致异步请求未完成返回会显示在前一个页面" class="headerlink" title="wx.setNavigationBarTitle方法不区分页面，导致异步请求未完成返回会显示在前一个页面"></a>wx.setNavigationBarTitle方法不区分页面，导致异步请求未完成返回会显示在前一个页面</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理方法就是在异步请求之前和之后分别记录当前页面路由，如果一致才设置tabbarText</span></span><br><span class="line"><span class="keyword">let</span> page = <span class="title function_">getCurrentPages</span>();</span><br><span class="line"><span class="keyword">let</span> currentRoute = page[page.<span class="property">length</span> - <span class="number">1</span>].<span class="property">route</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//定时器模拟异步请求</span></span><br><span class="line">  <span class="keyword">let</span> page2 = <span class="title function_">getCurrentPages</span>();</span><br><span class="line">  <span class="keyword">let</span> currentRoute2 = page2[page2.<span class="property">length</span> - <span class="number">1</span>].<span class="property">route</span>;</span><br><span class="line">  <span class="keyword">if</span> (currentRoute == currentRoute2) &#123;</span><br><span class="line">    wx.<span class="title function_">setNavigationBarTitle</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: res.<span class="property">result</span>.<span class="property">goods_name</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//哪有人要说了，直接在前一个页面重新set一下不就好了，但是你要知道我们无法知道异步请求成功时间，所以不可靠</span></span><br></pre></td></tr></table></figure>

<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>1.定义模板，使用<code>name</code>属性作为模板名称，然后再<code>template</code>标签中写入代码，或者引入自定义组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template name=&quot;msgItem&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class="line">    &lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>2.使用模板，使用<code>is</code>属性，声明要使用的模板，然后将上面定义的模板中需要的数据引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template is=&quot;msgItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">item</span>: &#123;</span><br><span class="line">      <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;this is a template&#x27;</span>,</span><br><span class="line">      <span class="attr">time</span>: <span class="string">&#x27;2016-09-15&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>is</code>属性还可以使用Mustache胡子语法，动态引入需要的模板</p>
</blockquote>
<h3 id="小程序内置插件启用"><a href="#小程序内置插件启用" class="headerlink" title="小程序内置插件启用"></a>小程序内置插件启用</h3><p>1.旧项目<br>在 project.config.json 文件中，修改 setting 下的 useCompilerPlugins 字段为 [“typescript”]，即可开启工具内置的 typescript 编译插件。 如需同时开启 less 编译插件，可将该字段修改为 [“typescript”, “less”]。 目前支持三个编译插件：typescript、less、sass</p>
<p>2.新建项目<br>可在创建小程序项目时，选择对应的语言模板。 目前支持的语言模板有</p>
<ul>
<li>TypeScript</li>
<li>TypeScript + Less</li>
<li>TypeScript + Sass</li>
</ul>
<h3 id="小程序插件的大小是会算进小程序代码包2M体积限制中的，所以如果遇到插件包过大，可以考虑引用较低版本的插件，当然得考虑兼容性；"><a href="#小程序插件的大小是会算进小程序代码包2M体积限制中的，所以如果遇到插件包过大，可以考虑引用较低版本的插件，当然得考虑兼容性；" class="headerlink" title="小程序插件的大小是会算进小程序代码包2M体积限制中的，所以如果遇到插件包过大，可以考虑引用较低版本的插件，当然得考虑兼容性；"></a>小程序插件的大小是会算进小程序代码包2M体积限制中的，所以如果遇到插件包过大，可以考虑引用较低版本的插件，当然得考虑兼容性；</h3><p>所以插件尽量放到分包中</p>
<h3 id="加密数据传输用CryptoJS"><a href="#加密数据传输用CryptoJS" class="headerlink" title="加密数据传输用CryptoJS"></a>加密数据传输用CryptoJS</h3><h3 id="弱网体验优化（弱网情况下直接返回缓存的数据）"><a href="#弱网体验优化（弱网情况下直接返回缓存的数据）" class="headerlink" title="弱网体验优化（弱网情况下直接返回缓存的数据）"></a>弱网体验优化（弱网情况下直接返回缓存的数据）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="title function_">onLaunch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cacheManager = wx.<span class="title function_">createCacheManager</span>(&#123;</span><br><span class="line">      <span class="attr">origin</span>: <span class="string">`api域名`</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    cacheManager.<span class="title function_">addRules</span>([</span><br><span class="line">      <span class="comment">//监听的api路由</span></span><br><span class="line">      <span class="string">&#x27;/cgi/home&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/cgi/detail/:id&#x27;</span>,</span><br><span class="line">    ])</span><br><span class="line">    cacheManager.<span class="title function_">on</span>(<span class="string">&#x27;enterWeakNetwork&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;enterWeakNetwork&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    cacheManager.<span class="title function_">on</span>(<span class="string">&#x27;exitWeakNetwork&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exitWeakNetwork&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    cacheManager.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> matchRes = cacheManager.<span class="title function_">match</span>(evt)</span><br><span class="line">        <span class="keyword">if</span> (matchRes) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(matchRes.<span class="property">data</span> || <span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(&#123;<span class="attr">errMsg</span>: <span class="string">`catch not found: <span class="subst">$&#123;evt.url&#125;</span>`</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="swiper设置current属性失效"><a href="#swiper设置current属性失效" class="headerlink" title="swiper设置current属性失效"></a>swiper设置current属性失效</h3><p>如果有手动滑动过swiper,再设置current就不生效了,因为触发onchange事件没有同步current</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要在onchange事件里手动同步下current值</span></span><br><span class="line">&lt;swiper <span class="keyword">class</span>=<span class="string">&quot;swiper&quot;</span> current=<span class="string">&quot;&#123;&#123;currentIndex&#125;&#125;&quot;</span>  bindchange=<span class="string">&quot;changeSwiper&quot;</span>&gt;</span><br><span class="line"><span class="title function_">changeSwiper</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">currentIndex</span>: e.<span class="property">detail</span>.<span class="property">current</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题集成gitalk评论</title>
    <url>/blog/2019/03/11/next%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90gitalk%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="2022-11-28目前gittalk已经需要翻墙才能使用了，不翻墙会一直提示netwrok-error，作为一个遵纪守法的良好公民，我自然是深恶痛绝偷偷翻墙的这种行为，同时对私连IP搭建VPN并以此盈利的不法分子更是痛心疾首，希望能早日醒悟，苦海无涯，回头是岸，否则悔之晚矣"><a href="#2022-11-28目前gittalk已经需要翻墙才能使用了，不翻墙会一直提示netwrok-error，作为一个遵纪守法的良好公民，我自然是深恶痛绝偷偷翻墙的这种行为，同时对私连IP搭建VPN并以此盈利的不法分子更是痛心疾首，希望能早日醒悟，苦海无涯，回头是岸，否则悔之晚矣" class="headerlink" title="2022.11.28目前gittalk已经需要翻墙才能使用了，不翻墙会一直提示netwrok error，作为一个遵纪守法的良好公民，我自然是深恶痛绝偷偷翻墙的这种行为，同时对私连IP搭建VPN并以此盈利的不法分子更是痛心疾首，希望能早日醒悟，苦海无涯，回头是岸，否则悔之晚矣"></a>2022.11.28目前gittalk已经需要翻墙才能使用了，不翻墙会一直提示netwrok error，作为一个遵纪守法的良好公民，我自然是深恶痛绝偷偷翻墙的这种行为，同时对私连IP搭建VPN并以此盈利的不法分子更是痛心疾首，希望能早日醒悟，苦海无涯，回头是岸，否则悔之晚矣</h2><h2 id="记录一下hexo博客next主题集成gitalk评论插件的步骤"><a href="#记录一下hexo博客next主题集成gitalk评论插件的步骤" class="headerlink" title="记录一下hexo博客next主题集成gitalk评论插件的步骤"></a>记录一下hexo博客next主题集成gitalk评论插件的步骤</h2><blockquote>
<p>本文参考<a href="https://asdfv1929.github.io/2018/01/20/gitalk/">https://asdfv1929.github.io/2018/01/20/gitalk/</a><br>gitalk：一个基于 Github Issue 和 Preact 开发的评论插件<br>官网：<a href="https://gitalk.github.io/">https://gitalk.github.io/</a><br>官方GitHub：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p>
</blockquote>
<h3 id="1-在自己的GitHub中注册一个开放授权的gitalk应用"><a href="#1-在自己的GitHub中注册一个开放授权的gitalk应用" class="headerlink" title="1.在自己的GitHub中注册一个开放授权的gitalk应用"></a>1.在自己的GitHub中注册一个开放授权的gitalk应用</h3><p><a href="https://github.com/settings/applications/new">注册链接</a><br><img src="http://www.guoxh.com/blog/img/blog/register.png"></p>
<blockquote>
<p>参数说明：<br>  Application name： # 应用名称，随意<br>  Homepage URL： # 网站URL，如<a href="https://gxhpersonal.github.io/">https://gxhpersonal.github.io</a><br>  Application description # 描述，随意<br>  Authorization callback URL：# 网站URL，<a href="https://gxhpersonal.github.io/">https://gxhpersonal.github.io</a></p>
</blockquote>
<h3 id="2-点击注册后，页面跳转如下，其中Client-ID和Client-Secret在后面的配置中需要用到，到时复制粘贴即可："><a href="#2-点击注册后，页面跳转如下，其中Client-ID和Client-Secret在后面的配置中需要用到，到时复制粘贴即可：" class="headerlink" title="2.点击注册后，页面跳转如下，其中Client ID和Client Secret在后面的配置中需要用到，到时复制粘贴即可："></a>2.点击注册后，页面跳转如下，其中Client ID和Client Secret在后面的配置中需要用到，到时复制粘贴即可：</h3><p><img src="http://www.guoxh.com/blog/img/blog/register2.png"></p>
<h3 id="3-在next主题文件下新建-layout-third-party-comments-gitalk-swig文件，并添加内容："><a href="#3-在next主题文件下新建-layout-third-party-comments-gitalk-swig文件，并添加内容：" class="headerlink" title="3.在next主题文件下新建&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;gitalk.swig文件，并添加内容："></a>3.在next主题文件下新建&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;gitalk.swig文件，并添加内容：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &#x27;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&#x27;,</span><br><span class="line">          clientSecret: &#x27;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&#x27;,</span><br><span class="line">          repo: &#x27;&#123;&#123; theme.gitalk.repo &#125;&#125;&#x27;,</span><br><span class="line">          owner: &#x27;&#123;&#123; theme.gitalk.githubID &#125;&#125;&#x27;,</span><br><span class="line">          admin: [&#x27;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&#x27;],</span><br><span class="line">          id: location.pathname        &#125;)</span><br><span class="line">        gitalk.render(&#x27;gitalk-container&#x27;)           </span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中的配置项如clientID，clientSecret等对应为主题配置文件_config.yml中的配置项</p>
</blockquote>
<h3 id="4-修改-layout-partials-comments-swig，添加内容如下，与前面的elseif同一级别上："><a href="#4-修改-layout-partials-comments-swig，添加内容如下，与前面的elseif同一级别上：" class="headerlink" title="4.修改&#x2F;layout&#x2F;_partials&#x2F;comments.swig，添加内容如下，与前面的elseif同一级别上："></a>4.修改&#x2F;layout&#x2F;_partials&#x2F;comments.swig，添加内容如下，与前面的elseif同一级别上：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line"> &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="http://www.guoxh.com/blog/img/blog/register3.png"></p>
<h3 id="5-修改layout-third-party-comments-index-swig，在最后一行添加内容："><a href="#5-修改layout-third-party-comments-index-swig，在最后一行添加内容：" class="headerlink" title="5.修改layout&#x2F;_third-party&#x2F;comments&#x2F;index.swig，在最后一行添加内容："></a>5.修改layout&#x2F;_third-party&#x2F;comments&#x2F;index.swig，在最后一行添加内容：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% include &#x27;gitalk.swig&#x27; %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-在主题配置文件next-config-yml中添加如下内容："><a href="#6-在主题配置文件next-config-yml中添加如下内容：" class="headerlink" title="6.在主题配置文件next&#x2F;_config.yml中添加如下内容："></a>6.在主题配置文件next&#x2F;_config.yml中添加如下内容：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: github帐号ID  # 例：gxhpersonal </span><br><span class="line">  repo: 仓库名称   # 例：gxhpersonal.github.io</span><br><span class="line">  ClientID: Client ID #上面申请的授权应用id</span><br><span class="line">  ClientSecret: Client Secret #上面申请的授权应用Secret</span><br><span class="line">  adminUser: github帐号 #指定可初始化评论账户 例：gxhpersonal </span><br></pre></td></tr></table></figure>

<h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><hr>
<h4 id="以下为可能遇到的问题"><a href="#以下为可能遇到的问题" class="headerlink" title="以下为可能遇到的问题"></a>以下为可能遇到的问题</h4><h3 id="Error-Not-Found"><a href="#Error-Not-Found" class="headerlink" title="Error Not Found"></a>Error Not Found</h3><p>检查自己的配置项字段是否正确，如：<br>1&gt; repo：gxhpersonal.github.io后面不能加path路径<br>2&gt; 主题配置文件next&#x2F;_config.yml中的字段要和&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;gitalk.swig文件中的引用字段对应</p>
<h3 id="Error-Validation-Failed"><a href="#Error-Validation-Failed" class="headerlink" title="Error: Validation Failed"></a>Error: Validation Failed</h3><p>由于 Github 限制 labal 长度不能超过 50引起的<br>具体解决是通过MD5加密ID来缩短labal长度<br>1&gt; 创建<code>md5.min.js</code>文件在 \themes\next\source\js\src\md5.min.js<a href="https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js">官网GitHub</a><br>2&gt; 修改gitalk.swig文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  &#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ``引入文件 <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>``</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        var gitalk = new Gitalk(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          clientID: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.ClientID</span> &#125;&#125;</span><span class="language-xml">&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          clientSecret: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.ClientSecret</span> &#125;&#125;</span><span class="language-xml">&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          repo: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.repo</span> &#125;&#125;</span><span class="language-xml">&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          owner: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.githubID</span> &#125;&#125;</span><span class="language-xml">&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          admin: [&#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.adminUser</span> &#125;&#125;</span><span class="language-xml">&#x27;],     </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ``删除配置     id: location.pathname,``</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ``添加配置     id: md5(location.pathname),``</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        gitalk.render(&#x27;gitalk-container&#x27;)           </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><del>啦啦啦</del></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>node版本管理工具n的使用</title>
    <url>/blog/2025/03/04/node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7n%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="nvm在-windows上用方便，n则在Mac上用方便"><a href="#nvm在-windows上用方便，n则在Mac上用方便" class="headerlink" title="nvm在 windows上用方便，n则在Mac上用方便"></a>nvm在 windows上用方便，n则在Mac上用方便</h3><h3 id="一、清除-node缓存"><a href="#一、清除-node缓存" class="headerlink" title="一、清除 node缓存"></a>一、清除 node缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm cache clean --force</span><br></pre></td></tr></table></figure>
<h3 id="二、全局安装-n"><a href="#二、全局安装-n" class="headerlink" title="二、全局安装 n"></a>二、全局安装 n</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm install n -g</span><br></pre></td></tr></table></figure>
<h3 id="三、安装不同版本的node"><a href="#三、安装不同版本的node" class="headerlink" title="三、安装不同版本的node"></a>三、安装不同版本的node</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo n stable    // 安装最新稳定版</span><br><span class="line">sudo n lts       // 安装最新长期支持版</span><br><span class="line">sudo n 10.16.0   // 安装指定版本</span><br></pre></td></tr></table></figure>
<h3 id="四、n-切换不同-node版本"><a href="#四、n-切换不同-node版本" class="headerlink" title="四、n 切换不同 node版本"></a>四、n 切换不同 node版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo n //用键盘上下键切换不同 node版本</span><br></pre></td></tr></table></figure>
<h3 id="五、删除node指定版本"><a href="#五、删除node指定版本" class="headerlink" title="五、删除node指定版本"></a>五、删除node指定版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo n rm 10.16.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node版本管理工具</category>
      </categories>
      <tags>
        <tag>node版本管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm安装</title>
    <url>/blog/2023/09/06/nvm%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="之前一直懒没有安装nvm，现在安装上发现又简单又方便，真香！"><a href="#之前一直懒没有安装nvm，现在安装上发现又简单又方便，真香！" class="headerlink" title="之前一直懒没有安装nvm，现在安装上发现又简单又方便，真香！"></a>之前一直懒没有安装nvm，现在安装上发现又简单又方便，真香！</h3><h3 id="注意：在下载nvm之前需要卸载本电脑已经安装的node"><a href="#注意：在下载nvm之前需要卸载本电脑已经安装的node" class="headerlink" title="注意：在下载nvm之前需要卸载本电脑已经安装的node!"></a>注意：在下载nvm之前需要卸载本电脑已经安装的node!</h3><h3 id="一、进入官网http-nvm-uihtm-com-或者githubhttps-github-com-coreybutler-nvm-windows-releases-下载："><a href="#一、进入官网http-nvm-uihtm-com-或者githubhttps-github-com-coreybutler-nvm-windows-releases-下载：" class="headerlink" title="一、进入官网http://nvm.uihtm.com/ 或者githubhttps://github.com/coreybutler/nvm-windows/releases 下载："></a>一、进入官网<code>http://nvm.uihtm.com/</code> 或者github<code>https://github.com/coreybutler/nvm-windows/releases</code> 下载：</h3><p><img src="http://www.guoxh.com/blog/img/nvm/1.png"></p>
<h3 id="二、安装："><a href="#二、安装：" class="headerlink" title="二、安装："></a>二、安装：</h3><p>一路向下就好了，没什么好说的：<br><img src="http://www.guoxh.com/blog/img/nvm/2.png"><br><img src="http://www.guoxh.com/blog/img/nvm/3.png"></p>
<h3 id="三、打开默认安装的路径："><a href="#三、打开默认安装的路径：" class="headerlink" title="三、打开默认安装的路径："></a>三、打开默认安装的路径：</h3><p>图中nodejs表示当前激活的node版本：<br><img src="http://www.guoxh.com/blog/img/nvm/4.png"></p>
<p>图中nvm文件夹下可以看到你安装的所有node版本文件（如何安装node后面会说）：<br><img src="http://www.guoxh.com/blog/img/nvm/5.png"></p>
<h3 id="四、打开cmd终端"><a href="#四、打开cmd终端" class="headerlink" title="四、打开cmd终端"></a>四、打开cmd终端</h3><ol>
<li><p>输入<code>nvm</code>查看nvm版本及其相关命令信息：<br><img src="http://www.guoxh.com/blog/img/nvm/6.png"></p>
</li>
<li><p>快速查询部分node版本（当然只是部分，其他也可以下载）：<br><img src="http://www.guoxh.com/blog/img/nvm/7.png"></p>
</li>
<li><p>安装指定node版本（下载的node会安装到上面提到的nvm文件夹下）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install [node版本号]</span><br></pre></td></tr></table></figure>
<p><img src="http://www.guoxh.com/blog/img/nvm/8.png"></p>
<center><b><font size ='1'>如图所示，同时会下载对应npm版本</font></b></center>
</li>
<li><p>切换指定node版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 20.x.x</span><br></pre></td></tr></table></figure>
<p><img src="http://www.guoxh.com/blog/img/nvm/9.png"></p>
</li>
<li><p>特别注意！！！执行<code>nvm use 20.x.x</code>命令后，看到下面这样才算切换版本成功：<br><img src="http://www.guoxh.com/blog/img/nvm/10.png"><br>如果切换后没有显示<code>(Currently using 64-bit executable)</code>，则切换失败，执行<code>node -v</code>会提示找不到node<br>可以尝试切换管理员运行模式打开cmd</p>
</li>
</ol>
<ul>
<li>win11:导航栏中间图标右键<code>终端（管理员）</code>打开cmd</li>
<li>win10:文件夹右键以管理员模式运行</li>
<li>如果还不行，卸载nvm重装</li>
</ul>
]]></content>
      <categories>
        <category>node版本管理工具</category>
      </categories>
      <tags>
        <tag>node版本管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>react记录</title>
    <url>/blog/2019/11/28/react%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="打包后路径不对解决"><a href="#打包后路径不对解决" class="headerlink" title="打包后路径不对解决"></a>打包后路径不对解决</h3><p>执行<code>npm run build</code>后发现打包文件路径错误，在package.json文件最外层添加<code>&quot;homepage&quot;: &quot;./&quot;</code></p>
<h3 id="安装依赖（sass）"><a href="#安装依赖（sass）" class="headerlink" title="安装依赖（sass）"></a>安装依赖（sass）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install node-sass --save</span><br></pre></td></tr></table></figure>

<h3 id="打包不同环境代码包"><a href="#打包不同环境代码包" class="headerlink" title="打包不同环境代码包"></a>打包不同环境代码包</h3><p>1.安装<code>cross-env</code>插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install cross-env -dev</span><br></pre></td></tr></table></figure>

<p>2.<code>package.json</code>文件中：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env REACT_APP_SECRET_ENV=&#x27;development&#x27; node scripts/start.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env REACT_APP_SECRET_ENV=&#x27;production&#x27; node scripts/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build:staging&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env REACT_APP_SECRET_ENV=&#x27;staging&#x27; node scripts/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/test.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>3.在任意js中不同环境就可以获取到不同的<code>REACT_APP_SECRET_ENV</code>值;</p>
<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p><code>router.js</code>文件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span>, lazy &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Switch</span>, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../component/home/Index&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BasicRoute</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  // fallback用来页面未加载显示loading等元素提升用户体验，可引入组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        // exact用来路由名称精准匹配</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &lt;/Router &gt;</span></span><br><span class="line"><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml">export default BasicRoute;</span></span><br></pre></td></tr></table></figure>

<h3 id="css添加浏览器前缀"><a href="#css添加浏览器前缀" class="headerlink" title="css添加浏览器前缀"></a>css添加浏览器前缀</h3><p>修改<code>package.json</code>文件中的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 正式环境</span></span><br><span class="line">  <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;not ie &lt;= 8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;iOS &gt;= 6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Android &gt; 4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Firefox &gt; 20&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 开发环境</span></span><br><span class="line">  <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;last 1 chrome version&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 1 firefox version&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h3><p>例如引用axios到全局<br>在<code>index.js</code>中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;<span class="comment">//直接引用  </span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&quot;/axios/index.js&quot;</span>;<span class="comment">//如果封装了axios，还可以引入封装后的文件</span></span><br><span class="line"><span class="title class_">React</span>.<span class="property">$axios</span> = <span class="title class_">Axios</span>;</span><br></pre></td></tr></table></figure>


<h3 id="react集成预渲染方案，解决首屏白屏问题-seo问题"><a href="#react集成预渲染方案，解决首屏白屏问题-seo问题" class="headerlink" title="react集成预渲染方案，解决首屏白屏问题+seo问题"></a>react集成预渲染方案，解决首屏白屏问题+seo问题</h3><p>1.安装单页应用预渲染插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install prerender-spa-plugin --save-dev</span><br></pre></td></tr></table></figure>

<p>2.安装自定义配置插件（此工具可以自定义配置webpack插件）</p>
<ol>
<li><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install react-app-rewired --save-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/timarney/react-app-rewired/blob/HEAD/README_zh.md">插件官网</a><br>此工具可以在不 ‘eject’ 也不创建额外 react-scripts 的情况下修改 create-react-app 内置的 webpack 配置，然后你将拥有 create-react-app 的一切特性，且可以根据你的需要去配置 webpack 的 plugins, loaders 等。<br>使用了 react-app-rewired 之后，等于你得到了项目的配置权，但这表示你的项目将无法得到 CRA 提供的配置“保证”，希望你知道自己要做什么。</p>
</blockquote>
</li>
<li><p>在根目录中创建一个 config-overrides.js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+-- your-project</span><br><span class="line">|   +-- config-overrides.<span class="property">js</span>  <span class="comment">//新增</span></span><br><span class="line">|   +-- node_modules</span><br><span class="line">|   +-- package.<span class="property">json</span></span><br><span class="line">|   +-- public</span><br><span class="line">|   +-- <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">|   +-- src</span><br></pre></td></tr></table></figure>
<p>文件中添加<code>prerender-spa-plugin</code>插件的配置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* config-overrides.js */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">config, env</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (env === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    config.<span class="property">plugins</span> = config.<span class="property">plugins</span>.<span class="title function_">concat</span>([</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">routes</span>: [<span class="string">&#x27;/&#x27;</span>],  <span class="comment">//路由地址，要生成静态文件的路由添加在数组中</span></span><br><span class="line">        <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),  <span class="comment">//staticDir是使用哪个文件夹作为模板目录默认build</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换 package.json 中 scripts 执行部分</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/* package.json */</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">-   <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">+   <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired start&quot;</span><span class="punctuation">,</span></span><br><span class="line">-   <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts build&quot;</span><span class="punctuation">,</span></span><br><span class="line">+   <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired build&quot;</span><span class="punctuation">,</span></span><br><span class="line">-   <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts test --env=jsdom&quot;</span><span class="punctuation">,</span></span><br><span class="line">+   <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired test --env=jsdom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意：不用替换 eject 部分。工具中没有针对 eject 的配置替换，执行了 eject 命令会让工具失去作用（能找到这个插件我也相信你知道 eject 是干嘛的）。</li>
<li>react-scripts 是 create-react-app 的一个核心包，一些脚本和工具的默认配置都集成在里面，而 react-scripts eject 命令执行后会将封装在 create-react-app 中的配置全部反编译到当前项目，这样用户就能完全取得 webpack 文件的控制权。所以，eject 命令存在的意义就是更改 webpack 配置存在</li>
</ul>
<p>3.执行<code>npm run build</code>打包后打开<code>build/index.html</code>文件会发现所有dom都已经加入了，bingo！</p>
<h3 id="react集成TDK（2020-5-15大佬插件竟然1万3千多赞，惊呆）"><a href="#react集成TDK（2020-5-15大佬插件竟然1万3千多赞，惊呆）" class="headerlink" title="react集成TDK（2020.5.15大佬插件竟然1万3千多赞，惊呆）"></a>react集成TDK（2020.5.15大佬插件竟然1万3千多赞，惊呆）</h3><p><a href="https://github.com/nfl/react-helmet">传送门官方地址</a><br>非常简单<br>1.安装<code>react-helmet</code>插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install react-helmet --save-dev</span><br></pre></td></tr></table></figure>
<p>打包构建用，不在生产环境使用，所以加到<code>devDependencies</code>配置项下就可以</p>
<p>2.引入插件，模板中加入<code>Helmet</code>标签即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Helmet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-helmet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;keywords&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ...</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：嵌套或后继组件将覆盖重复的更改：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Parent</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Helmet application&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>Nested Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Nested component&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Helmet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Parent</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="父子组件互相传值-调用方法"><a href="#父子组件互相传值-调用方法" class="headerlink" title="父子组件互相传值&#x2F;调用方法"></a>父子组件互相传值&#x2F;调用方法</h3><h5 id="类组件："><a href="#类组件：" class="headerlink" title="类组件："></a>类组件：</h5><p>父组件中：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 优惠券领取弹窗 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">CouponPopup</span> vname=&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">vname</span>&#125; couponItem=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">couponItem</span>&#125; event=&#123;<span class="variable language_">this</span>&#125; onRef=&#123;<span class="function">(<span class="params">ref</span>) =&gt;</span> &#123; <span class="variable language_">this</span>.<span class="property">child</span> = ref &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>子组件中：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">CouponPopup</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//子组件实例传递给父组件</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onRef</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  toParent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用父组件方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">event</span>.<span class="title function_">closePopup</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">reserve</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是提供给父组件调用的方法&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h5><p>父组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> () =&gt; &#123;</span><br><span class="line">  ref = <span class="title class_">React</span>.<span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">//调用子组件方法</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getChild</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ref.<span class="property">current</span>.<span class="title function_">getInfo</span>(v.<span class="property">activityInfo</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;getChild&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponents</span> <span class="attr">onRef</span>=<span class="string">&#123;ref&#125;</span>  <span class="attr">getUser</span>=<span class="string">&#123;getUser&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getUser &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//子组件方法暴露给父组件</span></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(props.<span class="property">onRef</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; getInfo &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 子组件调用父组件方法</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;getUser&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="路由跳转传参方式（state、query、params），目前我做的是history模式路由，而且以后也不会考虑hash模式"><a href="#路由跳转传参方式（state、query、params），目前我做的是history模式路由，而且以后也不会考虑hash模式" class="headerlink" title="路由跳转传参方式（state、query、params），目前我做的是history模式路由，而且以后也不会考虑hash模式"></a>路由跳转传参方式（state、query、params），目前我做的是history模式路由，而且以后也不会考虑hash模式</h3><p>1.<code>state</code>参数：</p>
<blockquote>
<p><code>state</code>方式传参刷新页面参数不会丢失，并且是隐式传参，链接中不会显示参数，<code>state</code>传参的方式只支持<code>Browserrouter</code>路由，不支持<code>hashrouter</code>，就是我们常说的<code>history</code>模式，而不支持<code>hash</code>模式<br>获取参数：<code>this.props.location.state</code><br>2.<code>query</code>参数：<br><code>query</code>方式传参刷新页面参数丢失<br>3.<code>params</code>参数：<br><code>params</code>方式传参刷新页面参数丢失</p>
</blockquote>
<ul>
<li>暂时并没有发现在history模式下query和params两种方式的不同，看网上说在hash模式下会有区别，然后还有文档说params传参可以是下面这种：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">state=&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">88</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路由页面：</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&#x27;/demo/:id/:name&#x27;</span> component=&#123;<span class="title class_">Demo</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;  </span><br><span class="line"><span class="comment">// 路由跳转并传递参数：</span></span><br><span class="line">    <span class="comment">// 链接方式：</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>`/<span class="attr">demo</span>/$&#123;<span class="attr">this.state.id</span>&#125;/$&#123;<span class="attr">this.state.name</span>&#125;`&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// js方式：</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(&#123;<span class="attr">pathname</span>:<span class="string">`/demo/<span class="subst">$&#123;<span class="variable language_">this</span>.state.id&#125;</span>/<span class="subst">$&#123;<span class="variable language_">this</span>.state.name&#125;</span>`</span>&#125;)</span><br><span class="line"><span class="comment">// 获取参数：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>     <span class="comment">//结果 &#123;id: &quot;88&quot;, name: &quot;Jack&quot;&#125;</span></span><br></pre></td></tr></table></figure>
这种感觉像vue的子路由，还有待进一步研究</li>
</ul>
<h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><ol>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> [state,setState] = <span class="title function_">useState</span>(&#123;<span class="attr">top</span>:<span class="number">0</span>,<span class="attr">bottom</span>:<span class="number">0</span>,<span class="attr">left</span>:<span class="number">0</span>,<span class="attr">right</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用条件渲染运算符-注意"><a href="#使用条件渲染运算符-注意" class="headerlink" title="使用条件渲染运算符&amp;&amp;注意"></a>使用条件渲染运算符<code>&amp;&amp;</code>注意</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;a &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>`&amp;&amp;`后面的元素会被跳过，但会返回false表达式<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码返回值<code>&lt;div&gt;0&lt;/div&gt;</code>，因为&amp;&amp;表达式前面的条件是0，而不是布尔值，0会作为值返回；</p>
<h3 id="react中css作用域"><a href="#react中css作用域" class="headerlink" title="react中css作用域"></a>react中css作用域</h3><p>react充分发扬自由编程，没有自己语法的特点，没有自己的css作用域，所以需要用到webpack中的<code>css-module</code>，一般是默认的，无需配置。</p>
<h3 id="无法获取自定义组件的-ref"><a href="#无法获取自定义组件的-ref" class="headerlink" title="无法获取自定义组件的 ref"></a>无法获取自定义组件的 ref</h3><blockquote>
<p>Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?</p>
</blockquote>
<p>这是因为默认情况下，自定义组件不会暴露它们内部 DOM 节点的 ref。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">&#123; value, onChange &#125;, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyInput</span>;</span><br></pre></td></tr></table></figure>
<p>这样，父级组件就可以得到子组件的 ref。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>scratchers</title>
    <url>/blog/2019/08/29/scratchers/</url>
    <content><![CDATA[<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        width: 100%;
        height: 100%;
        background: #dfdfdf;
        text-align: center;
    }

    .canvas-only-container h1 {
        padding-top: 50px;
    }

    .canvas-only-container #result {
        padding-top: 50px;
        color: red;
    }

    #canvasOnly {
        width: 240px;
        height: 137px;
        background: url('http://www.guoxh.com/blog/img/blog/special.jpg');
        background-size: 100% 100%;
        margin: 0 auto;
        margin-top: 50px;
    }
</style>

<body>
    <div class="canvas-only-container">
        <h1>刮奖</h1>
        <div id="canvasOnly"><canvas id="maskOnlyOne" width="240" height="137"></canvas></div>
        <h3 id="result"></h3>
    </div>
</body>

<script>
    var canvas = document.getElementById('maskOnlyOne');
    var context = canvas.getContext("2d");
    context.fillStyle = "#d1d1d1";
    context.fillRect(0, 0, 240, 137);
    context.globalCompositeOperation = 'destination-out';
    // 鼠标按下 增加mousemove的事件监听
    canvas.addEventListener('mousedown', drawArcMouseHandle);
    canvas.addEventListener('mouseup', function (event) {
        // 鼠标抬起之后，把mousemove的事件监听撤销掉
        this.removeEventListener('mousemove', mousemoveHandle);
    });
    // 根据鼠标的move画圆
    function drawArcMouseHandle(event) {
        event.preventDefault();
        event.target.addEventListener("mousemove", mousemoveHandle);
    }
    // 为了能够移除movesemove的事件需要单独处理一下
    function mousemoveHandle(event) {
        event.preventDefault();
        drawArcByPoint(event.pageX, event.pageY);
    }
    // 监听 touchmove
    canvas.addEventListener('touchmove', drawArcTouchHandle);
    // 根据触摸点画圆 
    function drawArcTouchHandle(event) {
        event.preventDefault();
        var touch = event.touches[0];
        drawArcByPoint(touch.pageX, touch.pageY);
    }
    // 根据某个点在canvas上画圆
    // x 坐标和 y 坐标 两个坐标是触摸点的坐标而不是画圆的圆心
    // 圆心通过计算得出
    function drawArcByPoint(x, y) {
        context.beginPath();
        context.arc(x - canvas.offsetLeft, y - canvas.offsetTop, 20, 0, Math.PI * 2);
        context.closePath();
        context.fillStyle = '#dddddd';
        context.fill();
        checkComplete();
    }
    // 判断是否完成刮奖 点数大于80%
    function checkComplete() {
        var imgData = context.getImageData(0, 0, 240, 137);
        var pxData = imgData.data; // 获取字节数据
        var len = pxData.length; // 获取字节长度
        var count = 0; // 记录透明点的个数
        // 主要的思想是 一个像素由四个数据组成，每个数据分别是 rgba() 所以第四个数据 a 表示alpha透明度
        for (var i = 0; i < len; i += 4) {
            var alpha = pxData[i + 3]; // 获取每个像素的透明度
            if (alpha < 10) {
                // 透明度小于10 
                count++;
            }
        }
        var percent = count / (len / 4); // 计算百分比
        // 如果百分比大于0.8 则表示成功
        if (percent >= 0.8) {
            showResult();
        }
    }
    // 显示刮奖结果
    function showResult(msg) {
        msg = msg || "刮奖结束";
        var res = document.getElementById('result');
        res.innerHTML = msg;
    }
</script>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper插件</title>
    <url>/blog/2016/09/19/swiper%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="vue中使用swiper"><a href="#vue中使用swiper" class="headerlink" title="vue中使用swiper"></a>vue中使用swiper</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--！！！！重中之重：swiper不能用v-show或者v-if来控制显示隐藏，这样初始化时不会添加swiper-slide-active这个类名，没有这个类名，就无法动态控制显示哪一个slide,也就是参数initialSlide，用visibility: hidden来控制显示隐藏--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面这个swiper实现了fixed布局下的swiper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;swiper-box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;hidden&#x27;:!showEqSwiper&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,i) in Data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;v.image_url&quot;</span> <span class="attr">alt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;v.title&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;v.description&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--关闭按钮--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;close-swiper&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/eq-close.png&quot;</span> <span class="attr">alt</span> @<span class="attr">click</span>=<span class="string">&quot;showEqSwiper = false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`$ npm install swiper`</span></span><br><span class="line"><span class="comment">//这种引入方式有bug，再微信PC端浏览器打不开，在部分老机型也打不开，比如iPhone6：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span><br><span class="line"><span class="comment">//另一种就是直接引入cdn文件（放在index.html中，当然这种是全局的）：</span></span><br><span class="line"><span class="comment">//而且如果想下载swiper.js到本地，还是会报错。。。暂时没找到原因；</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.0/js/swiper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//轮播</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">observer</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//将observe应用于Swiper的父元素。当Swiper的父元素变化时，例如window.resize，Swiper更新</span></span><br><span class="line">      <span class="attr">observeParents</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//centeredSlides设定为true时，active slide会居中，而不是默认状态下的居左。</span></span><br><span class="line">      <span class="attr">centeredSlides</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//设置slider容器能够同时显示的slides数量(carousel模式)。默认：1</span></span><br><span class="line">      <span class="attr">slidesPerView</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">      <span class="comment">//分页器使用，如果要自定义样式，style不能加scope属性！！！！！！！！！重中之重。。。让我搞半天</span></span><br><span class="line">      <span class="attr">pagination</span>: &#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&quot;.prepay-swiper-pagination&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//这个方法用来控制 swiper显示并且切换到指定slide</span></span><br><span class="line">    <span class="title class_">EqSwiper</span>(v) &#123;</span><br><span class="line">      <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">let</span> curIndex = v;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showEqSwiper</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">centeredSlides</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">slidesPerView</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">        <span class="comment">//initialSlide设定初始化时slide的索引。</span></span><br><span class="line">        <span class="attr">initialSlide</span>: curIndex</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swiper-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &amp;<span class="selector-class">.hidden</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.swiper-container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1.38rem</span>;</span><br><span class="line">    <span class="selector-class">.swiper-wrapper</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">transition-property</span>: transform;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">16rem</span>;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.38rem</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.35rem</span>;</span><br><span class="line">      <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0.38rem</span> <span class="number">0.38rem</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">h4</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: bold;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">34</span>, <span class="number">34</span>, <span class="number">34</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">1.9rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: bold;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0.63rem</span>;</span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">1.7rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.close-swiper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.72rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1.75rem</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">9rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移动端单文件中使用swiper"><a href="#移动端单文件中使用swiper" class="headerlink" title="移动端单文件中使用swiper"></a>移动端单文件中使用swiper</h3><p>需求环境：移动端环境，swiper.css, swiper.js, 如果用jquery的话，可以用jquery.js和swiper.jquery.js<br>以前也用过swiper做轮播，但是好多参数都不清楚，所以在这总结一下,有新的发现会更新</p>
<ul>
<li>动态获取接口数据来轮播有问题，loop为true时，循环滚动第一帧会被跳过，暂时解决方案是加setTimeout，vue环境，可以用nextTick</li>
<li>Vue.nextTick(function () {</li>
<li>&#x2F;&#x2F; DOM 更新了</li>
<li>})<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/Swiper/4.0.1/css/swiper.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.swiper-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 如果需要滚动条 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航等组件可以放在container之外 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.2.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/Swiper/3.3.0/js/swiper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span> (<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// direction: &#x27;vertical&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">loop</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">autoplay</span>: <span class="number">3000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//如果需要小圆点可点击</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">paginationClickable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//如果小圆点要变成数字(分式)，例如 1/3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// paginationType: &#x27;fraction&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果需要分页器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">pagination</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果需要前进后退按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">nextButton</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">prevButton</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//滑动后停止轮播问题：</span></span></span><br><span class="line"><span class="language-javascript">    autoplayDisableOnInteraction : <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果需要滚动条</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// scrollbar: &#x27;.swiper-scrollbar&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//一张图停止轮播，如果只有一个slide就销毁swiper //因为loop为true时会在图片前后各加一个slide所以最少为3</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (swiper.<span class="property">slides</span>.<span class="property">length</span> &lt;= <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          swiper.<span class="title function_">destroy</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>swiper</category>
      </categories>
      <tags>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>taro</title>
    <url>/blog/2023/10/17/taro/</url>
    <content><![CDATA[<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>1.开启 PreBundle 配置</p>
<blockquote>
<p>开发环境热更新占用内存可以大大降低，热更新所需时间也将大幅减少；生产模式也可以通过提前编译依赖，大幅提升部署效率。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** config/index.js */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">compiler</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;webpack5&#x27;</span>,</span><br><span class="line">    <span class="comment">// 仅 webpack5 支持依赖预编译配置</span></span><br><span class="line">    <span class="attr">prebundle</span>: &#123;</span><br><span class="line">      <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产预渲染"><a href="#生产预渲染" class="headerlink" title="生产预渲染"></a>生产预渲染</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /config/prod.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="attr">prerender</span>: &#123;</span><br><span class="line">      <span class="attr">match</span>: <span class="string">&#x27;pages/**&#x27;</span>, <span class="comment">// 所有以 `pages/` 开头的页面都参与预渲染 prerender</span></span><br><span class="line">      <span class="comment">// include: [&#x27;pages/index/index&#x27;], // 参与预渲染 prerender</span></span><br><span class="line">      <span class="attr">exclude</span>: [] <span class="comment">// 不参与预渲染 prerender</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>预渲染会增加包体积，所以除非万不得已，否则不应该使用，而且有可以替代预渲染的方案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomePage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">mounted</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* 等待组件载入，先渲染了首屏我们再渲染其它内容，降低首次渲染的数据量</span></span><br><span class="line"><span class="comment">     当 mounted 为 true 时，CompA, B, C 的 DOM 树才会作为 data 参与小程序渲染</span></span><br><span class="line"><span class="comment">     注意我们需要在 `componentDidMount()` 这个周期做这件事（对应 Vue 的 `ready()`），</span></span><br><span class="line"><span class="comment">    更早的生命周期 `setState()` 会与首次渲染的数据一起合并更新</span></span><br><span class="line"><span class="comment">     使用 nextTick 确保本次 setState 不会和首次渲染合并更新 */</span></span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">mounted</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FirstScreen</span> /&gt;</span> /* 假设我们知道这个组件会把用户的屏幕全部占据 */</span></span><br><span class="line"><span class="language-xml">        &#123;this.state.mounted &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="language-xml">            /* CompA, B, C 一开始并不会在首屏中显示 */</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">CompA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">CompB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">CompC</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="持久化缓存功能，提升二次编译速度，提升开发效率"><a href="#持久化缓存功能，提升二次编译速度，提升开发效率" class="headerlink" title="持久化缓存功能，提升二次编译速度，提升开发效率"></a>持久化缓存功能，提升二次编译速度，提升开发效率</h3><h3 id="同时打包多端代码，多端项目同时调试"><a href="#同时打包多端代码，多端项目同时调试" class="headerlink" title="同时打包多端代码，多端项目同时调试"></a>同时打包多端代码，多端项目同时调试</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//config/index.js</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">outputRoot</span>: <span class="string">`dist/<span class="subst">$&#123;process.env.TARO_ENV&#125;</span>`</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="半编译模式-——-CompileMode-通常用于节点较多的列表"><a href="#半编译模式-——-CompileMode-通常用于节点较多的列表" class="headerlink" title="半编译模式 —— CompileMode 通常用于节点较多的列表"></a>半编译模式 —— CompileMode 通常用于节点较多的列表</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//config/index.js</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="attr">experimental</span>: &#123;</span><br><span class="line">      <span class="attr">compileMode</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后只需要给 Taro 基础组件添加 compileMode 属性，该组件及其 children 将会被编译为单独的小程序模板：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GoodsItem</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">compileMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常见问题：</p>
<ol>
<li>编译出的模板文件会增加包体积</li>
<li>只能优化部分语法</li>
</ol>
<h3 id="优化主包体积大小"><a href="#优化主包体积大小" class="headerlink" title="优化主包体积大小"></a>优化主包体积大小</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//config/index.js</span></span><br><span class="line"><span class="comment">/*这样简单配置之后，可以避免主包没有引入的 module 被提取到commonChunks中，</span></span><br><span class="line"><span class="comment">该功能会在打包时分析 module 和 chunk 的依赖关系，</span></span><br><span class="line"><span class="comment">筛选出主包没有引用到的 module 把它提取到分包内*/</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">optimizeMainPackage</span>: &#123;</span><br><span class="line">      <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加环境字段"><a href="#添加环境字段" class="headerlink" title="添加环境字段"></a>添加环境字段</h3><p>用taro init生成项目时，根目录下会发现有三个<code>.env.xxx</code>文件。<br>因为默认打包时查找的文件是<code>NODE_ENV</code>的值，所以需要把<code>.env.dev</code>和<code>.env.prod</code>文件改为<code>.env.development</code>和<code>.env.production</code>;<br>或者可以在<code>package.json</code>文件中修改命令<code>&quot;dev:weapp&quot;: taro build --type weapp --watch --mode dev</code>;<br>可以发现命令中不加<code>--mode dev</code>时默认<code>mode</code>为<code>development</code>;<br>两种方案皆可。<br>然后就可以在<code>.env.xxx</code>文件中添加对应环境变量字段：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># 配置文档参考 https:<span class="comment">//taro-docs.jd.com/docs/next/env-mode-config</span></span><br><span class="line">TARO_APP_ID=<span class="string">&quot;开发环境小程序APPID&quot;</span></span><br><span class="line">TARO_APP_API=<span class="string">&quot;https://api-dev.com&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果想用除<code>development</code>和<code>production</code>之外的环境变量，如<code>test</code>，则需要在对应<code>.env.test</code>环境变量配置文件中增加如<code>TARO_APP_ENV</code>字段来区分。<br>请注意，只有以<code>TARO_APP_</code>开头的变量将通过<code>webpack.DefinePlugin</code>静态地嵌入到客户端侧的代码中。这是为了避免和系统内置环境变量冲突。</p>
</blockquote>
<h3 id="Uncaught-Error-Rendered-fewer-hooks-than-expected-This-may-be-caused-by-an-accidental-early-return-statement"><a href="#Uncaught-Error-Rendered-fewer-hooks-than-expected-This-may-be-caused-by-an-accidental-early-return-statement" class="headerlink" title="Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement."></a>Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.</h3><p>不要在循环，条件或嵌套函数中调用Hook。相反，始终在React函数的顶层使用Hooks。通过遵循此规则，您可以确保每次组件呈现时都以相同的顺序调用Hook。这就是允许React在多个useState和useEffect调用之间正确保留Hook状态的原因。</p>
<p>选择在没有判断条件的顶层使用useContext、useState、useEffect、userHistory、useTransaction等，将获取的值，作为参数传给子组件使用。</p>
<h3 id="多个页面引用同一个自定义组件时，页面不显示"><a href="#多个页面引用同一个自定义组件时，页面不显示" class="headerlink" title="多个页面引用同一个自定义组件时，页面不显示"></a>多个页面引用同一个自定义组件时，页面不显示</h3><p>开启<code>optimizeMainPackage</code>打包优化导致的。。。暂时不知道原因。。。估计是官方bug</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>两个参数，第一个参数为函数，函数内执行初始化代码，可以返回一个函数，用来组件销毁时执行；<br>第二个参数为数组，传值则 Effect 在 初始渲染后以及依赖项变更的重新渲染后 运行；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, [a, b]); <span class="comment">// 如果 a 或 b 不同则会再次运行</span></span><br></pre></td></tr></table></figure>
<p>传空数组，Effect 仅在 初始渲染后 运行；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, []); </span><br><span class="line"><span class="comment">// 不会再次运行（开发环境下除外）</span></span><br><span class="line"><span class="comment">/* 为了 帮助你发现 bug，在开发环境下，React 在运行 setup 之前会额外运行一次setup 和 cleanup。</span></span><br><span class="line"><span class="comment">这是一个压力测试，用于验证 Effect 逻辑是否正确实现。</span></span><br><span class="line"><span class="comment">如果这会导致可见的问题，那么你的 cleanup 函数就缺少一些逻辑。</span></span><br><span class="line"><span class="comment">cleanup 函数应该停止或撤消 setup 函数正在执行的任何操作 */</span></span><br></pre></td></tr></table></figure>
<p>如果完全不传递依赖数组，则 Effect 会在组件的 每次单独渲染（和重新渲染）之后 运行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;); <span class="comment">// 总是再次运行</span></span><br></pre></td></tr></table></figure>

<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>用于配置目录别名，从而方便书写代码引用路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//config/index.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;@/components&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;@/utils&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//index.jsx</span></span><br><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;@/components/A&#x27;</span></span><br></pre></td></tr></table></figure>
<p>为了让编辑器（VS Code）不报错，并继续使用自动路径补全的功能（F12能定位到引用文件并打开）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//项目根目录下新建文件 jsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">//根路径</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/components/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/components/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//相对路径，如果有更深引用，需要加 /*</span></span><br><span class="line">      <span class="attr">&quot;@/utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/utils/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="mobx中请求异步赋值警告"><a href="#mobx中请求异步赋值警告" class="headerlink" title="mobx中请求异步赋值警告"></a>mobx中请求异步赋值警告</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; runInAction &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>;</span><br><span class="line">getAdvData = <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> api.<span class="title function_">http</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/xjb/city/advList&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">//需要把赋值操作放在runInAction回调中</span></span><br><span class="line">  <span class="title function_">runInAction</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">banner</span> = data.<span class="property">result</span>.<span class="property">first_banner</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cipian</span> = data.<span class="property">result</span>.<span class="property">first_cipian</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">jingang</span> = data.<span class="property">result</span>.<span class="property">first_jingang</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = data.<span class="property">result</span>.<span class="property">jiabo_adress</span>[<span class="number">0</span>].<span class="property">image_url</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">yunying</span> = data.<span class="property">result</span>.<span class="property">first_yunying</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译taro警告Error-chunk-common-mini-css-extract-plugin"><a href="#编译taro警告Error-chunk-common-mini-css-extract-plugin" class="headerlink" title="编译taro警告Error: chunk common [mini-css-extract-plugin]"></a>编译taro警告<code>Error: chunk common [mini-css-extract-plugin]</code></h3><p>这是由于引用组件顺序不同，打包时会多打包一次，就会发出警告</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="attr">miniCssExtractPluginOptions</span>: &#123;</span><br><span class="line">      <span class="attr">ignoreOrder</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="上滑加载page不更新问题"><a href="#上滑加载page不更新问题" class="headerlink" title="上滑加载page不更新问题"></a>上滑加载page不更新问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果直接声明 let page = 1;在事件回调中page+=1;始终只能拿到page=2，应该是组件更新时，把page变量直接重置了；</span></span><br><span class="line"><span class="comment">//如果用useState钩子，不能在事件中更新值，因为不能及时拿到更新后的page，所以要提前更新page，放在接口调用方法中：</span></span><br><span class="line"><span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([]);</span><br><span class="line"><span class="keyword">const</span> [hasData, setHasData] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> [pages, setPages] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params">page = <span class="number">1</span>, refresh = <span class="literal">true</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//提前更新page</span></span><br><span class="line">  <span class="title function_">setPages</span>(page);</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> api.<span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/api/getdata&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; page &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">    <span class="title function_">setList</span>(res.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">setList</span>(list.<span class="title function_">concat</span>(res.<span class="property">data</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setHasData</span>(res.<span class="property">data</span>?.<span class="property">length</span> &lt; <span class="number">10</span> ? <span class="literal">false</span> : <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上滑触底</span></span><br><span class="line"><span class="title function_">useReachBottom</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasData) &#123;</span><br><span class="line">    <span class="title function_">getData</span>(currentTab, pages + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="ios小程序不支持直接写backdrop-filter，需要加上浏览器前缀-webkit-backdrop-filter"><a href="#ios小程序不支持直接写backdrop-filter，需要加上浏览器前缀-webkit-backdrop-filter" class="headerlink" title="ios小程序不支持直接写backdrop-filter，需要加上浏览器前缀-webkit-backdrop-filter"></a>ios小程序不支持直接写backdrop-filter，需要加上浏览器前缀-webkit-backdrop-filter</h3><h3 id="ios偶发自定义tabbar点击没反应问题"><a href="#ios偶发自定义tabbar点击没反应问题" class="headerlink" title="ios偶发自定义tabbar点击没反应问题"></a>ios偶发自定义tabbar点击没反应问题</h3><p>经过真机调试，发现自定义tabbar在来回切换，会有一定几率点不到，因为tabbar被挤出了页面，掉在最下面，虽然还能看到，导致点不到</p>
<blockquote>
<p>原因应该是我这个小程序其他页面都是自定义头部，就这个点不到的页面是原生头部，切换过快计算错误，导致掉下去</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//page show</span></span><br><span class="line"><span class="title function_">useDidShow</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//触发一下滚动，解决ios偶发tabbar点不中bug</span></span><br><span class="line">  <span class="title class_">Taro</span>.<span class="title function_">pageScrollTo</span>(&#123;</span><br><span class="line">    <span class="attr">scrollTop</span>: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="跳过编译某个css属性"><a href="#跳过编译某个css属性" class="headerlink" title="跳过编译某个css属性"></a>跳过编译某个css属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="comment">/* autoprefixer: ignore next */</span></span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 或者忽略段落： */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* autoprefixer: off */</span></span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line">  <span class="comment">/* autoprefixer: on */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="适配小程序和H5安全距离的tabbar"><a href="#适配小程序和H5安全距离的tabbar" class="headerlink" title="适配小程序和H5安全距离的tabbar"></a>适配小程序和H5安全距离的tabbar</h3><p>小程序：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tabbar</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">calc</span>(<span class="number">10px</span> + <span class="built_in">env</span>(safe-area-inset-bottom));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>H5：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,viewport-fit=cover&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">viewport-fit参数有三个值：</span></span><br><span class="line"><span class="comment">contain：可视窗口完全包含网页内容</span></span><br><span class="line"><span class="comment">cover：网页内容完全覆盖可视窗口</span></span><br><span class="line"><span class="comment">auto：默认值，此值不影响初始布局视图端口，并且整个web页面都是可查看的 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决移动端设置放大字体，导致页面也被放大显示不全"><a href="#解决移动端设置放大字体，导致页面也被放大显示不全" class="headerlink" title="解决移动端设置放大字体，导致页面也被放大显示不全"></a>解决移动端设置放大字体，导致页面也被放大显示不全</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /config/index.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">h5</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">       <span class="attr">pxtransform</span>: &#123;</span><br><span class="line">        <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">config</span>: &#123;</span><br><span class="line">          <span class="attr">baseFontSize</span>: <span class="number">50</span>, <span class="comment">//H5 字体尺寸大小基准值( Default: 20)。</span></span><br><span class="line">          <span class="attr">maxRootSize</span>: <span class="number">100</span> <span class="comment">//H5 根节点 font-size 的最大值(Default: 40)。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样配置好处有2：<br>1.解决了手机设置了放大，页面也被放大显示不全的问题；<br>2.调试看元素尺寸清晰，设计稿标准尺寸下，比如元素350px，则布局中换算的为3.5rem，直观又不用手动换算。</p>
<h3 id="compression-webpack-plugin开启gzip压缩（服务器端其实也可以开启gzip，无需前端配置）"><a href="#compression-webpack-plugin开启gzip压缩（服务器端其实也可以开启gzip，无需前端配置）" class="headerlink" title="compression-webpack-plugin开启gzip压缩（服务器端其实也可以开启gzip，无需前端配置）"></a>compression-webpack-plugin开启gzip压缩（服务器端其实也可以开启gzip，无需前端配置）</h3><h3 id="Taro-setClipboardData"><a href="#Taro-setClipboardData" class="headerlink" title="Taro.setClipboardData"></a>Taro.setClipboardData</h3><p>Taro.setClipboardData方法不能在异步回调中使用，ios浏览器H5会失效</p>
<h3 id="全局注入-scss"><a href="#全局注入-scss" class="headerlink" title="全局注入 scss"></a>全局注入 scss</h3><ul>
<li>config&#x2F;index.js文件中：<br>单文件路径形式<br>当只有 resource 字段时，可以传入 scss 文件的绝对路径。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">sass</span>: &#123;</span><br><span class="line">    <span class="attr">resource</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/styles/variable.scss&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
多文件路径形式<br>当只有 resource 字段时，也可以传入一个路径数组。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">sass</span>: &#123;</span><br><span class="line">    <span class="attr">resource</span>: [</span><br><span class="line">      path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/styles/variable.scss&#x27;</span>),</span><br><span class="line">      path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/styles/mixins.scss&#x27;</span>),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="H5里滑动弹层禁止弹层下面的页面滚动"><a href="#H5里滑动弹层禁止弹层下面的页面滚动" class="headerlink" title="H5里滑动弹层禁止弹层下面的页面滚动"></a>H5里滑动弹层禁止弹层下面的页面滚动</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">touchMove</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">View</span> catchMove=&#123;<span class="literal">true</span>&#125; onTouchMove=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">touchMove</span>(e)&#125;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="title class_">View</span>&gt;</span><br><span class="line"><span class="comment">// catchMove=&#123;true&#125; 作用在小程序环境里</span></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>taro</category>
      </categories>
      <tags>
        <tag>taro</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app</title>
    <url>/blog/2023/10/17/uni-app/</url>
    <content><![CDATA[<h3 id="条件编译快捷命令"><a href="#条件编译快捷命令" class="headerlink" title="条件编译快捷命令"></a>条件编译快捷命令</h3><p>选中要条件编译的代码块，<code>ctrl + alt + /</code>即可生成正确注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef APP</span></span><br><span class="line">uni.<span class="title function_">hideNavigationBarLoading</span>();</span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>

<h3 id="滚动一屏，sticky失效"><a href="#滚动一屏，sticky失效" class="headerlink" title="滚动一屏，sticky失效"></a>滚动一屏，sticky失效</h3><p>需要把 sticky元素放在 一个 view 中，不能放在 template 中  </p>
<h3 id="app端选择地图导航"><a href="#app端选择地图导航" class="headerlink" title="app端选择地图导航"></a>app端选择地图导航</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">toMapAPP</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    lat,</span><br><span class="line">    lng,</span><br><span class="line">    shopName,</span><br><span class="line">    name</span><br><span class="line">  &#125; = data;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (plus.<span class="property">os</span>.<span class="property">name</span> == <span class="string">&quot;Android&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//判断是安卓端</span></span><br><span class="line">    plus.<span class="property">nativeUI</span>.<span class="title function_">actionSheet</span>(&#123;</span><br><span class="line">        <span class="comment">//选择菜单</span></span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;选择地图应用&quot;</span>,</span><br><span class="line">        <span class="attr">cancel</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">buttons</span>: [&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;百度地图&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;高德地图&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (e.<span class="property">index</span>) &#123;</span><br><span class="line">          <span class="comment">//下面是拼接url,不同系统以及不同地图都有不同的拼接字段</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            url =</span><br><span class="line">              <span class="string">`baidumap://map/marker?location=<span class="subst">$&#123;lat&#125;</span>,<span class="subst">$&#123;lng&#125;</span>&amp;title=<span class="subst">$&#123;name||shopName&#125;</span>&amp;src=taoliangche&amp;coord_type=gcj02`</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            url =</span><br><span class="line">              <span class="string">`androidamap://arroundpoi?sourceApplication=softname&amp;keywords=<span class="subst">$&#123;name||shopName&#125;</span>&amp;lat=<span class="subst">$&#123;lat&#125;</span>&amp;lon=<span class="subst">$&#123;lng&#125;</span>&amp;dev=0`</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (url != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">          url = <span class="built_in">encodeURI</span>(url);</span><br><span class="line">          plus.<span class="property">runtime</span>.<span class="title function_">openURL</span>(url, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            plus.<span class="property">nativeUI</span>.<span class="title function_">alert</span>(<span class="string">&quot;本机未安装指定的地图应用&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// iOS上获取本机是否安装了百度高德地图，需要在manifest里配置</span></span><br><span class="line">    <span class="comment">// 在manifest.json文件app-plus-&gt;distribute-&gt;apple-&gt;urlschemewhitelist节点下添加</span></span><br><span class="line">    <span class="comment">//（如urlschemewhitelist:&quot;iosamap&quot;,&quot;baidumap&quot;）</span></span><br><span class="line">    plus.<span class="property">nativeUI</span>.<span class="title function_">actionSheet</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;选择地图应用&quot;</span>,</span><br><span class="line">        <span class="attr">cancel</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">buttons</span>: [</span><br><span class="line">          <span class="comment">// 	&#123;</span></span><br><span class="line">          <span class="comment">// 	title: &quot;腾讯地图&quot;</span></span><br><span class="line">          <span class="comment">// &#125;,</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;百度地图&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;高德地图&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (e.<span class="property">index</span>) &#123;</span><br><span class="line">          <span class="comment">// case 1:</span></span><br><span class="line">          <span class="comment">// 	url = `qqmap://map/geocoder?coord=$&#123;lat&#125;,$&#123;lng&#125;&amp;referer=xxx`;</span></span><br><span class="line">          <span class="comment">// 	break;</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            url =</span><br><span class="line">              <span class="string">`baidumap://map/direction?origin=&#123;&#123;我的位置&#125;&#125;&amp;destination=latlng:<span class="subst">$&#123;lat&#125;</span>,<span class="subst">$&#123;lng&#125;</span>|name=<span class="subst">$&#123;shopName||name&#125;</span>&amp;mode=driving&amp;coord_type=bd09ll`</span>;</span><br><span class="line">            <span class="comment">// coord_type=bd09ll：坐标系类型，必须与传入的经纬度编码一致。</span></span><br><span class="line">            <span class="comment">// origin=&#123;&#123;我的位置&#125;&#125;：固定写法，表示以用户当前位置为起点。</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            url = <span class="string">`iosamap://path?sourceApplication=掏靓车&amp;keywords=<span class="subst">$&#123;shopName||name&#125;</span>&amp;dlat=<span class="subst">$&#123;lat&#125;</span>&amp;dlon=<span class="subst">$&#123;lng&#125;</span>&amp;dev=0&amp;style=0`</span>;</span><br><span class="line">              <span class="comment">// lat/lon：目标经纬度（必须使用高德地图的 ​​GCJ-02​​ 坐标系）。</span></span><br><span class="line">              <span class="comment">// dev：坐标系类型，0 表示 GCJ-02，1 表示 GPS（WGS-84）。</span></span><br><span class="line">              <span class="comment">// style：导航方式，2 表示驾车，0 表示速度最快策略。</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (url != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">          url = <span class="built_in">encodeURI</span>(url);</span><br><span class="line">          plus.<span class="property">runtime</span>.<span class="title function_">openURL</span>(url, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            plus.<span class="property">nativeUI</span>.<span class="title function_">alert</span>(<span class="string">&quot;本机未安装指定的地图应用&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="app分享微信小程序"><a href="#app分享微信小程序" class="headerlink" title="app分享微信小程序"></a>app分享微信小程序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分享到微信小程序</span></span><br><span class="line"><span class="title function_">share</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// #ifdef APP</span></span><br><span class="line">  uni.<span class="title function_">share</span>(&#123;</span><br><span class="line">    <span class="attr">provider</span>: <span class="string">&quot;weixin&quot;</span>,</span><br><span class="line">    <span class="attr">scene</span>: <span class="string">&quot;WXSceneSession&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">miniProgram</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;原始小程序 id&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/pages/home/home?id=&#x27;</span> + <span class="variable language_">this</span>.<span class="property">cid</span> + <span class="string">&#x27;&amp;uid=&#x27;</span> + uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;uid&#x27;</span>),</span><br><span class="line">      <span class="attr">type</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">webUrl</span>: <span class="string">&quot;www.123.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">summary</span>: <span class="string">&quot;描述&quot;</span>,</span><br><span class="line">    <span class="attr">imageUrl</span>: <span class="string">&quot;share.png&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li>报错：应用与小程序未在同一个开放平台下：因为直接运行到标准基座了，这个时候可以打自定义基座</li>
<li>报错：share:fail [Share微信分享:-3]Unable to send, <a href="https://ask.dcloud.net.cn/article/287">https://ask.dcloud.net.cn/article/287</a><br>原因一 miniProgram中的webUrl 未填写，随便填写一个地址就行了<br>原因二 uni.share 中的imageUrl 图片大小过大，应该小于20kb</li>
<li>报错：不支持的分享类型<br>检查 uni.share 中miniProgram参数中的id要填写小程序原始id，不是小程序的appid，原始 id在小程序后台-账号设置-账号信息-原始ID</li>
</ol>
]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-axios请求+封装</title>
    <url>/blog/2019/03/26/vue-axios%E8%AF%B7%E6%B1%82-%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h3 id="axios实现vue异步请求-封装"><a href="#axios实现vue异步请求-封装" class="headerlink" title="axios实现vue异步请求 + 封装"></a>axios实现vue异步请求 + 封装</h3><blockquote>
<p>安装axios &amp;&amp; vue-axios : npm install –save axios vue-axios</p>
</blockquote>
<h4 id="1-封装不同类型的请求（get-post-）-api-helpers-js配置"><a href="#1-封装不同类型的请求（get-post-）-api-helpers-js配置" class="headerlink" title="1.封装不同类型的请求（get,post..）,api/helpers.js配置:"></a>1.封装不同类型的请求（get,post..）,<code>api/helpers.js</code>配置:</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueAxios</span> <span class="keyword">from</span> <span class="string">&quot;vue-axios&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAxios</span>, axios);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">request</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//定义请求接口地址对象，一个是开发环境地址，另一个就是线上地址</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">urlMap</span> = &#123;</span><br><span class="line">            <span class="attr">development</span>: <span class="string">&#x27;/dev&#x27;</span>,</span><br><span class="line">            <span class="attr">production</span>: <span class="string">&#x27;/product&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get请求</span></span><br><span class="line">    <span class="title class_">Get</span>(obj) &#123;</span><br><span class="line">        <span class="comment">//封装一层promise，一来可以把接口数据.then出去，二来解决嵌套请求的回调问题</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//发起axios请求</span></span><br><span class="line">            <span class="title class_">Vue</span>.<span class="title function_">axios</span>(</span><br><span class="line">                <span class="comment">//利用ES5的浅拷贝Object.assign自动增删传入的对象</span></span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;</span><br><span class="line">                    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">                    <span class="comment">//设置请求头来区分请求数据类型，formdata || json</span></span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">//`baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL</span></span><br><span class="line">                    <span class="attr">baseURL</span>: <span class="variable language_">this</span>.<span class="property">urlMap</span>[process.<span class="property">env</span>.<span class="property">NODE_ENV</span>]</span><br><span class="line">                &#125;, obj)</span><br><span class="line">            ).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(e)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    <span class="title class_">Post</span>(obj) &#123;</span><br><span class="line">        <span class="comment">//封装一层promise，一来可以把接口数据.then出去，二来解决嵌套请求的回调问题</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Vue</span>.<span class="title function_">axios</span>(</span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;</span><br><span class="line">                    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">baseURL</span>: <span class="variable language_">this</span>.<span class="property">urlMap</span>[process.<span class="property">env</span>.<span class="property">NODE_ENV</span>],</span><br><span class="line">                    <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">                    <span class="comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">                    <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">                    <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 对 data 进行form-data处理，这个只针对后端还需要formData格式数据，如果是json则简单许多，无需区分请求方式</span></span><br><span class="line">                        <span class="keyword">let</span> rData = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">                            rData += <span class="built_in">encodeURIComponent</span>(i) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[i]) + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//字符串最后多了个&amp;符号，截取掉</span></span><br><span class="line">                        <span class="keyword">return</span> rData.<span class="title function_">substr</span>(<span class="number">0</span>,rData.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;, obj)</span><br><span class="line">            ).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(e)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    request</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-具体某接口的请求封装：api-indexApi-js配置："><a href="#2-具体某接口的请求封装：api-indexApi-js配置：" class="headerlink" title="2.具体某接口的请求封装：api&#x2F;indexApi.js配置："></a>2.具体某接口的请求封装：api&#x2F;indexApi.js配置：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;../js/helper&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">homeApi</span> <span class="keyword">extends</span> <span class="title class_ inherited__">request</span> &#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//调用super方法，使子类自己的this对象得到父类同样的实例属性和方法</span></span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其中的this指向子类的实例，因为上面已经完成对父类的继承</span></span><br><span class="line">    <span class="title function_">getList</span>(<span class="params">data, handle</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">Get</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/List?page=&#x27;</span> + data.<span class="property">pageId</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">handle</span>(res)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getOther</span>(<span class="params">data, handle</span>) &#123;</span><br><span class="line">        <span class="comment">//data:&#x27;mobile=&#x27;+data.mobile是form-data数据类型，&#123;data:&#123;mobile:xxxxxxx&#125;&#125;为json类型</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">Post</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/getOther&#x27;</span> ,<span class="attr">data</span>:<span class="string">&#x27;mobile=&#x27;</span>+data.<span class="property">mobile</span>&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">handle</span>(res)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    homeApi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-封装后的具体应用：app-vue"><a href="#3-封装后的具体应用：app-vue" class="headerlink" title="3.封装后的具体应用：app.vue:"></a>3.封装后的具体应用：app.vue:</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-wrap&quot;</span>&gt;</span>121212<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;homeApi&#125; <span class="keyword">from</span> <span class="string">&quot;../assets/api/indexApi&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Api</span> = <span class="keyword">new</span> <span class="title function_">homeApi</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//get请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Api</span>.<span class="title function_">getList</span>(</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageId</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//post请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Api</span>.<span class="title function_">getOther</span>(</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mobile</span>:<span class="variable constant_">XXXXXXXX</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>题外：<br>export也可以写成export default XXX,<br>如：<code>export &#123;homeApi&#125;  = export default homeApi</code></li>
</ul>
<p>引用时写成：<br><code>import homeApi from &quot;../assets/api/indexApi&quot;;</code><br><code>export</code>可以写多个，<code>export default</code>只能写一个，所以这就是为什么<code>export</code>输出的是对象，而<code>export default</code>输出的是变量或者类，<br>然后引用<code>import</code>的时候也同理使用<code>export</code>输出时，引用的是对象，而使用<code>export default</code>输出时，引用的是变量或者类<br><code>export</code>可以只输出需要用到的方法，<code>export default</code>则是全部输出</p>
<h2 id="重中之重：有些浏览器不支持header头设置为-全部，否则会报network-error，请求失败，要具体到每个参数"><a href="#重中之重：有些浏览器不支持header头设置为-全部，否则会报network-error，请求失败，要具体到每个参数" class="headerlink" title="重中之重：有些浏览器不支持header头设置为*全部，否则会报network error，请求失败，要具体到每个参数"></a>重中之重：有些浏览器不支持header头设置为*全部，否则会报network error，请求失败，要具体到每个参数</h2>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router记录</title>
    <url>/blog/2018/07/05/vue-router%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p><router-link>组件使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-if</span>=<span class="string">&quot;!item.isSubmit&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;claimOrder?orderNo=&#x27;+item.orderno+&#x27;&amp;caroid=&#x27;+$route.query.caroid+&#x27;&amp;id=&#x27;+item.id+&#x27;&amp;Ins=&#x27;+$route.query.Ins&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>继续上传<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><router-link> 组件比起写死的 <code>&lt;a href=&quot;...&quot;&gt;&lt;/a&gt;</code>会好一些，理由如下：<br>1.无论是 HTML5 history 模式还是 hash 模式，它的表现行为一致，所以，当你要切换路由模式，或者在 IE9 降级使用 hash 模式，无须作任何变动。<br>2.在 HTML5 history 模式下，router-link 会守卫点击事件，让浏览器不再重新加载页面。<br>3.当你在 HTML5 history 模式下使用 base 选项之后，所有的 to 属性都不需要写（基路径）了。</p>
<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><blockquote>
<p>非懒加载写法：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">HelloWorld</span>,</span><br><span class="line">      <span class="attr">meta</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;svip&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>路由懒加载写法：</p>
</blockquote>
<p>1.利用ES6 promise和webpack2动态import实现异步组件懒加载：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>2.利用webpack1中的 <code>require.ensure()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require.ensure() 是webpack中用来代码分割,把每个js大包打包成不同文件，缩小文件体积；</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">commentOrder</span> = resolve =&gt; &#123;</span><br><span class="line">    <span class="built_in">require</span>.<span class="title function_">ensure</span>([], <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="built_in">require</span>(<span class="string">&#x27;../components/userComment/comment.vue&#x27;</span>)), <span class="string">&#x27;/commentOrder&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [    </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/commentOrder&#x27;</span>, </span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;commentOrder&#x27;</span>, </span><br><span class="line">            <span class="attr">component</span>: &#123;<span class="attr">commentOrder</span>:commentOrder&#125;</span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>文中提到的require.ensure()详细见<a href="http://www.css88.com/doc/webpack2/guides/code-splitting-require/">http://www.css88.com/doc/webpack2/guides/code-splitting-require/</a></p>
<h3 id="路由跳转时更改页面title"><a href="#路由跳转时更改页面title" class="headerlink" title="路由跳转时更改页面title"></a>路由跳转时更改页面title</h3><p>1.router.js文件中给每个path添加meta:{}字段，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Bar</span>,</span><br><span class="line">          <span class="comment">// a meta field</span></span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;详情页&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>2.js入口文件main.js中添加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">    <span class="comment">// this route requires auth, check if logged in</span></span><br><span class="line">    <span class="comment">// if not, redirect to login page.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>() <span class="comment">// 确保一定要调用 next()</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="this-router-xxx访问路由"><a href="#this-router-xxx访问路由" class="headerlink" title="this.$router.xxx访问路由"></a>this.$router.xxx访问路由</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2.x环境搭建</title>
    <url>/blog/2019/03/25/vue2.x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="1-全局安装-vue-cli"><a href="#1-全局安装-vue-cli" class="headerlink" title="1.全局安装 vue-cli"></a>1.全局安装 vue-cli</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install --global vue-cli</span><br></pre></td></tr></table></figure>

<h3 id="2-创建一个基于-webpack-模板的新项目"><a href="#2-创建一个基于-webpack-模板的新项目" class="headerlink" title="2.创建一个基于 webpack 模板的新项目"></a>2.创建一个基于 webpack 模板的新项目</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cli2.X快速构建项目：</span><br><span class="line">$ vue init webpack vue-project</span><br><span class="line"></span><br><span class="line">cli3.<span class="number">0</span>快速构建项目：</span><br><span class="line">vue create vue-project；</span><br></pre></td></tr></table></figure>

<h3 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定位vue项目文件夹下</span><br><span class="line">$ cd vue-project</span><br><span class="line">//安装依赖</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="4-安装scss-SCSS-是-Sass-3-引入新的语法-并且继承了-Sass-的强大功能"><a href="#4-安装scss-SCSS-是-Sass-3-引入新的语法-并且继承了-Sass-的强大功能" class="headerlink" title="4.安装scss(SCSS 是 Sass 3 引入新的语法,并且继承了 Sass 的强大功能)"></a>4.安装scss(SCSS 是 Sass 3 引入新的语法,并且继承了 Sass 的强大功能)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//直接安装sass可以使用scss</span><br><span class="line">npm install --save-dev sass-loader</span><br><span class="line">//sass-loader依赖于node-sass</span><br><span class="line">npm install --save-dev node-sass</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scope&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里需要注意！！如果node版本14以上，node-sass会出现不支持情况，这里执行<code>npm rebuild node-sass</code>可以解决，如果还不能解决，可以看下node-sass版本号：<br><img src="http://www.guoxh.com/blog/img/blog/node-sass.png"></li>
</ul>
<h3 id="vue打包静态资源js，css路径不对的解决办法"><a href="#vue打包静态资源js，css路径不对的解决办法" class="headerlink" title="vue打包静态资源js，css路径不对的解决办法"></a>vue打包静态资源js，css路径不对的解决办法</h3><p>打开config&#x2F;index.js，将其中的build配置下的assetsPublicPath值改为’.&#x2F;’</p>
<h3 id="vue-cli2-X不同环境配置不同api域名"><a href="#vue-cli2-X不同环境配置不同api域名" class="headerlink" title="vue-cli2.X不同环境配置不同api域名"></a>vue-cli2.X不同环境配置不同api域名</h3><p>1.安装cross-env</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save-dev cross-env</span><br></pre></td></tr></table></figure>

<p>2.修改各环境下的参数<br>在config&#x2F;目录下添加test.env.js<br>修改prod.env.js里的内容，修改后的内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="attr">NODE_ENV</span>: <span class="string">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class="line"> <span class="attr">EVN_CONFIG</span>:<span class="string">&#x27;&quot;prod&quot;&#x27;</span>,</span><br><span class="line"> <span class="attr">API_ROOT</span>:<span class="string">&#x27;&quot;https://这里是正式域名.com&quot;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.修改test.env.js文件内容，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="attr">NODE_ENV</span>: <span class="string">&#x27;&quot;testing&quot;&#x27;</span>,</span><br><span class="line"> <span class="attr">EVN_CONFIG</span>:<span class="string">&#x27;&quot;test&quot;&#x27;</span>,</span><br><span class="line"> <span class="attr">API_ROOT</span>:<span class="string">&#x27;&quot;https://这里是测试域名test.com/&quot;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.对dev.env.js文件内容进行修改，修改后的内容如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(prodEnv, &#123;</span><br><span class="line">  <span class="attr">NODE_ENV</span>: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  <span class="attr">VN_CONFIG</span>: <span class="string">&#x27;&quot;dev&quot;&#x27;</span>,</span><br><span class="line">  <span class="attr">API_ROOT</span>: <span class="string">&#x27;&quot;https://ticket-api.jia-expo.com/&quot;&#x27;</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>dev环境配制了服务代理，API_ROOT是配制的代理地址</p>
</blockquote>
<p>5.修改项目package.json文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node build/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production env_config=test node build/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production env_config=prod node build/build.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>6.修改config&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加test prod 环境的配制</span></span><br><span class="line">    <span class="attr">prodEnv</span>: <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>),</span><br><span class="line">    <span class="attr">testEnv</span>: <span class="built_in">require</span>(<span class="string">&#x27;./test.env&#x27;</span>),</span><br></pre></td></tr></table></figure>

<p>7.在webpackage.prod.conf.js中使用构建环境参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 个性env常量的定义</span></span><br><span class="line"><span class="keyword">const</span> env = config.<span class="property">build</span>[process.<span class="property">env</span>.<span class="property">env_config</span> + <span class="string">&#x27;Env&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>8.调整build&#x2F;build.js　</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./check-versions&#x27;</span>)()</span><br><span class="line"><span class="comment">// process.env.NODE_ENV = &#x27;production&#x27;  // 注释掉的代码</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">&#x27;rimraf&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.prod.conf&#x27;</span>)</span><br><span class="line"><span class="comment">// 修改spinner的定义</span></span><br><span class="line"><span class="comment">// const spinner = ora(&#x27;building for production...&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;building for &#x27;</span> + process.<span class="property">env</span>.<span class="property">NODE_ENV</span> + <span class="string">&#x27; of &#x27;</span> + process.<span class="property">env</span>.<span class="property">env_config</span>+ <span class="string">&#x27; mode...&#x27;</span> )</span><br><span class="line">spinner.<span class="title function_">start</span>()</span><br><span class="line"><span class="comment">//其它内容不需要做任何调整 ...</span></span><br></pre></td></tr></table></figure>

<p>9.大功告成<br>request中就可以区分接口域名了变量：process.env.API_ROOT<br>执行<code>npm run build:test</code>打包的就是测试环境<br>执行<code>npm run build:prod</code>打包的就是生产环境</p>
<h3 id="vue-cli-vue-cli3-环境配置"><a href="#vue-cli-vue-cli3-环境配置" class="headerlink" title="@vue&#x2F;cli(vue-cli3)环境配置"></a>@vue&#x2F;cli(vue-cli3)环境配置</h3><p>这可就简单太多了，傻瓜操作<br>1.<code>package.json</code>文件同目录（项目根目录）下创建文件<code>.env.development</code>，<code>.env.staging</code>，<code>.env.production</code>；<br>2.<code>.env.development</code>文件（本地开发文件）中添加配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">  <span class="variable constant_">NODE_ENV</span> = development</span><br><span class="line">  <span class="variable constant_">VUE_APP_BASE_API</span> = <span class="attr">http</span>:<span class="comment">//192.168.xxx/  //本地接口域名，无需加引号，项目中要把这行注释删掉！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>.env.staging</code>文件（测试环境文件）中添加配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">  <span class="variable constant_">NODE_ENV</span> = staging</span><br><span class="line">  <span class="variable constant_">VUE_APP_BASE_API</span> = <span class="attr">http</span>:<span class="comment">//192.168.xxx/  //测试接口域名，无需加引号，项目中要把这行注释删掉！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>.env.production</code>文件（生产环境文件）中添加配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">  <span class="variable constant_">NODE_ENV</span> = production</span><br><span class="line">  <span class="variable constant_">VUE_APP_BASE_API</span> = <span class="attr">http</span>:<span class="comment">//api.xxx.com/  //生产接口域名，无需加引号，项目中要把这行注释删掉！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.<code>package.json</code>文件中：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve --mode development&quot;</span><span class="punctuation">,</span> <span class="comment">//对应本地开发环境 npm run serve</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span><span class="string">&quot;vue-cli-service build --mode staging&quot;</span><span class="punctuation">,</span>  <span class="comment">//对应测试环境打包命令  npm run test</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build --mode production&quot;</span> <span class="comment">//对应生产环境打包 npm run build</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>4.request请求文件中通过<code>process.env.VUE_APP_BASE_API</code>就可以获取到不同环境的接口域名了</p>
<p>OK，刚刚蛋蛋，大功告成</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="兼容低版本安卓ios系统，ios8以下"><a href="#兼容低版本安卓ios系统，ios8以下" class="headerlink" title="兼容低版本安卓ios系统，ios8以下"></a>兼容低版本安卓ios系统，ios8以下</h3><p>修改package.json文件中的<code>browserslist</code>配置项：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;last 2 versions&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;not ie &lt;= 8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;iOS &gt;= 6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Android &gt; 4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Firefox &gt; 20&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>


<h2 id="下面是我遇到的一些问题："><a href="#下面是我遇到的一些问题：" class="headerlink" title="下面是我遇到的一些问题："></a>下面是我遇到的一些问题：</h2><h3 id="路由找不到-文件路径找不到报错解决"><a href="#路由找不到-文件路径找不到报错解决" class="headerlink" title="路由找不到 || 文件路径找不到报错解决"></a>路由找不到 || 文件路径找不到报错解决</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建一个notFound.vue文件来指向*所有路径</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="background设置背景图片，打包后图片加载不出来"><a href="#background设置背景图片，打包后图片加载不出来" class="headerlink" title="background设置背景图片，打包后图片加载不出来"></a>background设置背景图片，打包后图片加载不出来</h3><p>首先可以肯定为路径问题<br>方法：<br>1.extract-text-webpack-plugin插件(作用：将捆绑包或捆绑包中的文本提取到单独的文件中)：</p>
<blockquote>
<p>在build&#x2F;utils.js文件下找到ExtractTextPlugin.extract参数<br>添加配置项：publicPath: ‘..&#x2F;..&#x2F;‘;<br>用的3.0.0版本；</p>
</blockquote>
<p>2.用了vue-cli构建项目，会在项目下有个static文件夹，把图片放到这个静态文件夹下，然后使用<code>/static/logo.png</code>相对路径引用，可以在本地和打包环境正常显示；</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE3.0</title>
    <url>/blog/2019/03/13/vue3.0/</url>
    <content><![CDATA[<h3 id="数据监听机制-ES6-Proxy"><a href="#数据监听机制-ES6-Proxy" class="headerlink" title="数据监听机制 ES6 Proxy"></a>数据监听机制 ES6 Proxy</h3><p>目前，Vue 的反应系统是使用 Object.defineProperty 的 getter 和 setter。<br>但是，Vue 3 将使用 ES2015 Proxy 作为其观察者机制。 这消除了以前存在的警告，使速度加倍，并节省了一半的内存开销。<br>为了继续支持 IE11，Vue 3 将发布一个支持旧观察者机制和新 Proxy 版本的构建。</p>
<p>proxy并不比Object.definProperty更快，Object.definProperty只能监听对象属性的改变，而proxy不止可以监听对象属性的改变，还能监听对象属性的增加和删除</p>
<h3 id="重写vDom"><a href="#重写vDom" class="headerlink" title="重写vDom"></a>重写vDom</h3><h3 id="生命周期改变"><a href="#生命周期改变" class="headerlink" title="生命周期改变"></a>生命周期改变</h3><p><code>beforeDestroy</code>生命周期选项被重命名为<code>beforeUnmount</code><br><code>destroyed</code>生命周期选项重命名为<code>unmounted</code></p>
<h3 id="watch监听路由"><a href="#watch监听路由" class="headerlink" title="watch监听路由"></a>watch监听路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//watch 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组：</span><br><span class="line">//如果监听路由，则都不满足，所以这里需要用一个返回该属性的 getter 函数：</span><br><span class="line">const route = useRoute();</span><br><span class="line">watch(() =&gt; route.path, (path) =&gt; &#123;</span><br><span class="line">  console.log(path)</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子组件传递父组件值"><a href="#子组件传递父组件值" class="headerlink" title="子组件传递父组件值"></a>子组件传递父组件值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;script setup&gt;语法糖写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;submit&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">buttonClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显式地使用了 setup 函数 写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">emits</span>: [<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3全家桶搭建</title>
    <url>/blog/2021/06/04/vue3%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="本项目用到的框架和工具：vite2-vue3-vue-router4-vuex4-TS"><a href="#本项目用到的框架和工具：vite2-vue3-vue-router4-vuex4-TS" class="headerlink" title="本项目用到的框架和工具：vite2 + vue3 + vue-router4 + vuex4 + TS"></a>本项目用到的框架和工具：vite2 + vue3 + vue-router4 + vuex4 + TS</h3><h4 id="1-搭建-Vite-Vue-项目"><a href="#1-搭建-Vite-Vue-项目" class="headerlink" title="1.搭建 Vite + Vue 项目"></a>1.搭建 Vite + Vue 项目</h4><blockquote>
<p>Vite 需要 Node.js 版本 &gt;&#x3D; 12.0.0。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm 6.x</span></span><br><span class="line">npm init @vitejs/app my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用ts的话：</span></span><br><span class="line">npm init @vitejs/app my-vue-app --template vue-ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 7+, 需要额外的双横线：</span></span><br><span class="line">npm init @vitejs/app my-vue-app -- --template vue</span><br></pre></td></tr></table></figure>
<ul>
<li><code>npm -v</code>查看npm版本</li>
</ul>
<h4 id="2-配置路由"><a href="#2-配置路由" class="headerlink" title="2.配置路由"></a>2.配置路由</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4 --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在<code>src</code>目录下新建router文件夹，新建<code>index.ts</code>路由配置文件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">// 这里还是用路由懒加载方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../src/components/Home/Index.vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Detail</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../src/components/Detail/Index.vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">notFound</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../src/components/notFound.vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;首页&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/detail&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Detail&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;详情页&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Detail</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 这里不能直接使用vue-router3.x的*通配符做path了</span></span><br><span class="line">    <span class="comment">// vue-router4.x将匹配所有内容并将其放在 `$route.params.pathMatch` 下</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:pathMatch(.*)*&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;notFound&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;404&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">component</span>: notFound</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 用最舒服的H5 history模式</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(), <span class="comment">//应用托管在根目录下，如：给出的网址为 `https://example.com/`</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="string">&#x27;/folder/&#x27;</span>), <span class="comment">//应用托管在子目录下，如：给出的网址为 `https://example.com/folder/`</span></span><br><span class="line">  routes <span class="comment">// `routes: routes` 的缩写,ES6语法糖</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>main.ts</code>中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建并挂载根实例，使整个应用支持路由</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;../router/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>App.vue</code>入口组件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用`router-view`标签匹配首页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>tips:<br>如果部署的项目在子目录下，则相应的需要修改<code>vite.config.ts</code>文件中的base路径：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">base</span>:<span class="string">&quot;/folder/&quot;</span>,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="comment">//用本机IP启动项目，在相同网络下可以直接用手机调试</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;192.168.9.136&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8082</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-配置vuex状态管理模式-库"><a href="#3-配置vuex状态管理模式-库" class="headerlink" title="3.配置vuex状态管理模式+库"></a>3.配置vuex状态管理模式+库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装vuex4.x</span></span><br><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p>和router相同，在src目录下新建<code>store</code>文件夹，并新建<code>index.ts</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 让我们把vuex的5个核心概念同时回顾下，一步到位</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">list</span>: [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;nick&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>, <span class="attr">isShow</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;mack&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;19&quot;</span>, <span class="attr">isShow</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">formatList</span>(<span class="params">state:any</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">v: &#123; isShow: any; &#125;</span>) =&gt;</span> v.<span class="property">isShow</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state:any, data:any</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(state, data)</span><br><span class="line">      state.<span class="property">count</span> = data.<span class="property">amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">incrementAsync</span>(<span class="params">store:any, data:any</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, data)</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
</li>
<li><p>和<code>router</code>相同，在<code>main.ts</code>中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store/index&quot;</span>;</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// 这样就可以全局访问到store仓库</span></span><br><span class="line"><span class="comment">// 因为我们用了module核心概念，所以获取store中的数据：this.$store.state.a.count</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是Vuex 没有为 <code>this.$store</code> 属性提供开箱即用的类型声明，因为我们项目用的ts，所以需要先声明自定义的<a href="https://www.tslang.cn/docs/handbook/declaration-merging.html">模块补充</a>（这样只会编辑器警告，代码还是可以正常运行的，但是警告会看着很难受，所以必须解决）</p>
</blockquote>
</li>
</ul>
<p>所以在<code>src</code>目录下新建<code>vuex.d.ts</code>文件：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ComponentCustomProperties</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Store</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class="line">  <span class="comment">// 声明自己的 store state</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">// 因为我们上面使用了vuex的module，所以直接声明module名就行</span></span><br><span class="line">		<span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为 `this.$store` 提供类型声明</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">State</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h3><p>只要是软件，必须有api，有api必须有环境区分<br>和vue-cli 4.x类似，我们需要在和<code>package.json</code>同级目录下新建<code>.env.dev</code>、<code>.env.test</code>和<code>.env.prod</code>文件来区分开发，测试和正式环境；<br>然后在对应的文件中加入对应的<code>base_url</code>等值；<br>比如在<code>.env.prod</code>文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_ENV=prod</span><br><span class="line">VITE_APP_BASE_API = &quot;api.prod.com&quot;</span><br></pre></td></tr></table></figure>
<p>在项目的任意位置就可以通过<code>import.meta.env</code>获取到环境变量信息；<br>当然我们做环境区分的目的还是要自动打不同环境的包，所以在<code>package.json</code>文件中：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --mode dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --mode test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --mode prod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>例：打测试环境的包，只需要执行<code>npm run test</code>即可；</p>
<h2 id="5-提升开发效率，明确dom结构，当然少不了css预处理器，vite构建工具已经非常友好的集成了预处理器，只需安装依赖："><a href="#5-提升开发效率，明确dom结构，当然少不了css预处理器，vite构建工具已经非常友好的集成了预处理器，只需安装依赖：" class="headerlink" title="5.提升开发效率，明确dom结构，当然少不了css预处理器，vite构建工具已经非常友好的集成了预处理器，只需安装依赖："></a>5.提升开发效率，明确dom结构，当然少不了css预处理器，vite构建工具已经非常友好的集成了预处理器，只需安装依赖：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .scss and .sass ,这里只举一个sass例子</span></span><br><span class="line">npm install -D sass</span><br></pre></td></tr></table></figure>
<ul>
<li>如果有单独引入<code>.scss</code>, <code>.sass</code>, <code>.less</code>, <code>.styl</code> 和 <code>.stylus</code>文件,或者只是在vue单文件组件中使用：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.home-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin-top</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>为什么<code>vite</code>要比<code>webpack</code>快，webpack 的本质就是先打包，再加载，而<code>vite</code>使用 esbuild 预构建依赖，在服务器端对原生 ESM 请求进行按需编译，Vite 同时利用 HTTP 头来加速整个页面的重新加载；</p>
</blockquote>
<h3 id="因为写这个是为了开箱即用，所以很多东西都是根据实际业务来的，没有全面化，写的会很具体，有针对性，有后续再补充"><a href="#因为写这个是为了开箱即用，所以很多东西都是根据实际业务来的，没有全面化，写的会很具体，有针对性，有后续再补充" class="headerlink" title="因为写这个是为了开箱即用，所以很多东西都是根据实际业务来的，没有全面化，写的会很具体，有针对性，有后续再补充"></a>因为写这个是为了开箱即用，所以很多东西都是根据实际业务来的，没有全面化，写的会很具体，有针对性，有后续再补充</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex记录</title>
    <url>/blog/2018/07/05/vuex%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="vuex中Action和mutation的区别"><a href="#vuex中Action和mutation的区别" class="headerlink" title="vuex中Action和mutation的区别"></a>vuex中Action和mutation的区别</h3><p>Action 提交的是 mutation，而不是直接变更状态。<br>Action 可以包含任意异步操作。</p>
<h3 id="vuex使用注意"><a href="#vuex使用注意" class="headerlink" title="vuex使用注意"></a>vuex使用注意</h3><p>1.路由组件之间跳转不会刷新vuex中mutation的值，就是说，vuex会保存上次存储过的值，所以要在每次路由跳转到指定页面时，给vuex中的值初始化一次，保证不会把上次的记录的值带过来（待定验证）<br>2.可以直接把从vuex中取的数据传给后台，不会把vue自定义的东西带过去；</p>
<h3 id="提交载荷"><a href="#提交载荷" class="headerlink" title="提交载荷"></a>提交载荷</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js中</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">increment</span> (state, payload) &#123;</span><br><span class="line">    state.<span class="property">count</span> += payload.<span class="property">amount</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue微信分享</title>
    <url>/blog/2019/03/26/vue%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h3 id="vue微信分享"><a href="#vue微信分享" class="headerlink" title="vue微信分享"></a>vue微信分享</h3><p>1.页面中引入微信分享JS文件 或者 执行<code>npm install weixin-js-sdk --save</code>命令安装js包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://res.wx.qq.com/open/js/jweixin-1.4.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line">`npm install weixin-js-sdk --save`安装</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。<br>请尽快迁移使用客户端6.7.2及JSSDK 1.4.0以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。</p>
</blockquote>
<p>2.微信分享方法相关配置，新建文件<code>wechat.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 微信分享</span></span><br><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">&quot;weixin-js-sdk&quot;</span>;</span><br><span class="line"><span class="comment">//请求封装见[vue-axios请求-封装](http://www.guoxh.com/blog/2019/03/26/vue-axios%E8%AF%B7%E6%B1%82-%E5%B0%81%E8%A3%85/)</span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;../js/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requestget = <span class="keyword">new</span> <span class="title function_">request</span>();</span><br><span class="line"><span class="comment">//判断环境，因为二次分享Android和ios有不同的bug//测试发现只有设置了路由会有问题，#/在微信中会被截断，导致分享链接和传入API的链接不一样</span></span><br><span class="line"><span class="keyword">let</span> href;</span><br><span class="line"><span class="keyword">var</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">if</span> (ua.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(iPhone|iPod|iPad);?/i</span>)) &#123;</span><br><span class="line">        href = <span class="built_in">encodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        href = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">    &#125;		</span><br><span class="line">    requestget.<span class="title class_">Get</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/getWxConfig&#x27;</span>, <span class="attr">data</span>: &#123; <span class="string">&quot;url&quot;</span>: href &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        weixinConfigData = data.<span class="property">data</span>;</span><br><span class="line">        wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">            <span class="attr">debug</span>: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">            <span class="attr">appId</span>: weixinConfigData.<span class="property">appid</span>,<span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">            <span class="attr">timestamp</span>: weixinConfigData.<span class="property">timestamp</span>,<span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">            <span class="attr">nonceStr</span>: weixinConfigData.<span class="property">noncestr</span>,<span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">            <span class="attr">signature</span>: weixinConfigData.<span class="property">signature</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">            <span class="attr">jsApiList</span>: [</span><br><span class="line">                <span class="string">&#x27;checkJsApi&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;updateAppMessageShareData&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;updateTimelineShareData&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;onMenuShareTimeline&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;onMenuShareAppMessage&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;onMenuShareQQ&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;onMenuShareWeibo&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;hideMenuItems&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;showMenuItems&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;hideAllNonBaseMenuItem&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;showAllNonBaseMenuItem&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;translateVoice&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;startRecord&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;stopRecord&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;onRecordEnd&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;playVoice&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pauseVoice&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;stopVoice&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uploadVoice&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;downloadVoice&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;chooseImage&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;previewImage&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uploadImage&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;downloadImage&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;getNetworkType&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;openLocation&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;getLocation&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;hideOptionMenu&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;showOptionMenu&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;closeWindow&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;scanQRCode&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;chooseWXPay&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;openProductSpecificView&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;addCard&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;chooseCard&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;openCard&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wechatShareApi</span> &#123;</span><br><span class="line">    <span class="title function_">wxShare</span>(<span class="params">param</span>) &#123;</span><br><span class="line">        wx.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 分享给朋友及“分享到QQ</span></span><br><span class="line">            wx.<span class="title function_">updateAppMessageShareData</span>(&#123;</span><br><span class="line">                <span class="attr">desc</span>: param.<span class="property">descContent</span>,</span><br><span class="line">                <span class="attr">title</span>: param.<span class="property">shareTitle</span>,</span><br><span class="line">                <span class="attr">link</span>: param.<span class="property">lineLink</span>,</span><br><span class="line">                <span class="attr">imgUrl</span>: param.<span class="property">imgUrl</span>,</span><br><span class="line">                <span class="attr">trigger</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert(&#x27;用户点击发送给朋友&#x27;);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">// alert(&#x27;已分享&#x27;);</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">cancel</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert(&#x27;已取消&#x27;);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert(JSON.stringify(res));</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分享到朋友圈及“分享到QQ空间”</span></span><br><span class="line">            wx.<span class="title function_">updateTimelineShareData</span>(&#123;</span><br><span class="line">                <span class="attr">desc</span>: param.<span class="property">descContent</span>,</span><br><span class="line">                <span class="attr">title</span>: param.<span class="property">friendTitle</span> == <span class="literal">undefined</span> ? param.<span class="property">shareTitle</span> : param.<span class="property">friendTitle</span>,</span><br><span class="line">                <span class="attr">link</span>: param.<span class="property">lineLink</span>,</span><br><span class="line">                <span class="attr">imgUrl</span>: param.<span class="property">imgUrl</span>,</span><br><span class="line">                <span class="attr">trigger</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert(&#x27;用户点击发送给朋友&#x27;);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert(&#x27;已分享&#x27;);</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">cancel</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert(&#x27;已取消&#x27;);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="comment">// alert(JSON.stringify(res));</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    wechatShareApi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在指定组件中引入公共微信分享方法文件<span class="string">`wechat.js`</span>；就可以调用分享方法</span><br><span class="line"><span class="keyword">import</span> &#123;wechatShareApi&#125; <span class="keyword">from</span> <span class="string">&quot;../assets/js/wechat&quot;</span></span><br><span class="line"><span class="keyword">const</span> weApi = <span class="keyword">new</span> <span class="title function_">wechatShareApi</span>();</span><br><span class="line"><span class="comment">//微信分享参数</span></span><br><span class="line">weApi.<span class="title function_">wxShare</span>(&#123;</span><br><span class="line">    <span class="attr">shareTitle</span>: <span class="string">&quot;这是微信分享的标题&quot;</span>, </span><br><span class="line">    <span class="attr">descContent</span>: <span class="string">&quot;这是微信分享的描述文案&quot;</span>, </span><br><span class="line">    <span class="attr">lineLink</span>: location.<span class="property">href</span>, </span><br><span class="line">    <span class="attr">imgUrl</span>: <span class="string">&quot;这是微信分享的图片&quot;</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>附录：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115">获取权限签名的算法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue文件上传</title>
    <url>/blog/2019/03/26/vue%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="文件上传（支持PDF格式文件上传）以文件流的形式上传到接口"><a href="#文件上传（支持PDF格式文件上传）以文件流的形式上传到接口" class="headerlink" title="文件上传（支持PDF格式文件上传）以文件流的形式上传到接口"></a>文件上传（支持PDF格式文件上传）以文件流的形式上传到接口</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CarDamageFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;g-core-image-upload-form&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/gif,image/jpeg,image/jpg,image/png,application/pdf&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;back-page&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Pictures&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;imagechanged($event,Udata[7])&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件上传</span></span><br><span class="line"><span class="title function_">wrongTip</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">imagechanged</span>(<span class="params">e, data</span>) &#123;</span><br><span class="line"><span class="comment">//参数e为当前上传的表单，data为要处理的数据</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>,</span><br><span class="line">      _data = that.<span class="property">Udata</span>,</span><br><span class="line">      fileList = e.<span class="property">target</span>.<span class="property">files</span>;</span><br><span class="line">    data.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (fileList.<span class="property">length</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      that.<span class="title function_">wrongTip</span>(<span class="string">&quot;每项最多上传5张&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileList) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">		<span class="comment">//遍历上传的文件，一个一个处理</span></span><br><span class="line">        that.<span class="title function_">readFile</span>(fileList.<span class="property">length</span>, fileList[i], data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">readFile</span>(<span class="params">num, res, Sdata</span>) &#123;</span><br><span class="line"><span class="comment">//num为上传文件数量，res为上传文件数据，Sdata为要处理数据</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>,</span><br><span class="line">      _data = that.<span class="property">Udata</span>,</span><br><span class="line">      <span class="title class_">Ename</span> = <span class="title class_">Sdata</span>.<span class="property">Ename</span>,</span><br><span class="line">      render = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">type</span> != <span class="string">&quot;application/pdf&quot;</span> &amp;&amp; res.<span class="property">size</span> / <span class="number">1024</span> &gt; <span class="number">10240</span>) &#123;</span><br><span class="line">      that.<span class="title function_">wrongTip</span>(</span><br><span class="line">        <span class="string">&quot;材料仅限pdf. jpg .gif .png格式，单个图片大小不超过10M，单个PDF大小不超过4.5M，每项最多上传5张。&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">type</span> == <span class="string">&quot;application/pdf&quot;</span> &amp;&amp; res.<span class="property">size</span> / <span class="number">1024</span> &gt; <span class="number">4608</span>) &#123;</span><br><span class="line">      that.<span class="title function_">wrongTip</span>(</span><br><span class="line">        <span class="string">&quot;材料仅限pdf. jpg .gif .png格式，单个图片大小不超过10M，单个PDF大小不超过4.5M，每项最多上传5张。&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      render.<span class="title function_">addEventListener</span>(</span><br><span class="line">        <span class="string">&quot;load&quot;</span>,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> src = <span class="variable language_">this</span>.<span class="property">result</span>;</span><br><span class="line">          <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">          <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="property">index</span>;</span><br><span class="line">          <span class="keyword">var</span> _fileName = res.<span class="property">name</span>;</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">&quot;fileUrl&quot;</span>, res);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">&quot;fileName&quot;</span>, _fileName);</span><br><span class="line">          <span class="title class_">Sdata</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">          <span class="title class_">Basic</span>.<span class="title function_">ajaxReturnPromise</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">apiUrl</span>: <span class="string">&quot;/Comment/UploadImg&quot;</span>,</span><br><span class="line">            <span class="attr">customLoading</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">param</span>: formData,</span><br><span class="line">            <span class="attr">emulateJSON</span>: <span class="literal">false</span></span><br><span class="line">          &#125;).<span class="title function_">then</span>(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (response.<span class="property">IsSuccess</span>) &#123;</span><br><span class="line">                ++<span class="title class_">Sdata</span>.<span class="property">count</span>;</span><br><span class="line">                <span class="keyword">var</span> data = response.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Sdata</span>.<span class="property">imgSrc</span>.<span class="property">length</span> + data.<span class="property">length</span> &lt; <span class="number">6</span>) &#123;</span><br><span class="line">                  <span class="title class_">Sdata</span>.<span class="property">curImg</span> = <span class="built_in">parseInt</span>(<span class="title class_">Sdata</span>.<span class="property">curImg</span> + <span class="number">1</span>);</span><br><span class="line">                  <span class="comment">// Sdata.imgSrc.shift();</span></span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data[i].<span class="property">BaseUrl</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;.pdf&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                      <span class="title class_">Sdata</span>.<span class="property">imgSrc</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">                        <span class="attr">picUrl</span>: <span class="string">&quot;https://h5-fe.huizuche.com/claim/PDF.png&quot;</span>,</span><br><span class="line">                        <span class="attr">url</span>: data[i].<span class="property">BaseUrl</span>,</span><br><span class="line">                        <span class="attr">name</span>: _fileName</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="title class_">Sdata</span>.<span class="property">imgSrc</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">                        <span class="attr">picUrl</span>:</span><br><span class="line">                          data[i].<span class="property">BaseUrl</span> +</span><br><span class="line">                          <span class="string">&quot;?x-oss-process=image/resize,m_fill,h_78,w_78&quot;</span>,</span><br><span class="line">                        <span class="attr">url</span>: data[i].<span class="property">BaseUrl</span>,</span><br><span class="line">                        <span class="attr">name</span>: _fileName</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  that.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="title class_">Sdata</span>.<span class="property">store</span>, &#123;</span><br><span class="line">                    [<span class="title class_">Ename</span>]: <span class="title class_">Sdata</span>.<span class="property">imgSrc</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  that.<span class="title function_">wrongTip</span>(<span class="string">&quot;每项最多上传5张&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="title class_">Sdata</span>.<span class="property">count</span> == num) &#123;</span><br><span class="line">                <span class="title class_">Sdata</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              that.<span class="title function_">wrongTip</span>(<span class="string">&quot;文件上传失败，请重新上传&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br><span class="line">      render.<span class="title function_">readAsDataURL</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue记录</title>
    <url>/blog/2017/02/22/vue%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="如何让css只在当前组件起作用"><a href="#如何让css只在当前组件起作用" class="headerlink" title="如何让css只在当前组件起作用"></a>如何让css只在当前组件起作用</h3><p>这样写其他组件引用当前组件时当前组件中的css无法作用在其他组件（个人认为中小项目不需要加这个属性，因为组件之间的调用会很少很少）<br>同级组件不加scope如果有相同类名，会相互影响（同级当前组件优先级高）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-for遍历数据中的v-bind-key（-key）问题"><a href="#v-for遍历数据中的v-bind-key（-key）问题" class="headerlink" title="v-for遍历数据中的v-bind:key（:key）问题"></a>v-for遍历数据中的v-bind:key（:key）问题</h3><blockquote>
<p><em><strong>tips:</strong></em> 2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。<br>在vue中用v-for最好搭配v-bind:key&#x3D;”key”来使用；<br>key的作用主要是为了高效的更新虚拟DOM<br>key值只能为string&#x2F;number，不能是对象或数组；<br>example: <el-carousel-item v-for="(item, index) in items" :key="index"></el-carousel-item><br>我们知道，vue和react都实现了一套虚拟DOM，使我们可以不直接操作DOM元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的Diff算法。</p>
</blockquote>
<h3 id="父组件与子组件互传数据"><a href="#父组件与子组件互传数据" class="headerlink" title="父组件与子组件互传数据"></a>父组件与子组件互传数据</h3><ol>
<li>props:{}用来接收父组件传过来的数据</li>
</ol>
<ul>
<li>父组件：<br><img src="http://www.guoxh.com/blog/img/vue/propParentDOM.png"></li>
<li>子组件：<br><img src="http://www.guoxh.com/blog/img/vue/propChildDOM.png"></li>
</ul>
<ol start="2">
<li>this.$emit(自定义事件名，数据)向父组件传递数据</li>
</ol>
<ul>
<li><p>子组件：<br><img src="http://www.guoxh.com/blog/img/vue/$emitChildDOM.png"><br><img src="http://www.guoxh.com/blog/img/vue/$emitChildJS.png"></p>
</li>
<li><p>父组件<br><img src="http://www.guoxh.com/blog/img/vue/$emitParentDOM.png"><br><img src="http://www.guoxh.com/blog/img/vue/$emitParentJS.png"><br>或者父组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//两种接收的方式    </span></span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="title class_">Event</span>.$on(<span class="string">&#x27;transferUser&#x27;</span>, <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    _this.<span class="property">a</span> = a;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">Event</span>.$on(<span class="string">&#x27;transferUser&#x27;</span>, <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b;</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用watch侦听器,监听props中的数据实现控制当前子组件内容</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&quot;orderInfo&quot;</span>],</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">yetOrder</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">orderInfo</span>: <span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      <span class="comment">// newVal 为改变后的值</span></span><br><span class="line">      <span class="keyword">if</span> (newVal.<span class="property">reserve_id</span> &amp;&amp; newVal.<span class="property">reserve_id</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">yetOrder</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><code>1this.$emit(自定义事件,[])用来触发自定义事件increment1(或者函数名吧)，[]为参数</code></p>
</li>
</ul>
<h5 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h5><p>父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更换手机号 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ref=&quot;changePhone&quot;是子组件在父组件中的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">change-phone</span> <span class="attr">ref</span>=<span class="string">&quot;changePhone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">change-phone</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">switchPhone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//this.$refs.changePhone 获取子组件实例</span></span><br><span class="line">  <span class="comment">//this.$refs.changePhone.switchPhone(&quot;这是实参&quot;) 在父组件的方法中调用子组件的方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">changePhone</span>.<span class="title function_">switchPhone</span>(<span class="string">&quot;这是实参&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h3><p>1.新建文件<code>eventBus.js</code>,添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br></pre></td></tr></table></figure>
<p>2.兄弟组件分别引入<code>eventBus.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&quot;../js/eventBus.js&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>3.传值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 兄弟组件1传数据：</span></span><br><span class="line"><span class="title function_">tuikuan</span>(<span class="params"></span>) &#123;</span><br><span class="line">  eventBus.$emit(<span class="string">&quot;event&quot;</span>, <span class="string">&quot;sendData&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 兄弟组件2接受数据：</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  eventBus.$on(<span class="string">&quot;event&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>4.如果多个父组件调用兄弟组件，则这种方法不适用，因为数据不经过父组件，导致多个父组件会出现数据混乱；</p>
<h3 id="祖孙组件之间传递数据和绑定方法（祖组件传递给孙组件的数据不能与父组件公用，否则会传递失败，孙组件拿不到数据）"><a href="#祖孙组件之间传递数据和绑定方法（祖组件传递给孙组件的数据不能与父组件公用，否则会传递失败，孙组件拿不到数据）" class="headerlink" title="祖孙组件之间传递数据和绑定方法（祖组件传递给孙组件的数据不能与父组件公用，否则会传递失败，孙组件拿不到数据）"></a>祖孙组件之间传递数据和绑定方法（祖组件传递给孙组件的数据不能与父组件公用，否则会传递失败，孙组件拿不到数据）</h3><p>1.祖组件向下传递数据到孙组件：<br>祖组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span> @<span class="attr">pay</span>=<span class="string">&quot;pay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件：（必经过父组件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">grand-son</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">grand-son</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>孙组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;pay(payData)&quot;</span>&gt;</span>&#123;&#123;payData&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;payData&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">pay</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;pay&quot;</span>, data)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="vue中引入未定义的第三方组件会报错，所以需要过滤掉"><a href="#vue中引入未定义的第三方组件会报错，所以需要过滤掉" class="headerlink" title="vue中引入未定义的第三方组件会报错，所以需要过滤掉"></a>vue中引入未定义的第三方组件会报错，所以需要过滤掉</h3><p>在<code>main.js</code>中添加过滤元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">ignoredElements</span> = [<span class="string">&#x27;wx-open-launch-weapp&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="this-set-设置对象的属性，这个方法主要用于避开-Vue-不能检测属性被添加的限制"><a href="#this-set-设置对象的属性，这个方法主要用于避开-Vue-不能检测属性被添加的限制" class="headerlink" title="this.$set()设置对象的属性，这个方法主要用于避开 Vue 不能检测属性被添加的限制"></a>this.$set()设置对象的属性，这个方法主要用于避开 Vue 不能检测属性被添加的限制</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.<span class="property">arr</span>[<span class="number">0</span>] = <span class="number">4</span>;<span class="comment">//这样操作数据，dom不会更新数据</span></span><br><span class="line">vm.$set(vm.<span class="property">arr</span>,<span class="number">0</span>,<span class="number">4</span>) <span class="comment">//这样dom数据才会改变</span></span><br></pre></td></tr></table></figure>

<h3 id="引入模块和引入文件"><a href="#引入模块和引入文件" class="headerlink" title="引入模块和引入文件"></a>引入模块和引入文件</h3><p>*引入模块：import webview from “..&#x2F;..&#x2F;common&#x2F;webview.js”;<br>*引入文件：import “..&#x2F;..&#x2F;filter&#x2F;webpFilter.js”;</p>
<h3 id="vue数据绑定支持JS表达式-以后v-for的时候再也不用先在JS中处理一遍数据再绑定了"><a href="#vue数据绑定支持JS表达式-以后v-for的时候再也不用先在JS中处理一遍数据再绑定了" class="headerlink" title="vue数据绑定支持JS表达式(以后v-for的时候再也不用先在JS中处理一遍数据再绑定了)"></a>vue数据绑定支持JS表达式(以后v-for的时候再也不用先在JS中处理一遍数据再绑定了)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? <span class="string">&#x27;YES&#x27;</span> : <span class="string">&#x27;NO&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;&#123; message.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class="line">&lt;div v-<span class="attr">bind</span>:id=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue中的index索引值问题"><a href="#vue中的index索引值问题" class="headerlink" title="vue中的index索引值问题"></a>vue中的index索引值问题</h3><p>vue 中$index $key 已经移除了<br>之前可以这样:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;$index&#125;&#125;</span><br><span class="line">        &#123;&#123;$key&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在已经移除,如果还用的话就会报错:Uncaught ReferenceError: $index is not defined;</p>
<p>现在这样写:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">        &#123;&#123;index&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一个参数是值,第二个参数是索引;目的是为了保持和原生的一致;</p>
<h3 id="鼠标右键事件"><a href="#鼠标右键事件" class="headerlink" title="鼠标右键事件"></a>鼠标右键事件</h3><p>@contextmenu.prevent&#x3D;”alert(‘您点击的是鼠标右键’)”</p>
<h3 id="在所有ajax完成后执行"><a href="#在所有ajax完成后执行" class="headerlink" title="在所有ajax完成后执行"></a>在所有ajax完成后执行</h3><p>这个时候用promise.all最合适了，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let p1 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">  resolve(42)</span><br><span class="line">&#125;);</span><br><span class="line">let p2 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">  resolve(43)</span><br><span class="line">&#125;);</span><br><span class="line">let p3 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">  resolve(44)</span><br><span class="line">&#125;);</span><br><span class="line">let p4 = Promise.all([p1, p2, p3]);</span><br><span class="line">p4.then(function (v) &#123;</span><br><span class="line">  // 这个里面就是你需要做的事情</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="深入理解vue"><a href="#深入理解vue" class="headerlink" title="深入理解vue"></a>深入理解vue</h3><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter&#x2F;setter。<br>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。</p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>单文件组件：你完全可以自定义一个组件名，然后在父级组件中import组件，并且在components: {}中声明一下</p>
<h3 id="在v-html中使用filters-的三种方法"><a href="#在v-html中使用filters-的三种方法" class="headerlink" title="在v-html中使用filters 的三种方法"></a>在v-html中使用filters 的三种方法</h3><p>1.在vue实例上定义全局方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">highlight</span>= <span class="keyword">function</span> (<span class="params">sTitle</span>) &#123;</span><br><span class="line">  <span class="comment">// to do</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//然后所有组件都可以使用方法</span></span><br><span class="line">v-html=<span class="string">&quot;highlight(option.title)&quot;</span></span><br></pre></td></tr></table></figure>
<p>2.使用 $options.filters</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">v-html=<span class="string">&quot;$options.filters.highlight(option.title)&quot;</span></span><br><span class="line"><span class="keyword">var</span> appMain= <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#appMain&#x27;</span>,</span><br><span class="line">    <span class="attr">filters</span>:&#123;</span><br><span class="line">      <span class="attr">highlight</span>: <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> msg.<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&quot;&lt;br&gt;&quot;</span>) ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">     <span class="keyword">return</span>&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>3.computed 计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> appMain= <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#appMain&#x27;</span>,</span><br><span class="line">      computed :&#123;</span><br><span class="line">         content： <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> msg.<span class="title function_">replace</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line">页面上：</span><br><span class="line">&lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue路由频繁切换的时候，会有部分白屏问题，下拉后恢复正常-用于同一个页面，点击导航栏切换不同路由"><a href="#vue路由频繁切换的时候，会有部分白屏问题，下拉后恢复正常-用于同一个页面，点击导航栏切换不同路由" class="headerlink" title="vue路由频繁切换的时候，会有部分白屏问题，下拉后恢复正常(用于同一个页面，点击导航栏切换不同路由)"></a>vue路由频繁切换的时候，会有部分白屏问题，下拉后恢复正常(用于同一个页面，点击导航栏切换不同路由)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setPosition</span>(); </span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">method</span>:&#123;</span><br><span class="line">  <span class="title function_">setPosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> oTop = $(<span class="string">&quot;.page-center&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>;</span><br><span class="line">        <span class="comment">//获取导航栏的高度，此高度用于保证内容的平滑过渡</span></span><br><span class="line">        <span class="keyword">var</span> martop = $(<span class="string">&#x27;.page-center&#x27;</span>).<span class="title function_">outerHeight</span>();</span><br><span class="line">        <span class="keyword">var</span> sTop = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 监听页面的滚动</span></span><br><span class="line">        $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 获取页面向上滚动的距离</span></span><br><span class="line">            sTop = $(<span class="variable language_">this</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line">            <span class="comment">// 当导航栏到达屏幕顶端</span></span><br><span class="line">            <span class="keyword">if</span> (sTop &gt;= oTop) &#123;</span><br><span class="line">                <span class="comment">// 修改导航栏position属性，使之固定在屏幕顶端</span></span><br><span class="line">                $(<span class="string">&quot;.page-center&quot;</span>).<span class="title function_">css</span>(&#123; <span class="string">&quot;position&quot;</span>: <span class="string">&quot;fixed&quot;</span>, <span class="string">&quot;top&quot;</span>: <span class="string">&quot;0&quot;</span> &#125;);</span><br><span class="line">                <span class="comment">// 修改内容的margin-top值，保证平滑过渡</span></span><br><span class="line">                $(<span class="string">&quot;.page-bottom&quot;</span>).<span class="title function_">css</span>(&#123; <span class="string">&quot;margin-top&quot;</span>: martop &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当导航栏脱离屏幕顶端时，回复原来的属性</span></span><br><span class="line">                $(<span class="string">&quot;.page-center&quot;</span>).<span class="title function_">css</span>(&#123; <span class="string">&quot;position&quot;</span>: <span class="string">&quot;static&quot;</span> &#125;);</span><br><span class="line">                $(<span class="string">&quot;.page-bottom&quot;</span>).<span class="title function_">css</span>(&#123; <span class="string">&quot;margin-top&quot;</span>: <span class="string">&quot;0&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">参考自：[<span class="attr">https</span>:<span class="comment">//juejin.im/post/5be92ae2e51d4572fd18c4c6](https://juejin.im/post/5be92ae2e51d4572fd18c4c6)</span></span><br></pre></td></tr></table></figure>

<h3 id="vue中实现接口刷新，页面不刷新，这样变相的做到了返回定位到之前位置，并且不会有缓存数据："><a href="#vue中实现接口刷新，页面不刷新，这样变相的做到了返回定位到之前位置，并且不会有缓存数据：" class="headerlink" title="vue中实现接口刷新，页面不刷新，这样变相的做到了返回定位到之前位置，并且不会有缓存数据："></a>vue中实现接口刷新，页面不刷新，这样变相的做到了返回定位到之前位置，并且不会有缓存数据：</h3><blockquote>
<p>目前实在没找到bug，只能在项目中出真知，手动微微无奈😔？很慌<br>当组件在 <keep-alive> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p>
</blockquote>
<p>引用上面句话，在 <keep-alive> 组件内把请求放在<code>activated</code>生命周期中，就可以做到刷新数据不刷新页面</p>
<p><code>activated</code>钩子在 <code>keep-alive</code> 组件激活时调用(进入当前组件)<br><code>deactivated</code>钩子在 <code>keep-alive</code> 组件停用时调用(离开当前组件)</p>
<blockquote>
<p>在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 <keep-alive> 树内的所有嵌套组件中触发。</p>
</blockquote>
<ul>
<li><p>如果在父组件使用了<code>keep-alive</code>，子组件生命周期方法只能使用<code>activated</code>和<code>deactivated</code></p>
</li>
<li><p>因为用到了缓存，所以缓存组件中的vdom都会缓存，导致更新数据时vdom没有更新，暂时想到的办法是<br><code>deactivated</code>周期加个<code>v-if</code>来清除不想缓存的vdom，<code>activated</code>周期再显示出来</p>
</li>
</ul>
<h3 id="vue中利用qrcodejs2插件前端生成二维码"><a href="#vue中利用qrcodejs2插件前端生成二维码" class="headerlink" title="vue中利用qrcodejs2插件前端生成二维码"></a>vue中利用qrcodejs2插件前端生成二维码</h3><p>1.安装qrcodejs2插件，在控制台输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install qrcodejs2 --save</span><br></pre></td></tr></table></figure>
<p>2.template or 入口文件 引入插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">QRCode</span> <span class="keyword">from</span> <span class="string">&quot;qrcodejs2&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>3.html中加标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;qrcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4.生成二维码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果是props传入的二维码地址：</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&quot;qrCodeLink&quot;</span>],</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">qrCodeLink</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">    <span class="comment">//生成二维码</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">QRCode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;qrcode&quot;</span>), newValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是写死的，或者不是父组件传来的，直接new就好：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">QRCode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;qrcode&quot;</span>), qrCodeLink);</span><br><span class="line"><span class="comment">// 如果是点击生成二维码，会存在点一次生成一次的情况，所以要每次清除掉上次生成的二维码</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="vue订单列表倒计时（这种方式适合vue单组件，即一个组件为一个订单，不需要遍历可以直接操作，父级组件已经遍历好，方便快捷暴力）"><a href="#vue订单列表倒计时（这种方式适合vue单组件，即一个组件为一个订单，不需要遍历可以直接操作，父级组件已经遍历好，方便快捷暴力）" class="headerlink" title="vue订单列表倒计时（这种方式适合vue单组件，即一个组件为一个订单，不需要遍历可以直接操作，父级组件已经遍历好，方便快捷暴力）"></a>vue订单列表倒计时（这种方式适合vue单组件，即一个组件为一个订单，不需要遍历可以直接操作，父级组件已经遍历好，方便快捷暴力）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">let</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="comment">//expire_time为接口返回截止时间的时间戳</span></span><br><span class="line"><span class="keyword">let</span> endDate = v.<span class="property">expire_time</span> * <span class="number">1000</span> - nowTime;</span><br><span class="line"><span class="comment">// let endDate = 10000;</span></span><br><span class="line"><span class="keyword">if</span> (endDate &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stop = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//days | hour 分别表示天和小时</span></span><br><span class="line">    <span class="comment">//days = Math.floor(time.t / 1000 / 60 / 60 / 24);</span></span><br><span class="line">    <span class="comment">//hour = Math.floor(time.t / 1000 / 60 / 60 % 24);</span></span><br><span class="line">    <span class="keyword">let</span> minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>((endDate / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">let</span> second = <span class="title class_">Math</span>.<span class="title function_">floor</span>((endDate / <span class="number">1000</span>) % <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">let</span> min = minute &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + minute : minute;</span><br><span class="line">    <span class="keyword">let</span> sec = second &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + second : second;</span><br><span class="line">    <span class="keyword">if</span> (endDate &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//如果倒计时结束，直接改变当前订单的状态</span></span><br><span class="line">      that.<span class="property">overTime</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">clearInterval</span>(stop);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      endDate -= <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    that.<span class="property">lastTime</span> = time.<span class="property">m</span> + <span class="string">&quot;:&quot;</span> + time.<span class="property">s</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  that.<span class="property">overTime</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链接不改，版本迭代会导致再微信内浏览器中页面缓存为旧页面"><a href="#链接不改，版本迭代会导致再微信内浏览器中页面缓存为旧页面" class="headerlink" title="链接不改，版本迭代会导致再微信内浏览器中页面缓存为旧页面"></a>链接不改，版本迭代会导致再微信内浏览器中页面缓存为旧页面</h3><p>详细：见<a href="https://www.jianshu.com/p/cce9511c0914">解决方法</a><br>其中：<br>设置nginx的缓存机制；直接将nginx的缓存设置成<code>&#123;expires-1;&#125;</code>，设置成永远不缓存；如果没有nginx，其他apache什么的通用这个方法。</p>
<h3 id="vue-resource实现vue异步请求"><a href="#vue-resource实现vue异步请求" class="headerlink" title="vue-resource实现vue异步请求"></a>vue-resource实现vue异步请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;整个牛项目&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">tftext</span>: <span class="string">&quot;这是一段24px大小的字体&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//get请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&quot;/api/getapi&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(data)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/api/postapi&quot;</span>,</span><br><span class="line">      &#123; <span class="attr">mobile</span>: xxxxxxxxx &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">emulateJSON</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">todos</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>上面例子中<br>get请求很好懂，如果要加参数，直接在api链接后面拼上即可，<br>而post中有几个注意点：<br>post(url, [body], [options])<br>1.post中第一个参数为请求的目标api url;<br>2.第二个参数为作为请求体发送的数据，类型可以为Object, FormData, string<br>3.第三个参数很多，较常用的有headers:请求头、emulateJSON:设置请求体的类型为application&#x2F;x-www-form-urlencoded<br>4.如果要改为formdata提交，第三个参数加<br>{<br>headers: { ‘Content-Type’: ‘application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8’ },<br>emulateJSON: true<br>}<br>即可</li>
</ul>
<h3 id="SPA单页面项目设置history模式路由，ios微信内跳转页面不会改变页面路径，sdk调用方法导致报错"><a href="#SPA单页面项目设置history模式路由，ios微信内跳转页面不会改变页面路径，sdk调用方法导致报错" class="headerlink" title="SPA单页面项目设置history模式路由，ios微信内跳转页面不会改变页面路径，sdk调用方法导致报错"></a>SPA单页面项目设置history模式路由，ios微信内跳转页面不会改变页面路径，sdk调用方法导致报错</h3><ul>
<li>具体表现：在IOS手机微信端，从A页面(<a href="http://a.com/A">http://a.com/A</a>) 跳转到B页面(<a href="http://a.com/B)%E5%90%8E%EF%BC%8CB%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E6%93%8D%E4%BD%9C%E6%97%B6%E5%B0%B1%E4%BC%9A%E6%8A%A5%E7%AD%BE%E5%90%8D%EF%BC%88invalid">http://a.com/B)后，B页面进行微信内置方法操作时就会报签名（invalid</a> signature）错误，基本解决方案就是记录初始进入的页面路径，调用config接口时传入初始路径就可以解决；<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录进入 App 时的 URL</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">entryUrl</span> === <span class="string">&#x27;undefined&#x27;</span> || <span class="variable language_">window</span>.<span class="property">entryUrl</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">entryUrl</span> = location.<span class="property">href</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取签名的时候 Android 不用使用之前的链接，IOS 需要</span></span><br><span class="line"><span class="keyword">let</span> signLink =  <span class="regexp">/(Android)/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>) ? location.<span class="property">href</span> : <span class="variable language_">window</span>.<span class="property">entryUrl</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vue-js源码分析"><a href="#vue-js源码分析" class="headerlink" title="vue.js源码分析"></a>vue.js源码分析</h3><p>1.Object.create(null)和{}区别；<br> 二者都是创建一个对象，前者去掉了原型链，后者保留原型链</p>
<h3 id="华为浏览器微信H5支付，回跳链接正确，页面显示却错误"><a href="#华为浏览器微信H5支付，回跳链接正确，页面显示却错误" class="headerlink" title="华为浏览器微信H5支付，回跳链接正确，页面显示却错误"></a>华为浏览器微信H5支付，回跳链接正确，页面显示却错误</h3><p>初步分析原因可能有两个：<br>1.华为自带浏览器回跳未刷新页面，只是更改了路由链接，对vue路由不友好(也可能是我用了keep-alive组件，但是其他手机没问题)<br>2.未在微信公众后台配置回跳具体到路由参数的链接都会被拦截至首页</p>
<p><a href="https://juejin.im/post/6844903632815521799">https://juejin.im/post/6844903632815521799</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue预渲染方案</title>
    <url>/blog/2019/12/05/vue%E9%A2%84%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h3 id="vue-cli基于webpack-prerender-spa-plugin-vue-meta-info的seo优化"><a href="#vue-cli基于webpack-prerender-spa-plugin-vue-meta-info的seo优化" class="headerlink" title="@vue&#x2F;cli基于webpack + prerender-spa-plugin + vue-meta-info的seo优化"></a>@vue&#x2F;cli基于webpack + prerender-spa-plugin + vue-meta-info的seo优化</h3><p>1.安装<code>prerender-spa-plugin</code>插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i prerender-spa-plugin</span><br></pre></td></tr></table></figure>
<p>2.@vue&#x2F;cli（vuecli3）配置<code>vue.config.js</code>文件添加插件参数配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Renderer</span> = <span class="title class_">PrerenderSPAPlugin</span>.<span class="property">PuppeteerRenderer</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">          <span class="comment">// 生成文件的路径，也可以与webpakc打包的一致。</span></span><br><span class="line">          <span class="comment">// 下面这句话非常重要！！！</span></span><br><span class="line">          <span class="comment">// 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。</span></span><br><span class="line">          <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">          <span class="comment">// outputDir: path.join(__dirname, &#x27;./&#x27;),</span></span><br><span class="line">          <span class="comment">// 对应自己的路由文件，比如a有参数，就需要写成 /a/param1。</span></span><br><span class="line">          <span class="attr">routes</span>: [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/about&#x27;</span>, <span class="string">&#x27;/contact&#x27;</span>],</span><br><span class="line">          <span class="attr">renderer</span>: <span class="keyword">new</span> <span class="title class_">Renderer</span>(&#123;</span><br><span class="line">            <span class="attr">inject</span>: &#123;</span><br><span class="line">              <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 在 main.js 中 document.dispatchEvent(new Event(&#x27;render-event&#x27;))，两者的事件名称要对应上。</span></span><br><span class="line">            <span class="attr">renderAfterDocumentEvent</span>: <span class="string">&#x27;render-event&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.在<code>main.js</code>中添加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="title function_">mounted</span> () &#123;</span><br><span class="line">    <span class="comment">//dispatchEvent() 方法给节点分派一个合成事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;render-event&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/blog/2018/03/02/webpack/</url>
    <content><![CDATA[<p>html-webpack-plugin插件，webpack中生成HTML的插件</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>:  __dirname + <span class="string">&quot;/app/main.js&quot;</span>,	<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&quot;/public&quot;</span>,	<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>	<span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。`</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>关于angular个人遇到的问题（差不多过去式了）</title>
    <url>/blog/2016/09/14/%E5%85%B3%E4%BA%8Eangular%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>###动态插入的标签元素带有angular语法不执行解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var uploadInfo = &#x27;上传成功！&lt;a ng-click=&quot;quitTo(&#x27;customer&#x27;)&quot;&gt;点击&lt;/a&gt;跳转到客户列表界面&#x27;;</span><br><span class="line">angular.element(&#x27;.modal-body&#x27;).append(uploadInfo);</span><br></pre></td></tr></table></figure>
<p>将uploadInfo变量通过$compile进行处理，<br>var ele &#x3D; $compile(uploadInfo)($scope);<br>angular.element(‘.modal-body’).append(ele);</p>
<p>###依赖注入<br>AngularJS提供了一种非常简单的解决方法，即将依赖作为一个数组传入，数组的最后一个元素是一个函数，所有的依赖项作为它的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.controller(&#x27;MainCtrl&#x27;, [&#x27;$scope&#x27;, &#x27;$timeout&#x27;, function($scope, $timeout)&#123;</span><br><span class="line">    $timeout(function()&#123;</span><br><span class="line">        console.log($scope);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>

<h3 id="获取input焦点-自定义一个指令"><a href="#获取input焦点-自定义一个指令" class="headerlink" title="获取input焦点(自定义一个指令)"></a>获取input焦点(自定义一个指令)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = angular.<span class="title function_">module</span>(<span class="string">&#x27;myApp&#x27;</span>,[]);</span><br><span class="line">myApp.<span class="title function_">directive</span>(<span class="string">&#x27;setFocus&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">scope, element</span>)&#123;</span><br><span class="line">element[<span class="number">0</span>].<span class="title function_">focus</span>();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ng-repeat遍历数组"><a href="#ng-repeat遍历数组" class="headerlink" title="ng-repeat遍历数组"></a>ng-repeat遍历数组</h3><blockquote>
<p>ng-repeat遍历数组时，数组中有2个以上的相同数字，需要在 v in xxx 后面加上 track by $index；<br><a href="http://blog.csdn.net/rangqiwei/article/details/38020667">详细解释：</a></p>
</blockquote>
<h3 id="ng-repeat遍历对象"><a href="#ng-repeat遍历对象" class="headerlink" title="ng-repeat遍历对象"></a>ng-repeat遍历对象</h3><blockquote>
<p>ng-repeat&#x3D;”(key,value) in feesWays”<br>这种方式可以把接口数据对象格式的字段分离成键和值；</p>
</blockquote>
<h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//后台会传一个时间戳给你，只需要把这个时间戳转换为倒计时就行</span></span><br><span class="line">   $scope.<span class="property">daojishi</span> = <span class="keyword">function</span> (<span class="params">activityendtime</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> time = $scope.<span class="property">time</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//计算剩下毫秒数</span></span><br><span class="line">        time.<span class="property">t</span> = activityendtime;</span><br><span class="line">        time.<span class="property">d</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">        time.<span class="property">h</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">        time.<span class="property">m</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">        time.<span class="property">s</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> % <span class="number">60</span>) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> % <span class="number">60</span>) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(time.<span class="property">t</span> / <span class="number">1000</span> % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">if</span> (time.<span class="property">t</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            $scope.<span class="property">overhtml</span> = <span class="string">&quot;活动已结束！&quot;</span>;</span><br><span class="line">            $interval.<span class="title function_">cancel</span>(stop);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            activityendtime = (time.<span class="property">t</span> - <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $scope.<span class="property">Residualtime</span> = time.<span class="property">d</span> + <span class="string">&quot;:&quot;</span> + time.<span class="property">h</span> + <span class="string">&quot;:&quot;</span> + time.<span class="property">m</span> + <span class="string">&quot;:&quot;</span> + time.<span class="property">s</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">count</span>();</span><br><span class="line">    <span class="keyword">var</span> stop = $interval(count, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">$scope.<span class="property">daojishi</span>（$scope.<span class="property">activityendtime</span>）</span><br></pre></td></tr></table></figure>

<h3 id="angularJS全局API"><a href="#angularJS全局API" class="headerlink" title="angularJS全局API"></a>angularJS全局API</h3><blockquote>
<p>angular.lowercase()	转换字符串为小写<br>angular.uppercase()	转换字符串为大写<br>angular.isString()	判断给定的对象是否为字符串，如果是返回 true。<br>angular.isNumber()	判断给定的对象是否为数字，如果是返回 true。</p>
</blockquote>
<p>###angular自带遍历方法  angular.forEach</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> objs =[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;];</span><br><span class="line">angular.<span class="title function_">forEach</span>(objs, <span class="keyword">function</span>(<span class="params">data,index,array</span>)&#123;</span><br><span class="line">        <span class="comment">//data等价于array[index]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">a</span>+<span class="string">&#x27;=&#x27;</span>+array[index].<span class="property">a</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="angularJS懒加载"><a href="#angularJS懒加载" class="headerlink" title="angularJS懒加载"></a>angularJS懒加载</h3><p>引入  angular-img-lazy-load.min.js</p>
<p>src-lazy&#x3D;”“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var hzcApp = angular.module(&quot;hzc_app&quot;, [&#x27;img-lazy-load&#x27;]);</span><br><span class="line">&gt; 下面这个包含在controller中</span><br><span class="line">hzcApp.constant(&#x27;imgLazyLoadConf&#x27;, &#123;</span><br><span class="line">                tolerance: 50,</span><br><span class="line">                detectElement: true</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h3><p>2 . 在AngularJS中，操作DOM一般在指令中完成，事件监听机制是在对于已经静态生成的dom绑定事件，而如果在指令中动态生成了DOM节点，动态生成的节点不会被JS事件监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">angular.<span class="title function_">module</span>(<span class="string">&#x27;myapp&#x27;</span>,[])</span><br><span class="line">.<span class="title function_">directive</span>(<span class="string">&#x27;myText&#x27;</span>,<span class="keyword">function</span>(<span class="params">$compile</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">template</span>:<span class="string">&#x27;&lt;div ng-click=&quot;hello()&quot;&gt;Hi everyone&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">restrict</span>:<span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="attr">link</span>:<span class="keyword">function</span>(<span class="params">scope,ele,attr</span>)&#123;</span><br><span class="line">             ele.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                scope.$apply(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> content = $compile(template)(scope);</span><br><span class="line">                    element.<span class="title function_">append</span>(content);</span><br><span class="line">               &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="timeout-apply"><a href="#timeout-apply" class="headerlink" title="$timeout $apply"></a>$timeout $apply</h3><p>$timeout会帮你调用$apply()，让你不需要手动地调用它<br>$apply会吧我们的代码wrapped到了$scope.$apply()中，它会自动触发$rootScope.$digest()，从而让watchers被触发用以更新view</p>
<h3 id="ng-click方法函数中的this指向问题"><a href="#ng-click方法函数中的this指向问题" class="headerlink" title="ng-click方法函数中的this指向问题"></a>ng-click方法函数中的this指向问题</h3><blockquote>
<p>this指向当前controller中的$scope<br>比如：this.value &#x3D; $scope.value;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng-click中的this的特性在ng-repeat中非常好用。</span><br><span class="line">比如用ng-repeat遍历出一个列表：</span><br><span class="line">&lt;div ng-click=&quot;change()&quot; ng-repeat=&quot;item in items&quot;&gt;&#123;&#123;item.value&#125;&#125;&lt;/div&gt;</span><br><span class="line">然后你想给他们绑定一个统一的函数change()方法，点击之后只会把自己的值改变，此时this就是指向当前的子scope：</span><br><span class="line">$scope.change = function()&#123;</span><br><span class="line">    this.item.value = &#x27;new value&#x27;;</span><br><span class="line">    //由于是ng-repeat出来的，所以这里this指向的scope是上面那个案例中$scope的子集。</span><br><span class="line">    //即this.$parent === $scope;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="angular-cope-复制数组或对象"><a href="#angular-cope-复制数组或对象" class="headerlink" title="angular.cope()复制数组或对象"></a>angular.cope()复制数组或对象</h3><h3 id="ng-bind-html绑定接口获取的html，数据处理"><a href="#ng-bind-html绑定接口获取的html，数据处理" class="headerlink" title="ng-bind-html绑定接口获取的html，数据处理"></a>ng-bind-html绑定接口获取的html，数据处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">filter</span>(<span class="string">&#x27;to_trusted&#x27;</span>, [<span class="string">&#x27;$sce&#x27;</span>, <span class="keyword">function</span> (<span class="params">$sce</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> $sce.<span class="title function_">trustAsHtml</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;])</span><br><span class="line">  .<span class="title function_">directive</span>(<span class="string">&#x27;compileHtml&#x27;</span>, <span class="keyword">function</span> (<span class="params">$compile</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">restrict</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">      <span class="attr">replace</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">link</span>: <span class="keyword">function</span> (<span class="params">scope, ele, attrs</span>) &#123;</span><br><span class="line">        scope.$watch(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> scope.$eval(attrs.<span class="property">compile</span>); &#125;,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">            ele.<span class="title function_">html</span>(html);</span><br><span class="line">            $compile(ele.<span class="title function_">contents</span>())(scope);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="http"><a href="#http" class="headerlink" title="$http"></a>$http</h3><p>angular提供了$http服务来同服务端进行通信，$http服务对浏览器的XMLHttpRequest对象进行了封装，让我们可以以ajax的方式来从服务器请求数据。<br><code>$http</code>服务是一个接受一个参数的函数，参数的类型是对象，用来配置生成的http的请求，该函数返回一个promise对象（promise对象是一个构造函数ES6的对象）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = $http(&#123;</span><br><span class="line">  <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;/api/user.json&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">		<span class="comment">//success状态为resolved时调用（即异步操作成功）</span></span><br><span class="line">	&#125;, <span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">		<span class="comment">//failure可选，状态为rejected时调用（失败）</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>


<p><code>$http</code>请求的配置对象<br><code>$http()</code>接受的配置对象可以包含以下属性:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; method:http请求方式，可以为GET,DELETE,HEAD,JSONP,POST,PUT</span><br><span class="line">url:字符串，请求的目标</span><br><span class="line">params:字符串或者对象，会被转换成为查询字符串追加的url后面</span><br><span class="line">data:在发送post请求时使用，作为消息体发送到服务器</span><br><span class="line">headers:一个列表，每个元素都是一个函数，返回http头</span><br><span class="line">xsrfHeaderName(字符串)：保存XSFR令牌的http头的名称</span><br><span class="line">xsrfCookieName:保存XSFR令牌的cookie名称</span><br><span class="line">transformRequest:函数或者函数数组，用来对http请求的请求体和头信息进行转换，并返回转换后的结果。</span><br><span class="line">transformResponse:函数或者函数数组，用来对http响应的响应体和头信息进行转换，并返回转换后的结果。</span><br><span class="line">cache:布尔类型或者缓存对象，设置之后angular会缓存get请求。</span><br><span class="line">timeout:数值，延迟请求</span><br><span class="line">responseType：字符串，响应类型。可以为arraybuffer, blob,document,json, text, moz-blob, moz-chunked-text, moz-chunked-arraybuffer</span><br><span class="line">`$http`请求的响应对象</span><br><span class="line">angular传递给then方法的响应对象包括以下几个属性</span><br><span class="line">data:转换之后的响应体</span><br><span class="line">status:http响应状态码</span><br><span class="line">headers:头信息</span><br><span class="line">config:生成原始请求的设置对象</span><br><span class="line">statusText:http响应状态的文本</span><br></pre></td></tr></table></figure>

<h3 id="http配置为form-data-提交"><a href="#http配置为form-data-提交" class="headerlink" title="$http配置为form data 提交:"></a>$http配置为form data 提交:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user/&#x27;</span>,</span><br><span class="line">        <span class="comment">/*$.param() 方法创建数组或对象的序列化表示形式，</span></span><br><span class="line"><span class="comment">        例如：&#123;mobile:134****2345,email:a@qw.com&#125; 改为 mobile:134****2345&amp;email=a@qw.com*/</span></span><br><span class="line">        <span class="attr">data</span>: $.<span class="title function_">param</span>($scope.<span class="property">formData</span>), </span><br><span class="line">        <span class="comment">// 设置post为formdata表单提交，而不是默认的json提交</span></span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span> &#125; </span><br><span class="line">    &#125;).<span class="title function_">success</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="获得ng-model里的value"><a href="#获得ng-model里的value" class="headerlink" title="获得ng-model里的value"></a>获得ng-model里的value</h3><p>ng-model&#x3D;”name”, <code>$scope.name</code>拿不到值是因为原型继承，具体可以百度，解决方法是使用对象属性取值，ng-model&#x3D;”model.name”; $scope.model &#x3D;{};<br><code>$scope.model.name</code>这个时候就是双向绑定了。</p>
<h3 id="指令写图片懒加载"><a href="#指令写图片懒加载" class="headerlink" title="指令写图片懒加载"></a>指令写图片懒加载</h3><p>先用一个小的图片占位，图片加载完毕显示需要加载的图片；<br>html：src为默认显示的图片，lazy-src为需要懒加载的图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">image-lazy-load</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>  <span class="attr">lazy-src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;imageLazyLoad&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="comment">// A = attribute, E = Element, C = Class and M = HTML Comment</span></span><br><span class="line">       <span class="attr">restrict</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">       <span class="attr">link</span>: <span class="keyword">function</span>(<span class="params">scope, ele, attrs</span>)&#123;</span><br><span class="line">           ele[<span class="number">0</span>].<span class="property">src</span> = <span class="string">&#x27;default.jpg&#x27;</span>;   <span class="comment">//默认</span></span><br><span class="line">           ele[<span class="number">0</span>].<span class="property">onload</span> =<span class="keyword">function</span> (<span class="params">ev</span>) &#123;  <span class="comment">//图片onload完毕</span></span><br><span class="line">               ele[<span class="number">0</span>].<span class="property">src</span> = attrs.<span class="property">lazySrc</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>关于em rem px</title>
    <url>/blog/2016/09/14/%E5%85%B3%E4%BA%8Eem%20rem%20px/</url>
    <content><![CDATA[<h3 id="js操作rem"><a href="#js操作rem" class="headerlink" title="js操作rem"></a>js操作rem</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">100px</span>;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//屏幕适应 </span></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span> (<span class="params">win, doc</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!win.<span class="property">addEventListener</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">setFont</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> k = <span class="number">750</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> clientW = html.<span class="property">clientWidth</span> &gt; <span class="number">750</span> ? <span class="number">750</span> : html.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">            html.<span class="property">style</span>.<span class="property">fontSize</span> = clientW / k * <span class="number">40</span> + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setFont</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setFont</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">300</span>);</span></span><br><span class="line"><span class="language-javascript">        doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, setFont, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, setFont, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, setFont, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="px-em-rem"><a href="#px-em-rem" class="headerlink" title="px em rem"></a>px em rem</h3><h4 id="1-em"><a href="#1-em" class="headerlink" title="1.em"></a>1.em</h4><p>一般都是 body 的 font-size 为基准，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</span><br><span class="line">    <span class="comment">/*10 ÷ 16 × 100% = 62.5%*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.4em</span>;</span><br><span class="line">    <span class="comment">/*2.4em × 10 = 24px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>计算公式：1 ÷ 父元素的font-size × 需要转换的像素值 &#x3D; em值</p>
<h4 id="2-rem"><a href="#2-rem" class="headerlink" title="2.rem"></a>2.rem</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</span><br><span class="line">    <span class="comment">/*10 ÷ 16 × 100% = 62.5%*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</span><br><span class="line">    <span class="comment">/*1.4 × 10px = 14px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.4rem</span>;</span><br><span class="line">    <span class="comment">/*2.4 × 10px = 24px*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>other</title>
    <url>/blog/2016/12/26/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ol>
<li>CSS BFC</li>
</ol>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ol>
<li><p>promise</p>
</li>
<li><p>跨域</p>
</li>
<li><p>Macrotask Queue和Microtask Queue</p>
</li>
<li><p>数组排序</p>
</li>
<li><p>数组去重</p>
</li>
<li><p>ES6</p>
</li>
<li><p>WebAssembly 是一种可以使用非 JavaScript 编程语言编写代码并且能在浏览器上运行的技术方案。、</p>
</li>
<li><p>ES5,ES6中this指向</p>
</li>
<li><p>理解 JavaScript 中的 This, Bind, Call 和 Apply<br><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html">详情</a></p>
</li>
<li><p>如何判断object是数组类型？<br>1、从原型入手，Array.prototype.isPrototypeOf(obj);<br>2.Array.isArray()方法。例：Array.isArray([1, 2, 3]);  &#x2F;&#x2F; true</p>
</li>
<li><p>精确获取页面元素位置的方式有哪些</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> X= <span class="variable language_">this</span>.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>;</span><br><span class="line"><span class="keyword">var</span> Y =<span class="variable language_">this</span>.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line"><span class="comment">//再加上滚动距离，就可以得到绝对位置</span></span><br><span class="line"><span class="keyword">var</span> X= <span class="variable language_">this</span>.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>+<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>;</span><br><span class="line"><span class="keyword">var</span> Y =<span class="variable language_">this</span>.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>+<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件委托<br>又叫事件代理，利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件；<br>作用：<br>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p>
</li>
</ol>
<p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了（内存不够用，是硬伤，哈哈），比如上面的100个li，就要占用100个内存空间，如果是1000个，10000个呢，那只能说呵呵了，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p>
<ol start="13">
<li><p>构造函数<br>实例的__proto__属性（原型）等于其构造函数的prototype属性<br>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="number">1.</span> p.<span class="property">__proto__</span>等于什么？<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="number">2.</span> <span class="title class_">Person</span>.<span class="property">__proto</span>等于什么？ <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>匿名函数 又称IIFE(为了隔离作用域，防止污染全局命名空间。) 函数名没有意义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;+</span><br><span class="line">)()</span><br><span class="line">==</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;;<span class="title function_">a</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>宏任务和微任务</p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>webpack插件 prerender-spa-plugin 预渲染</p>
</li>
<li><p>在浏览器输入URL回车之后发生了什么</p>
</li>
</ol>
<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置一个函数输出一下的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 1 把所有参数转换成数组</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 2 再次调用add函数，传递合并当前与之前的参数</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> arg_fn = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> add.<span class="title function_">apply</span>(<span class="literal">null</span>, args.<span class="title function_">concat</span>(arg_fn))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3 最后默认调用，返回合并的值</span></span><br><span class="line">    fn.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> add.<span class="title function_">apply</span>(<span class="literal">null</span>, args.<span class="title function_">concat</span>([...<span class="variable language_">arguments</span>]))</span><br><span class="line">    &#125; </span><br><span class="line">    fn.<span class="property">toString</span> = <span class="function">() =&gt;</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原型，原型链，原型继承，继承方式"><a href="#原型，原型链，原型继承，继承方式" class="headerlink" title="原型，原型链，原型继承，继承方式"></a>原型，原型链，原型继承，继承方式</h3><p><a href="https://juejin.im/post/6875152247714480136">https://juejin.im/post/6875152247714480136</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>判断android和ios</title>
    <url>/blog/2016/09/14/%E5%88%A4%E6%96%ADandroid%E5%92%8Cios/</url>
    <content><![CDATA[<h3 id="与APP交互"><a href="#与APP交互" class="headerlink" title="与APP交互"></a>与APP交互</h3><p>很多时候APP中会嵌套H5的页面，这个时候与APP的交互就显得尤为重要，一般我们与APP交互会在window对象下构造一个共用函数，并且需要时返回指定约定的值，APP那边会根据约定的值去执行相应的操作，从而达到交互的目的；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如：window.nativeBack = function()&#123;return 1&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="判断android和ios"><a href="#判断android和ios" class="headerlink" title="判断android和ios"></a>判断android和ios</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> browser = &#123;</span><br><span class="line"><span class="attr">versions</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//注：有的浏览器是可以改变userAgent信息的</span></span><br><span class="line"><span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>, app = navigator.<span class="property">appVersion</span>;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="comment">//移动终端浏览器版本信息 </span></span><br><span class="line"><span class="attr">ios</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端 </span></span><br><span class="line"><span class="attr">android</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//android终端或uc浏览器 </span></span><br><span class="line"><span class="attr">iPhone</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器 </span></span><br><span class="line"><span class="attr">iPad</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否iPad </span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (browser.<span class="property">versions</span>.<span class="property">iPhone</span> || browser.<span class="property">versions</span>.<span class="property">iPad</span> || browser.<span class="property">versions</span>.<span class="property">ios</span>) &#123;</span><br><span class="line"><span class="comment">//说明是ios系统</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (browser.<span class="property">versions</span>.<span class="property">android</span>) &#123;</span><br><span class="line"><span class="comment">//说明是Android系统</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发工具使用</title>
    <url>/blog/2019/03/20/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="vscode来写scss，并且保存时自动生成并更新-css和-min-css文件：安装Easy-Sass"><a href="#vscode来写scss，并且保存时自动生成并更新-css和-min-css文件：安装Easy-Sass" class="headerlink" title="vscode来写scss，并且保存时自动生成并更新.css和.min.css文件：安装Easy Sass"></a>vscode来写scss，并且保存时自动生成并更新.css和.min.css文件：安装Easy Sass</h2><h2 id="自定义vscode分隔符"><a href="#自定义vscode分隔符" class="headerlink" title="自定义vscode分隔符"></a>自定义vscode分隔符</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 如下是被vscode认为是分隔符的字符</span></span><br><span class="line">  <span class="comment">// 我们在设置中搜索editor.wordSeparators</span></span><br><span class="line">  <span class="comment">// 然后根据自己的需要删除不想要的分隔符即可</span></span><br><span class="line">  <span class="comment">// 比如删除-，我们就可以双击选中-分割的class类名</span></span><br><span class="line">  <span class="attr">&quot;editor.wordSeparators&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`~#!@$%^&amp;*()-=+[&#123;]&#125;\\|;:&#x27;\&quot;,&lt;&gt;/?.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="快速打印"><a href="#快速打印" class="headerlink" title="快速打印"></a>快速打印</h3><p><code>clo</code>+tab键可以快速打印想要打印的内容，并且会以key,value格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// clo + tab</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>, first)</span><br></pre></td></tr></table></figure>

<h3 id="vscode禁止通过拖放来移动选中内容"><a href="#vscode禁止通过拖放来移动选中内容" class="headerlink" title="vscode禁止通过拖放来移动选中内容"></a>vscode禁止通过拖放来移动选中内容</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改为false即可禁止拖动</span></span><br><span class="line"><span class="attr">&quot;editor.dragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<h3 id="禁止自动合并文件夹"><a href="#禁止自动合并文件夹" class="headerlink" title="禁止自动合并文件夹"></a>禁止自动合并文件夹</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改为false文件夹不会再因为只有一个文件目录而自动合并</span></span><br><span class="line"><span class="attr">&quot;explorer.compactFolders&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<h2 id="自己动手，丰衣足食，设计不给切图，只好自己来了，记录一些PS坑-技能"><a href="#自己动手，丰衣足食，设计不给切图，只好自己来了，记录一些PS坑-技能" class="headerlink" title="自己动手，丰衣足食，设计不给切图，只好自己来了，记录一些PS坑&amp;&amp;技能"></a>自己动手，丰衣足食，设计不给切图，只好自己来了，记录一些PS坑&amp;&amp;技能</h2><h3 id="两种方法解决ps错误代码16"><a href="#两种方法解决ps错误代码16" class="headerlink" title="两种方法解决ps错误代码16"></a>两种方法解决ps错误代码16</h3><p>1.鼠标右键ps图标，选择“以管理员身份运行”，此时即可打开photoshop<br>2.鼠标右键ps图标，选择“属性”，<br>在photoshop属性框中，勾选“以兼容模式运行这个程序”，并在下拉列表中选择“window xp （srevice  pack3），点击“确定”保存。<br>此时再双击ps图标即可打开软件了</p>
<h3 id="永久激活PS"><a href="#永久激活PS" class="headerlink" title="永久激活PS"></a>永久激活PS</h3><p><a href="https://www.3d66.com/softhtml/softsetup_376.html">激活方法，目前是2015.5版本的PS</a></p>
<h3 id="动态创建vconsole移动端调试神器"><a href="#动态创建vconsole移动端调试神器" class="headerlink" title="动态创建vconsole移动端调试神器"></a>动态创建vconsole移动端调试神器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (location.<span class="property">hostname</span> == <span class="string">&quot;svip-test.jia-expo.com&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    script.<span class="property">src</span> = <span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/vConsole/3.3.0/vconsole.min.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vConsole = <span class="keyword">new</span> <span class="title class_">VConsole</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片占位"><a href="#图片占位" class="headerlink" title="图片占位"></a>图片占位</h3><p><a href="https://via.placeholder.com/320x240">https://via.placeholder.com/320x240</a> 即可生成一张320*240的空白图片占位</p>
<h3 id="API请求调试工具"><a href="#API请求调试工具" class="headerlink" title="API请求调试工具"></a>API请求调试工具</h3><p><a href="https://hoppscotch.io/">https://hoppscotch.io/</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序写点垃圾代码</title>
    <url>/blog/2020/06/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%99%E7%82%B9%E5%9E%83%E5%9C%BE%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="列表倒计时"><a href="#列表倒计时" class="headerlink" title="列表倒计时"></a>列表倒计时</h3><blockquote>
<p>find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。<br>find() 方法为数组中的每个元素都调用一次函数执行：<br>当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。<br>如果没有符合条件的元素返回 undefined<br>注意: find() 对于空数组，函数是不会执行的。<br>注意: find() 并没有改变数组的原始值。</p>
</blockquote>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加倒计时参数res为接口返回数据列表</span></span><br><span class="line">res.<span class="title function_">find</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="comment">//expire_time为接口返回截止时间的时间戳</span></span><br><span class="line">    <span class="keyword">let</span> endDate = v.<span class="property">expire_time</span> * <span class="number">1000</span> - nowTime;</span><br><span class="line">    <span class="keyword">if</span> (endDate &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//倒计时</span></span><br><span class="line">    <span class="keyword">let</span> stop = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//days | hour 分别表示天和小时</span></span><br><span class="line">        <span class="comment">//days = Math.floor(time.t / 1000 / 60 / 60 / 24);</span></span><br><span class="line">        <span class="comment">//hour = Math.floor(time.t / 1000 / 60 / 60 % 24);</span></span><br><span class="line">        <span class="keyword">let</span> minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>((endDate / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">let</span> second = <span class="title class_">Math</span>.<span class="title function_">floor</span>((endDate / <span class="number">1000</span>) % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">let</span> min = minute &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + minute : minute;</span><br><span class="line">        <span class="keyword">let</span> sec = second &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + second : second;</span><br><span class="line">        <span class="keyword">if</span> (endDate &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">//如果倒计时结束，改变当前订单状态，重新赋值orderList数据即可</span></span><br><span class="line">          v.<span class="property">status</span> = -<span class="number">1</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">orderList</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">orderList</span></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="built_in">clearInterval</span>(stop);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          endDate -= <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v.<span class="property">goods_time</span> = min + <span class="string">&quot;:&quot;</span> + sec;</span><br><span class="line">        <span class="comment">//每秒重新赋值orderList数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">orderList</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">orderList</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       v.<span class="property">status</span> = -<span class="number">1</span>;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">         <span class="attr">orderList</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">orderList</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里着重强调，其实最合理的还是把列表分成单个组件，在组件中写倒计时代码，这样避免遍历带来的各种问题，又不用考虑列表各模块互相影响</p>
</blockquote>
<h3 id="web-view正确使用"><a href="#web-view正确使用" class="headerlink" title="web-view正确使用"></a>web-view正确使用</h3><p>小程序页面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;imgUrlNew&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">url</span>=<span class="string">&quot;/pages/webview/webview?skipUrl=&#123;&#123;item.url&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;item.img&#125;&#125;&#x27;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>封装webview的页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- webview.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;skipUrl&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在webview.js中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">id</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">imgUrl</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//获取到链接中的webview链接参数,传入的链接要encode，否则如果链接有其他字符会被截断，然后赋值时再decode</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">skipUrl</span>: <span class="built_in">decodeURIComponent</span>(options.<span class="property">skipUrl</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="父子自定义组件传参-数据绑定"><a href="#父子自定义组件传参-数据绑定" class="headerlink" title="父子自定义组件传参+数据绑定"></a>父子自定义组件传参+数据绑定</h3><p>子组件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;onClose&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件的方法列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">onClose</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//triggerEvent方法参数：事件名、detail对象和事件选项</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&quot;closeReserve&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;我是子组件传给父组件的数据&quot;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hot-goods-popup</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;reserveSuccess&#125;&#125;&quot;</span> <span class="attr">bindcloseReserve</span>=<span class="string">&quot;closeReserve&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件的方法列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">closeReserve</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">reserveSuccess</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序直播相关</title>
    <url>/blog/2020/06/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="直播插件"><a href="#直播插件" class="headerlink" title="直播插件"></a>直播插件</h3><p>因为小程序组件<code>&lt;live-player /&gt;</code>需要直播相关主体，所以用了腾讯云直播插件<code>&lt;live-room-play /&gt;</code><br><a href="https://cloud.tencent.com/document/product/1078/42916">相关文档</a><br>其中有个播放状态监控：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里有个小窗播放`picture-in-picture-mode`此插件1.3.0版本已经支持，但是没实现了，不知原因，查找中... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">live-room-play</span> <span class="attr">class</span>=<span class="string">&quot;live-room&quot;</span> <span class="attr">objectFit</span>=<span class="string">&quot;contain&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2&quot;</span> <span class="attr">picture-in-picture-mode</span>=<span class="string">&quot;[&#x27;push&#x27;, &#x27;pop&#x27;]&quot;</span> <span class="attr">liveAppID</span>=<span class="string">&quot;&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;&#123;&#123;autoPlay&#125;&#125;&quot;</span> <span class="attr">bindPlayEvent</span>=<span class="string">&quot;playStatus&quot;</span> <span class="attr">bindNetStatus</span>=<span class="string">&quot;netStatus&quot;</span> <span class="attr">autopause</span>=<span class="string">&quot;true&quot;</span> <span class="attr">bindError</span>=<span class="string">&quot;error&quot;</span> <span class="attr">playUrl</span>=<span class="string">&quot;&#123;&#123;playUrl&#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//播放状态变化事件回调</span></span><br><span class="line"><span class="title function_">playStatus</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;播放状态&quot;</span>, e.<span class="property">detail</span>.<span class="property">detail</span>)</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">code</span> == <span class="number">2004</span>) &#123;</span><br><span class="line">    <span class="comment">//视频播放开始</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">livePause</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">code</span> == <span class="number">2001</span>) &#123;</span><br><span class="line">    <span class="comment">//已经连接服务器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">code</span> == <span class="number">2103</span>) &#123;</span><br><span class="line">    <span class="comment">//网络断连, 启动自动重连</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">liveEnd</span>) &#123;</span><br><span class="line">      <span class="comment">//直播结束不再请求</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">code</span> == -<span class="number">2301</span>) &#123;</span><br><span class="line">    <span class="comment">// -2301:网络断连且经多次重连抢救无效</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">autoPlay</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">livePause</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始请求直播拉流&quot;</span>)</span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">playUrl</span>: that.<span class="property">data</span>.<span class="property">playUrl</span>,</span><br><span class="line">          <span class="attr">autoPlay</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        that.<span class="property">liveRoomComponent</span> &amp;&amp; that.<span class="property">liveRoomComponent</span>.<span class="title function_">start</span>();</span><br><span class="line">      &#125;, <span class="number">5000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">code</span> == <span class="number">2006</span>) &#123;</span><br><span class="line">    <span class="comment">//2006:视频播放结束;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">liveEnd</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="即时通信IM"><a href="#即时通信IM" class="headerlink" title="即时通信IM"></a>即时通信IM</h3><h5 id="因为是直播，所以IM类型选择直播群"><a href="#因为是直播，所以IM类型选择直播群" class="headerlink" title="因为是直播，所以IM类型选择直播群"></a>因为是直播，所以IM类型选择直播群</h5><p><a href="cloud.tencent.com/document/product/269/43002">官方文档很详细</a></p>
<p>这里加几个注意的点：</p>
<h5 id="1-IM设置头像昵称要在ready之后调用"><a href="#1-IM设置头像昵称要在ready之后调用" class="headerlink" title="1. IM设置头像昵称要在ready之后调用"></a>1. IM设置头像昵称要在ready之后调用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tim.<span class="title function_">on</span>(<span class="variable constant_">TIM</span>.<span class="property">EVENT</span>.<span class="property">SDK_READY</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// SDK ready 后接入侧才可以调用 sendMessage 等需要鉴权的接口，否则会提示失败！</span></span><br><span class="line">  <span class="comment">// event.name - TIM.EVENT.SDK_READY</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SDK ready&quot;</span>, event)</span><br><span class="line">  <span class="comment">// 修改个人标配资料</span></span><br><span class="line">  tim.<span class="title function_">updateMyProfile</span>(&#123;</span><br><span class="line">    <span class="attr">nick</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;wxUserInfo&#x27;</span>).<span class="property">nickName</span>,</span><br><span class="line">    <span class="attr">avatar</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;wxUserInfo&#x27;</span>).<span class="property">avatarUrl</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">imResponse</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(imResponse.<span class="property">data</span>); <span class="comment">// 更新资料成功</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">imError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;updateMyProfile error:&#x27;</span>, imError); <span class="comment">// 更新资料失败的相关信息</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-有成员加群回调只有调用登录tim-login方法-再调用加群tim-joinGroup方法-才会触发"><a href="#2-有成员加群回调只有调用登录tim-login方法-再调用加群tim-joinGroup方法-才会触发" class="headerlink" title="2.有成员加群回调只有调用登录tim.login方法 再调用加群tim.joinGroup方法 才会触发"></a>2.有成员加群回调只有调用登录<code>tim.login</code>方法 再调用加群<code>tim.joinGroup</code>方法 才会触发</h5><p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录IM</span></span><br><span class="line">tim.<span class="title function_">login</span>(&#123;</span><br><span class="line">  <span class="attr">userID</span>: uid, <span class="comment">//用户ID后台返回的用户ID</span></span><br><span class="line">  <span class="attr">userSig</span>: data.<span class="property">data</span>.<span class="property">UserSig</span> <span class="comment">//后台返回的根据用户ID生成的加密串</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">imResponse</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录成功&quot;</span>, imResponse.<span class="property">data</span>); <span class="comment">// 登录成功</span></span><br><span class="line">  tim.<span class="title function_">joinGroup</span>(&#123;</span><br><span class="line">    <span class="attr">groupID</span>: that.<span class="property">data</span>.<span class="property">groupID</span>,  <span class="comment">//群ID</span></span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">TIM</span>.<span class="property">TYPES</span>.<span class="property">GRP_AVCHATROOM</span> <span class="comment">//类型为直播群必填字段</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">imResponse</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加群成功&quot;</span>, imResponse)</span><br><span class="line">    <span class="keyword">switch</span> (imResponse.<span class="property">data</span>.<span class="property">status</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="variable constant_">TIM</span>.<span class="property">TYPES</span>.<span class="property">JOIN_STATUS_SUCCESS</span>: <span class="comment">// 加群成功</span></span><br><span class="line">        <span class="comment">// console.log(imResponse.data.group) // 加入的群组资料</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="variable constant_">TIM</span>.<span class="property">TYPES</span>.<span class="property">JOIN_STATUS_ALREADY_IN_GROUP</span>: <span class="comment">// 已经在群中</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">imError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;加群失败&#x27;</span>, imError) <span class="comment">// 申请加群失败的相关信息</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">resolve</span>(imResponse)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">imError</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;登录IM失败:&#x27;</span>, imError); <span class="comment">// 登录失败的相关信息</span></span><br><span class="line">  <span class="title function_">reject</span>(imError)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="3-判断是否被禁言，调用发消息（包括各种类型的消息）前先判断是否被禁言，如果禁言调用发消息会报错（注意必须在SDK-READY之后调用）"><a href="#3-判断是否被禁言，调用发消息（包括各种类型的消息）前先判断是否被禁言，如果禁言调用发消息会报错（注意必须在SDK-READY之后调用）" class="headerlink" title="3.判断是否被禁言，调用发消息（包括各种类型的消息）前先判断是否被禁言，如果禁言调用发消息会报错（注意必须在SDK_READY之后调用）"></a>3.判断是否被禁言，调用发消息（包括各种类型的消息）前先判断是否被禁言，如果禁言调用发消息会报错（注意必须在SDK_READY之后调用）</h5><p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否被禁言</span></span><br><span class="line"><span class="title function_">checkUserBanned</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tim.<span class="title function_">getGroupMemberProfile</span>(&#123;</span><br><span class="line">      <span class="attr">groupID</span>: that.<span class="property">data</span>.<span class="property">groupID</span>,</span><br><span class="line">      <span class="attr">userIDList</span>: [wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>).<span class="property">uid</span>] <span class="comment">//用户ID，必须为数组</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">imResponse</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(imResponse.data.memberList); // 群成员列表</span></span><br><span class="line">      <span class="title function_">resolve</span>(imResponse.<span class="property">data</span>.<span class="property">memberList</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">imError</span>) &#123;</span><br><span class="line">      <span class="comment">// console.warn(&#x27;getGroupMemberProfile error:&#x27;, imError);</span></span><br><span class="line">      <span class="title function_">reject</span>(imError)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//检查是否被禁言,这样调用还有个弊端，每次发消息都会请求禁言接口，导致发消息很慢，所以我优化成了调用login时判断此用户是否被禁言</span></span><br><span class="line">that.<span class="title function_">checkUserBanned</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> groupMember <span class="keyword">of</span> res) &#123;</span><br><span class="line">    <span class="keyword">if</span> (groupMember.<span class="property">muteUntil</span> * <span class="number">1000</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>()) &#123;</span><br><span class="line">      <span class="comment">//禁言中</span></span><br><span class="line">      wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;您已被禁言&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//未禁言</span></span><br><span class="line">      <span class="keyword">let</span> message = tim.<span class="title function_">createCustomMessage</span>(&#123;</span><br><span class="line">        <span class="attr">to</span>: that.<span class="property">data</span>.<span class="property">groupID</span>,</span><br><span class="line">        <span class="attr">conversationType</span>: <span class="variable constant_">TIM</span>.<span class="property">TYPES</span>.<span class="property">CONV_GROUP</span>,</span><br><span class="line">        <span class="attr">payload</span>: &#123;</span><br><span class="line">          <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 用于标识该消息是什么类型自定义消息</span></span><br><span class="line">          <span class="attr">description</span>: that.<span class="property">liveId</span>, <span class="comment">// 直播ID</span></span><br><span class="line">          <span class="attr">extension</span>: number + <span class="string">&quot;&quot;</span> <span class="comment">// </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 3. 发送消息</span></span><br><span class="line">      <span class="keyword">let</span> promise = tim.<span class="title function_">sendMessage</span>(message);</span><br><span class="line">      promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">imResponse</span>) &#123;</span><br><span class="line">        <span class="comment">// 发送成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(imResponse);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">imError</span>) &#123;</span><br><span class="line">        <span class="comment">// 发送失败</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;sendMessage error:&#x27;</span>, imError);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="4-进场消息、购买消息等只显示一次，并且显示时间相同的消息实现"><a href="#4-进场消息、购买消息等只显示一次，并且显示时间相同的消息实现" class="headerlink" title="4.进场消息、购买消息等只显示一次，并且显示时间相同的消息实现"></a>4.进场消息、购买消息等只显示一次，并且显示时间相同的消息实现</h5><ul>
<li>基本原理就是<code>onShow</code>生命周期触发一个定时器方法，在收到进群消息或购买消息回调之后，把收到的消息push到一个相同的数组中，然后页面只展示第一条数组，因为动画是三秒一条消息，所以定时器三秒轮询一次，第一条三秒之后删除，这样不会导致数组内存过大，<br>示例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">tipMsg</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">buyMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="comment">//收到购买消息回调之后，往tipsData数组push一条数据，定时器监测到有数据便会渲染出来</span></span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  res.<span class="property">avatar</span> = message.<span class="property">avatar</span>;</span><br><span class="line">  res.<span class="property">nick</span> = message.<span class="property">nick</span>;</span><br><span class="line">  res.<span class="property">type</span> = <span class="number">3</span>;</span><br><span class="line">  that.<span class="property">data</span>.<span class="property">tipsData</span>.<span class="title function_">push</span>(res)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">tipMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  that.<span class="property">tipTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">data</span>.<span class="property">tipsData</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">tipsDatas</span>: that.<span class="property">data</span>.<span class="property">tipsData</span>[<span class="number">0</span>] <span class="comment">//这里的tipsData对象便是要渲染到页面中的单条数据</span></span><br><span class="line">      &#125;)</span><br><span class="line">      that.<span class="title function_">tipAnimation</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">tipAnimation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> animation = wx.<span class="title function_">createAnimation</span>(&#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">300</span></span><br><span class="line">  &#125;)</span><br><span class="line">  animation.<span class="title function_">translateX</span>(<span class="number">0</span>).<span class="title function_">step</span>()</span><br><span class="line">  that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">animationData</span>: animation.<span class="title function_">export</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    animation.<span class="title function_">translateX</span>(<span class="string">&#x27;-100%&#x27;</span>).<span class="title function_">step</span>(&#123;</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">animationData</span>: animation.<span class="title function_">export</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    that.<span class="property">data</span>.<span class="property">tipsData</span>.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="comment">// console.log(that.data.tipsData)</span></span><br><span class="line">  &#125;, <span class="number">2700</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<p>tips：这样应该不是最优解，毕竟定时器触发还是有点耗性能的，loading…</p>
<p>这样做下来直播IM还是相对简单的，毕竟用的API还没有十分之一，很多API都是聊天群才用到的</p>
<h3 id="小程序云点播功能需要插件并且需要买流量买插件，所以用了H5的播放器"><a href="#小程序云点播功能需要插件并且需要买流量买插件，所以用了H5的播放器" class="headerlink" title="小程序云点播功能需要插件并且需要买流量买插件，所以用了H5的播放器"></a>小程序云点播功能需要插件并且需要买流量买插件，所以用了H5的播放器</h3><p>1.自动播放：查了很多没实现，基本都说，微信浏览器必须有用户操作行为才会播放</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://imgcache.qq.com/open/qcloud/video/tcplayer/tcplayer.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果需要在 Chrome 和 Firefox 等现代浏览器中通过 H5 播放 HLS 格式的视频，需要在 tcplayer.v4.1.min.js 之前引入 hls.min.0.13.2m.js。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://imgcache.qq.com/open/qcloud/video/tcplayer/libs/hls.min.0.13.2m.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--播放器脚本文件，不转码用下面这个js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://imgcache.qq.com/open/qcloud/video/tcplayer/tcplayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--播放器脚本文件，转码用下面这个js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://imgcache.qq.com/open/qcloud/video/tcplayer/tcplayer.v4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置播放器容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;player-container-id&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">playsinline</span> <span class="attr">webkit-playsinline</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">player</span> = <span class="title class_">TCPlayer</span>(<span class="string">&quot;player-container-id&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// player-container-id 为播放器容器 ID，必须与 html 中一致</span></span><br><span class="line">  <span class="attr">fileID</span>: data.<span class="property">data</span>[<span class="number">0</span>].<span class="property">file_id</span>, <span class="comment">// 请传入需要播放的视频 filID（必须）</span></span><br><span class="line">  <span class="attr">appID</span>: <span class="string">&quot;1500001289&quot;</span>, <span class="comment">// 请传入点播账号的 appID（必须）</span></span><br><span class="line">  <span class="comment">// autoplay: true,</span></span><br><span class="line">  <span class="comment">// plugins: &#123;</span></span><br><span class="line">  <span class="comment">// 	ContinuePlay: &#123;</span></span><br><span class="line">  <span class="comment">// 		// 开启续播功能</span></span><br><span class="line">  <span class="comment">// 		auto: true //[可选] 是否在视频播放后自动续播</span></span><br><span class="line">  <span class="comment">// 	&#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 切换播放视频</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">chooseVideo</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentId</span> = v.<span class="property">file_id</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">player</span>.<span class="title function_">loadVideoByID</span>(&#123;</span><br><span class="line">      <span class="attr">fileID</span>: v.<span class="property">file_id</span>, <span class="comment">// 请传入需要播放的视频 filID（必须）</span></span><br><span class="line">      <span class="attr">appID</span>: <span class="string">&quot;1500001289&quot;</span> <span class="comment">// 请传入点播账号的 appID（必须）</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的git命令</title>
    <url>/blog/2016/09/18/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="关于git的几个专用名词"><a href="#关于git的几个专用名词" class="headerlink" title="关于git的几个专用名词"></a>关于git的几个专用名词</h3><ul>
<li>Workspace：工作区</li>
<li>Index &#x2F; Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在当前目录新建一个git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line">//克隆一个项目</span><br><span class="line">$ git clone https://github.com/gxhpersonal/blog.git</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<pre><code>// 设置提交代码时的用户信息
git config --global user.name &quot;gxhpersonal&quot;
git config --global user.email &quot;991158744@qq.com&quot;
</code></pre>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><pre><code>//显示有变更的文件
$ git status
</code></pre>
<h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><pre><code>//添加当前目录的所有文件到暂存区
$ git add .

//添加每个变化前，都会要求确认
//对于同一个文件的多处变化，可以实现分次提交
$ git add -p

//删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

//改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><pre><code>//提交暂存区到仓库区
$ git commit -m &quot;改的内容标题&quot;

//提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a
</code></pre>
<h3 id="新建的分支push到远程服务器上"><a href="#新建的分支push到远程服务器上" class="headerlink" title="新建的分支push到远程服务器上"></a>新建的分支push到远程服务器上</h3><pre><code>$ git push -u origin [分支名]
</code></pre>
<h3 id="远程代码取到本地"><a href="#远程代码取到本地" class="headerlink" title="远程代码取到本地"></a>远程代码取到本地</h3><pre><code>$ git pull
</code></pre>
<h3 id="本地代码提交到远程仓库"><a href="#本地代码提交到远程仓库" class="headerlink" title="本地代码提交到远程仓库"></a>本地代码提交到远程仓库</h3><pre><code>$ git push
</code></pre>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line">//列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line">//列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line">//新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line">//新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line">//切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line">//切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line">//合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line">//选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line">//删除本地分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line">//删除远程分支</span><br><span class="line">$ git push origin :[branch-name]</span><br></pre></td></tr></table></figure>

<h3 id="指定某个commit到指定的分支"><a href="#指定某个commit到指定的分支" class="headerlink" title="指定某个commit到指定的分支"></a>指定某个commit到指定的分支</h3><p>1.执行<code>git log -3 --graph test</code>，查看test分支下的commit:</p>
<blockquote>
<p>注：commit 后面的hash值代表某个commit，这里把”2e1ada53819d46557b24ee7376dc61d37a06939d”这个commit提交到master。</p>
</blockquote>
<p>2.执行<code>git checkout master</code>，切换到master分支。</p>
<p>3.执行<code> git cherry-pick 2e1ada53819d46557b24ee7376dc61d37a06939d</code>，该commit便被提交到了master分支。</p>
<p>到此，”2e1ada53819d46557b24ee7376dc61d37a06939d” 这个commit便被提交到了master分支。</p>
<h3 id="回退到某个commit，并提交远程"><a href="#回退到某个commit，并提交远程" class="headerlink" title="回退到某个commit，并提交远程"></a>回退到某个commit，并提交远程</h3><p>回退命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^         回退到上个版本</span><br><span class="line">$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前</span><br><span class="line">$ git reset --hard commit_id     退到/进到 指定commit的sha码</span><br></pre></td></tr></table></figure>

<p>强推到远程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果强推的分支为受保护分支（受保护分支是不允许进行<code>--force</code>操作），需要修改项目设置中受保护分支选项：<br>找到项目远程地址<code>Settings ——&gt; Repository ——&gt; Protected Branches ——&gt; Unprotect</code>撤销保护分支</p>
</blockquote>
<h3 id="git提交GitHub代码不再需要每次commit输入username和password解决"><a href="#git提交GitHub代码不再需要每次commit输入username和password解决" class="headerlink" title="git提交GitHub代码不再需要每次commit输入username和password解决"></a>git提交GitHub代码不再需要每次commit输入username和password解决</h3><p>1.在命令行输入命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<p>☞ 这一步会在用户目录下的.gitconfig文件最后添加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure>
<p>2.现在push你的代码 (git push), 这时会让你输入用户名密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码啦!<br>☞这一步会在用户目录下生成文件.git-credential 用来记录用户名密码的信息.<br>☞ <code>git config --global</code> 命令实际上在操作用户目录下的<code>.gitconfig</code>文件, 我们cat一下此文件(cat .gitconfig), 其内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line"> name = alice</span><br><span class="line"> email = alice@aol.com</span><br><span class="line">[push]</span><br><span class="line"> default = simple</span><br><span class="line">[credential]</span><br><span class="line"> helper = store</span><br></pre></td></tr></table></figure>
<ul>
<li>拓展：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;alice@aol.com&quot; 操作的就是上面的email</span><br><span class="line">git config --global push.default matching 操作的就是上面的push段中的default字段</span><br><span class="line">git config --global credential.helper store 操作的就是上面最后一行的值</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><h3 id="git-bisect-命令"><a href="#git-bisect-命令" class="headerlink" title="git bisect 命令"></a>git bisect 命令</h3><p>它的原理很简单，就是将代码提交的历史，按照两分法不断缩小定位。所谓”两分法”，就是将代码历史一分为二，确定问题出在前半部分，还是后半部分，不断执行这个过程，直到范围缩小到某一次代码提交。<br><a href="http://www.ruanyifeng.com/blog/2018/12/git-bisect.html">阮一峰老师博客</a></p>
<h3 id="用Git-Bash创建项目时，会遇到需要箭头选择项目依赖的情况"><a href="#用Git-Bash创建项目时，会遇到需要箭头选择项目依赖的情况" class="headerlink" title="用Git Bash创建项目时，会遇到需要箭头选择项目依赖的情况"></a>用Git Bash创建项目时，会遇到需要箭头选择项目依赖的情况</h3><p>1.在git bash中用箭头是无效的，因为有光标只会移动光标，可以用数字代替1代表选择第一个选项，以此类推。。；<br>2.用编辑器或者<code>cmd</code>命令创建项目。</p>
<h3 id="已经在-gitignore中忽略某个文件，还是会进行提交"><a href="#已经在-gitignore中忽略某个文件，还是会进行提交" class="headerlink" title="已经在.gitignore中忽略某个文件，还是会进行提交"></a>已经在.gitignore中忽略某个文件，还是会进行提交</h3><p>如果已经提交过改文件，文件在前面已经被 git 跟踪，在这之后再添加到 .gitignore 中是无效的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached 文件/文件夹名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉已经托管的文件，然后重新提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;提交说明&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="本地仓库和远程仓库关联"><a href="#本地仓库和远程仓库关联" class="headerlink" title="本地仓库和远程仓库关联"></a>本地仓库和远程仓库关联</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin 远程仓库地址</span><br></pre></td></tr></table></figure>
<h3 id="强制推送（慎用）​：仅限个人分支或团队协商后使用，会覆盖远程历史："><a href="#强制推送（慎用）​：仅限个人分支或团队协商后使用，会覆盖远程历史：" class="headerlink" title="强制推送（慎用）​：仅限个人分支或团队协商后使用，会覆盖远程历史："></a>强制推送（慎用）​：仅限个人分支或团队协商后使用，会覆盖远程历史：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --force origin 分支名</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>常见兼容问题处理</title>
    <url>/blog/2019/09/06/%E5%B8%B8%E8%A7%81%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="1-ios键盘唤起，键盘收起以后页面不归位解决"><a href="#1-ios键盘唤起，键盘收起以后页面不归位解决" class="headerlink" title="1.ios键盘唤起，键盘收起以后页面不归位解决"></a>1.ios键盘唤起，键盘收起以后页面不归位解决</h3><ul>
<li>现状：输入内容，软键盘弹出，页面内容整体上移，但是键盘收起，页面内容不下滑</li>
<li>原因：固定定位的元素 在元素内 input 框聚焦的时候 弹出的软键盘占位 失去焦点的时候软键盘消失 但是还是占位的 导致input框不能再次输入 在失去焦点的时候给一个事件</li>
<li>解决方法：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur.prevent</span>=<span class="string">&quot;blur()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">blur</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> u = navigator.<span class="property">userAgent</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">if</span>(isIOS)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">const</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(scrollHeight - <span class="number">1</span>, <span class="number">0</span>))</span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-安卓弹出的键盘遮盖文本框"><a href="#2-安卓弹出的键盘遮盖文本框" class="headerlink" title="2.安卓弹出的键盘遮盖文本框"></a>2.安卓弹出的键盘遮盖文本框</h3><ul>
<li>现状：安卓微信H5弹出软键盘后挡住input输入框</li>
<li>原因：因为调用安卓键盘有一点迟钝，导致如果不延时处理的话，滚动就失效了</li>
<li>解决方法：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">focus</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> u = navigator.<span class="property">userAgent</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> isAndroid = u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(isAndroid)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">scrollIntoViewIfNeeded</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">scrollIntoView</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Element.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动</p>
</blockquote>
</li>
</ul>
<h3 id="3-Vue中路由使用hash模式，开发微信H5页面分享时在安卓上设置分享成功，但是ios的分享异常"><a href="#3-Vue中路由使用hash模式，开发微信H5页面分享时在安卓上设置分享成功，但是ios的分享异常" class="headerlink" title="3.Vue中路由使用hash模式，开发微信H5页面分享时在安卓上设置分享成功，但是ios的分享异常"></a>3.Vue中路由使用hash模式，开发微信H5页面分享时在安卓上设置分享成功，但是ios的分享异常</h3><ul>
<li>现状：ios当前页面分享给好友，点击进来是正常，如果二次分享，则异常；使用vue router跳转到第二个页面后在分享时，分享设置失败；以上安卓分享都是正常</li>
<li>原因：jssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from&#x3D;singlemessage&amp;isappinstalled&#x3D;0 以及其他参数，<code>#/</code>在微信中会被截断，导致分享链接和传入API的链接不一样</li>
<li>解决方法：分享的url再ios下加个编码方法encodeURIComponent(url)</li>
</ul>
<h3 id="4-ios下input样式问题"><a href="#4-ios下input样式问题" class="headerlink" title="4.ios下input样式问题"></a>4.ios下input样式问题</h3><p>1.ios下如果想要禁用input,input设置为readonly仍然会呼起键盘，所以必须设置disabled属性。<br>2.ios下设置为disabled属性，input表单背景颜色会变灰，透明度会降低，所以，必须设置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>:<span class="number">1</span>;</span><br><span class="line">  bakcground:<span class="number">#fff</span>;</span><br><span class="line">  -webkit-<span class="selector-tag">text</span>-<span class="attribute">fill</span>-<span class="attribute">color</span>:<span class="number">#2e3d4c</span>;//字体颜色填充这个属性可以解决IOS字体颜色变淡的问题</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而，设置了-webkit-text-fill-color属性还是会有问题，placeholder字体颜色也会跟着改变，所以placeholder也要设置-webkit-text-fill-color值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 题外话：（设置渐变字体） */</span></span><br><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top,<span class="number">#fc0</span>,<span class="number">#f30</span> <span class="number">50%</span>,<span class="number">#c00</span> <span class="number">51%</span>,<span class="number">#600</span>);</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  -webkit-<span class="selector-tag">text</span>-<span class="attribute">fill</span>-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果想设置渐变字体，要保证这个标签中只有要设置的文本，不能有其他标签，否则在PC浏览器正常，而在iOS中显示不出来</p>
</blockquote>
<p>3.没错，iOS下就是各种坑，<br><code>user-select：none</code> 控制着用户能否选中文本<br>一般都不想被复制，所以全局使用这个属性，就会导致在ios中，input无法定位光标，无法输入；<br>所以慎用，或者局部使用；<br>或者给表单单独加个<code>user-select: auto;</code>默认值</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序canvas2d实例</title>
    <url>/blog/2020/04/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fcanvas2d%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="canvas不能wx-if隐藏，否则会获取不到元素，可以使用fixed-top-9999rpx实现"><a href="#canvas不能wx-if隐藏，否则会获取不到元素，可以使用fixed-top-9999rpx实现" class="headerlink" title="canvas不能wx:if隐藏，否则会获取不到元素，可以使用fixed+top:-9999rpx实现"></a>canvas不能wx:if隐藏，否则会获取不到元素，可以使用fixed+top:-9999rpx实现</h3><h3 id="canvas-2d生成背景图片不遮挡文字：使用await"><a href="#canvas-2d生成背景图片不遮挡文字：使用await" class="headerlink" title="canvas 2d生成背景图片不遮挡文字：使用await"></a>canvas 2d生成背景图片不遮挡文字：使用await</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bgImg = canvas.<span class="title function_">createImage</span>();</span><br><span class="line">      bgImg.<span class="property">src</span> = <span class="string">&#x27;http://www.guoxh.com/blog/img/blog/qr.png&#x27;</span>;</span><br><span class="line">      <span class="keyword">let</span> bgImgPo = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        bgImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(bgImg)</span><br><span class="line">        &#125;</span><br><span class="line">        bgImg.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(bgImgPo, <span class="number">0</span>, <span class="number">0</span>, <span class="number">257</span>, <span class="number">389</span>)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="canvas2d生成图片，本人菜，所以踩了很多坑，记录下步骤代码，温故而知新"><a href="#canvas2d生成图片，本人菜，所以踩了很多坑，记录下步骤代码，温故而知新" class="headerlink" title="canvas2d生成图片，本人菜，所以踩了很多坑，记录下步骤代码，温故而知新"></a>canvas2d生成图片，本人菜，所以踩了很多坑，记录下步骤代码，温故而知新</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存图片</span></span><br><span class="line"><span class="title function_">saveImg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//获取canvas实例，因为要获取canvas节点，所以不能使用wx:if隐藏</span></span><br><span class="line">  <span class="keyword">const</span> query = wx.<span class="title function_">createSelectorQuery</span>();</span><br><span class="line">  query.<span class="title function_">select</span>(<span class="string">&#x27;#canvas&#x27;</span>)</span><br><span class="line">    .<span class="title function_">fields</span>(&#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">exec</span>(<span class="title function_">async</span> (res) =&gt; &#123;</span><br><span class="line">      <span class="comment">//要在获取node节点回调执行保存</span></span><br><span class="line">      wx.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">width</span>: res[<span class="number">0</span>].<span class="property">width</span> * wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span>,</span><br><span class="line">        <span class="attr">height</span>: res[<span class="number">0</span>].<span class="property">height</span> * wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span>,</span><br><span class="line">        <span class="attr">destWidth</span>: res[<span class="number">0</span>].<span class="property">width</span> * wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span> * <span class="number">2</span>,</span><br><span class="line">        <span class="attr">destHeight</span>: res[<span class="number">0</span>].<span class="property">height</span> * wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span> * <span class="number">2</span>,</span><br><span class="line">        <span class="attr">canvas</span>: res[<span class="number">0</span>].<span class="property">node</span>,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">          wx.<span class="title function_">saveImageToPhotosAlbum</span>(&#123;</span><br><span class="line">            <span class="attr">filePath</span>: res.<span class="property">tempFilePath</span>,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">              wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;保存成功&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">complete</span>(<span class="params">res</span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">complete</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成海报</span></span><br><span class="line"><span class="title function_">getPost</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">//因为要获取手机号生成邀请码所以要先判断登录</span></span><br><span class="line">  <span class="keyword">if</span> (wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;isLogin&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">errMsg</span> != <span class="string">&quot;getUserInfo:ok&quot;</span>) &#123;</span><br><span class="line">      wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示!&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;请允许授权,否则无法生成海报!&#x27;</span>,</span><br><span class="line">        <span class="attr">showCancel</span>: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> avatar = e.<span class="property">detail</span>.<span class="property">userInfo</span>.<span class="property">avatarUrl</span></span><br><span class="line">    <span class="keyword">let</span> nickname = e.<span class="property">detail</span>.<span class="property">userInfo</span>.<span class="property">nickName</span></span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;海报生成中...&#x27;</span>,</span><br><span class="line">      <span class="attr">mask</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    wx.<span class="title function_">createSelectorQuery</span>().<span class="title function_">select</span>(<span class="string">&#x27;#canvas&#x27;</span>).<span class="title function_">fields</span>(&#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;).<span class="title function_">exec</span>(<span class="title function_">async</span> (res) =&gt; &#123;</span><br><span class="line">      <span class="comment">//要在获取node节点之后回调执行绘画</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span>;</span><br><span class="line">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> width = res[<span class="number">0</span>].<span class="property">width</span>;</span><br><span class="line">      <span class="keyword">const</span> height = res[<span class="number">0</span>].<span class="property">height</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">        <span class="comment">//这里加个开关只有第一次绘制才设置canvas宽高，因为多次点击显示隐藏不会重绘，所以会导致canvas画布越来越大</span></span><br><span class="line">        <span class="keyword">const</span> dpr = wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span></span><br><span class="line">        canvas.<span class="property">width</span> = width * dpr;</span><br><span class="line">        canvas.<span class="property">height</span> = height * dpr;</span><br><span class="line">        ctx.<span class="title function_">scale</span>(dpr, dpr);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">flag</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> bgImg = canvas.<span class="title function_">createImage</span>();</span><br><span class="line">      bgImg.<span class="property">src</span> = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;postBg&#x27;</span>);</span><br><span class="line">      <span class="keyword">let</span> bgImgPo = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        bgImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(bgImg)</span><br><span class="line">        &#125;</span><br><span class="line">        bgImg.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//背景图必须这样用await异步，否则背景图会把背景图上的文字遮盖，待老夫研究原理再补充（这里就要牵扯到promise回调属于微任务，排在同步任务之后，所以加async和await强制后面代码等待异步执行完再执行）</span></span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(bgImgPo, <span class="number">0</span>, <span class="number">0</span>, <span class="number">257</span>, <span class="number">389</span>)</span><br><span class="line">      <span class="comment">//用户昵称</span></span><br><span class="line">      ctx.<span class="property">font</span> = <span class="string">&quot;normal bold 14px sans-serif&quot;</span>;</span><br><span class="line">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">`<span class="subst">$&#123;nickname&#125;</span>邀您参加`</span>, <span class="number">42</span>, <span class="number">24</span>)</span><br><span class="line">      <span class="comment">//参与</span></span><br><span class="line">      ctx.<span class="property">font</span> = <span class="string">&quot;normal bold 14px sans-serif&quot;</span>;</span><br><span class="line">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">      ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;#4B32A9&quot;</span></span><br><span class="line">      ctx.<span class="title function_">strokeText</span>(<span class="string">&#x27;长按识别二维码参与&#x27;</span>, <span class="number">75</span>, <span class="number">373</span>)</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;长按识别二维码参与&#x27;</span>, <span class="number">75</span>, <span class="number">373</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//二维码裁剪</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">canvasQR</span>(<span class="params">qrImgUrl</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> qrImg = canvas.<span class="title function_">createImage</span>();</span><br><span class="line">        qrImg.<span class="property">src</span> = qrImgUrl;</span><br><span class="line">        qrImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          ctx.<span class="title function_">save</span>();</span><br><span class="line">          ctx.<span class="title function_">beginPath</span>() <span class="comment">//开始创建一个路径</span></span><br><span class="line">          ctx.<span class="title function_">arc</span>(<span class="number">128</span>, <span class="number">319</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>) <span class="comment">//画一个圆形裁剪区域</span></span><br><span class="line">          ctx.<span class="title function_">clip</span>() <span class="comment">//裁剪</span></span><br><span class="line">          ctx.<span class="title function_">drawImage</span>(qrImg, <span class="number">96</span>, <span class="number">287</span>, <span class="number">65</span>, <span class="number">65</span>);</span><br><span class="line">          ctx.<span class="title function_">closePath</span>();</span><br><span class="line">          ctx.<span class="title function_">restore</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">canvasQR</span>(<span class="string">&#x27;http://www.guoxh.com/blog/img/blog/qr.png&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//头像裁剪</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">canvasWxHeader</span>(<span class="params">headImageLocal</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> headerImg = canvas.<span class="title function_">createImage</span>();</span><br><span class="line">        headerImg.<span class="property">src</span> = headImageLocal;</span><br><span class="line">        headerImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          ctx.<span class="title function_">save</span>();</span><br><span class="line">          ctx.<span class="title function_">beginPath</span>() <span class="comment">//开始创建一个路径</span></span><br><span class="line">          ctx.<span class="title function_">arc</span>(<span class="number">26</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>) <span class="comment">//画一个圆形裁剪区域</span></span><br><span class="line">          ctx.<span class="title function_">clip</span>() <span class="comment">//裁剪</span></span><br><span class="line">          ctx.<span class="title function_">drawImage</span>(headerImg, <span class="number">14</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">30</span>);</span><br><span class="line">          ctx.<span class="title function_">closePath</span>();</span><br><span class="line">          ctx.<span class="title function_">restore</span>();</span><br><span class="line">          <span class="comment">//关闭loading</span></span><br><span class="line">          wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">canvasWxHeader</span>(avatar);</span><br><span class="line"></span><br><span class="line">      that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">postPopup</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/login/login&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="设置ctx-font-“normal-bold-14px-sans-serif”-一定要写全，或者不要写微信没有的字体，虽然我不知道微信没有什么字体，所以我就抄网上的，一定要记住，不然安卓会闪退-ㄒoㄒ"><a href="#设置ctx-font-“normal-bold-14px-sans-serif”-一定要写全，或者不要写微信没有的字体，虽然我不知道微信没有什么字体，所以我就抄网上的，一定要记住，不然安卓会闪退-ㄒoㄒ" class="headerlink" title="设置ctx.font &#x3D; “normal bold 14px sans-serif”;一定要写全，或者不要写微信没有的字体，虽然我不知道微信没有什么字体，所以我就抄网上的，一定要记住，不然安卓会闪退&#x2F;(ㄒoㄒ)&#x2F;~~"></a>设置ctx.font &#x3D; “normal bold 14px sans-serif”;一定要写全，或者不要写微信没有的字体，虽然我不知道微信没有什么字体，所以我就抄网上的，一定要记住，不然安卓会闪退&#x2F;(ㄒoㄒ)&#x2F;~~</h3>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>数字下降动画</title>
    <url>/blog/2018/11/21/%E6%95%B0%E5%AD%97%E4%B8%8B%E9%99%8D%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:#000;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1920&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1080&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">requestAnimFrame</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> ||</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span> ||</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span> ||</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> can = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cxt = can.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">can.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">width</span>;</span></span><br><span class="line"><span class="language-javascript">can.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">height</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> size = <span class="number">15</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cols = can.<span class="property">width</span> / size; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> y = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cols; i++)y[i] = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">(<span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">cxt.<span class="property">fillStyle</span> = <span class="string">&#x27;rgba(0,0,0,.1)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">cxt.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, can.<span class="property">width</span>, can.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">cxt.<span class="property">fillStyle</span> = <span class="string">&#x27;#27ff00&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">cxt.<span class="property">font</span> = <span class="string">&#x27;bold &#x27;</span> + size + <span class="string">&#x27;px Microsoft yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cols; i++)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> s = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) + <span class="string">&#x27;&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> textX = i * size; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> textY = y[i];</span></span><br><span class="line"><span class="language-javascript">cxt.<span class="title function_">fillText</span>(s, textX, textY); </span></span><br><span class="line"><span class="language-javascript">y[i] += size; </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (y[i] &gt;= can.<span class="property">height</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt;= <span class="number">0.9</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">y[i] = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">requestAnimFrame</span>(draw);</span></span><br><span class="line"><span class="language-javascript">&#125;)()		  		</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方与网站交互</title>
    <url>/blog/2019/04/23/%E7%AC%AC%E4%B8%89%E6%96%B9%E4%B8%8E%E7%BD%91%E7%AB%99%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h3 id="1-微信授权登录-拿到用户微信信息"><a href="#1-微信授权登录-拿到用户微信信息" class="headerlink" title="1.微信授权登录(拿到用户微信信息)"></a>1.微信授权登录(拿到用户微信信息)</h3><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842">详见</a><br>首先判断微信环境：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">if</span> (ua.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span> || ua.<span class="title function_">match</span>(<span class="regexp">/_SQ_/i</span>) == <span class="string">&#x27;_sq_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次带参跳转微信授权链接:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> redirect_uri = <span class="built_in">encodeURIComponent</span>(<span class="built_in">decodeURI</span>(location.<span class="property">href</span>)); <span class="comment">//授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</span></span><br><span class="line"><span class="keyword">let</span> appid = <span class="string">&quot;XXXXXX&quot;</span>;<span class="comment">//公众号的唯一标识</span></span><br><span class="line"><span class="keyword">let</span> component_appid = <span class="string">&quot;wx8c50eedcc9a785a1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> wxauth =</span><br><span class="line"><span class="string">&quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=&quot;</span> +</span><br><span class="line">appid +</span><br><span class="line"><span class="string">&quot;&amp;redirect_uri=&quot;</span> +</span><br><span class="line">redirect_uri +</span><br><span class="line"><span class="string">&quot;&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE&amp;component_appid=&quot;</span> +</span><br><span class="line">component_appid +</span><br><span class="line"><span class="string">&quot;#wechat_redirect&quot;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = wxauth;</span><br></pre></td></tr></table></figure>
<p>参数说明：<br>参数	      是否必须	   说明<br>appid	        是	公众号的唯一标识<br>redirect_uri	是	授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理<br>response_type	是	返回类型，请填写code<br>scope	        是	应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且，                       即使在未关注的情况下，只要用户授权，也能获取其信息 ）<br>state	        否	重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节<br>#wechat_redirect	是	 无论直接打开还是做页面302重定向时候，必须带此参数</p>
<h3 id="2-微信支付"><a href="#2-微信支付" class="headerlink" title="2.微信支付"></a>2.微信支付</h3><p>1&gt; 微信外网页中发起微信支付：<br><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4">详情见微信外h5支付官文</a></p>
<blockquote>
<p>回调页面<br>正常流程用户支付完成后会返回至发起支付的页面，如需返回至指定页面，则可以在MWEB_URL后拼接上redirect_url参数，来指定回调页面。<br>如，您希望用户支付完成后跳转至<a href="https://www.wechatpay.com.cn，则可以做如下处理：">https://www.wechatpay.com.cn，则可以做如下处理：</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设您通过统一下单接口获到的MWEB_URL= https://wx.tenpay.com/cgi-bin/mmpayweb-bin/checkmweb?prepay_id=wx20161110163838f231619da20804912345&amp;package=1037687096</span><br><span class="line">则拼接后的地址为MWEB_URL= https://wx.tenpay.com/cgi-bin/mmpayweb-bin/checkmweb?prepay_id=wx20161110163838f231619da20804912345&amp;package=1037687096&amp;redirect_url=https%3A%2F%2Fwww.wechatpay.com.cn</span><br></pre></td></tr></table></figure>
<p>注意：<br>  1.需对redirect_url进行urlencode处理</p>
<p>2&gt; 微信内网页发起微信支付：<br><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6">详情见微信内h5支付官文</a><br>首先判断微信环境：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">if</span> (ua.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span> || ua.<span class="title function_">match</span>(<span class="regexp">/_SQ_/i</span>) == <span class="string">&#x27;_sq_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(</span><br><span class="line">  <span class="string">&quot;getBrandWCPayRequest&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">appId</span>: res.<span class="property">app_id</span>, <span class="comment">//公众号名称，由商户传入</span></span><br><span class="line">    <span class="attr">timeStamp</span>: res.<span class="property">time_stamp</span>, <span class="comment">//时间戳，自1970年以来的秒数</span></span><br><span class="line">    <span class="attr">nonceStr</span>: res.<span class="property">nonce_str</span>, <span class="comment">//随机串</span></span><br><span class="line">    <span class="attr">package</span>: res.<span class="property">package</span>,</span><br><span class="line">    <span class="attr">signType</span>: <span class="string">&quot;MD5&quot;</span>, <span class="comment">//微信签名方式：</span></span><br><span class="line">    <span class="attr">paySign</span>: res.<span class="property">pay_sign</span> <span class="comment">//微信签名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&quot;get_brand_wcpay_request:ok&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span></span><br><span class="line">      <span class="comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        that.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/userCenter&quot;</span> + location.<span class="property">search</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>第三方与网站交互</category>
      </categories>
      <tags>
        <tag>第三方与网站交互</tag>
      </tags>
  </entry>
  <entry>
    <title>经验积累</title>
    <url>/blog/2020/10/22/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol>
<li><a href="https://segmentfault.com/a/1190000022851543">那些不常见，但却非常实用的css属性</a></li>
<li><a href="https://mp.weixin.qq.com/s/LGSW8_qv3R2NbsXmoje3Eg">24个css新特性2020</a></li>
</ol>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol>
<li><a href="https://juejin.im/post/6854573212890562573">JS开发必须知道的41个技巧</a></li>
<li><a href="https://juejin.im/post/6844904116339261447">2020年前端面试复习必读文章【超三百篇文章&#x2F;赠复习导图】</a></li>
<li><a href="https://segmentfault.com/a/1190000023941089">Javascript 里的奇葩知识</a></li>
</ol>
<h3 id="面试综合"><a href="#面试综合" class="headerlink" title="面试综合"></a>面试综合</h3><ol>
<li><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook">面试题大全直击1000K高薪</a></li>
<li><a href="https://mp.weixin.qq.com/s/6SI54bkmHAHhrWhX7R2fgQ">升级面试题目</a></li>
</ol>
<h3 id="遇到过的兼容问题"><a href="#遇到过的兼容问题" class="headerlink" title="遇到过的兼容问题"></a>遇到过的兼容问题</h3><p>1.微信内H5支付问题<br>  手机系统：iOS13、iOS14 （只在苹果手机发现）<br>  微信版本：7.0.17-7.0.18<br>  问题描述：vue history模式跳转，微信内H5支付，刷新页面会出现<code>WeixinJSBridge == &quot;undefined&quot;</code>，并且加兼容判断都没用，只能在跳转支付页时不用<code>$router.push()</code>改用<code>location.href = xx</code>方式。</p>
<h3 id="有趣的网站"><a href="#有趣的网站" class="headerlink" title="有趣的网站"></a>有趣的网站</h3><p><a href="https://www.coderutil.com/">程序员盒子</a> <a href="https://www.coderutil.com/">https://www.coderutil.com/</a><br><a href="http://bhrgz.cn/">程序员导航网</a> <a href="http://bhrgz.cn/">http://bhrgz.cn/</a></p>
<p><a href="https://nvm.uihtm.com/">https://nvm.uihtm.com/</a></p>
]]></content>
      <categories>
        <category>经验积累</category>
      </categories>
      <tags>
        <tag>经验积累</tag>
      </tags>
  </entry>
  <entry>
    <title>自购服务器搭建前端项目练手</title>
    <url>/blog/2021/06/15/%E8%87%AA%E8%B4%AD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%BB%83%E6%89%8B/</url>
    <content><![CDATA[<h4 id="我用的是Windows-server-2019系统服务器"><a href="#我用的是Windows-server-2019系统服务器" class="headerlink" title="我用的是Windows server 2019系统服务器"></a>我用的是Windows server 2019系统服务器</h4><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><span id="more"></span>
<h4 id="1、下载nginx-地址-，这里我下载的是稳定版本（stable-version）"><a href="#1、下载nginx-地址-，这里我下载的是稳定版本（stable-version）" class="headerlink" title="1、下载nginx 地址 ，这里我下载的是稳定版本（stable version）"></a>1、下载nginx <a href="http://nginx.org/en/download.html">地址</a> ，这里我下载的是稳定版本（stable version）</h4><p><img src="http://www.guoxh.com/blog/img/blog/nginx1.png"></p>
<h4 id="2、下载Windows-service-wrapper-地址-，这里我下载的最新的："><a href="#2、下载Windows-service-wrapper-地址-，这里我下载的最新的：" class="headerlink" title="2、下载Windows service wrapper 地址 ，这里我下载的最新的："></a>2、下载Windows service wrapper <a href="https://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/">地址</a> ，这里我下载的最新的：</h4><p><img src="http://www.guoxh.com/blog/img/blog/nginx2.png"></p>
<h4 id="3、将nginx压缩包解压至C盘根目录，并命名为nginx"><a href="#3、将nginx压缩包解压至C盘根目录，并命名为nginx" class="headerlink" title="3、将nginx压缩包解压至C盘根目录，并命名为nginx"></a>3、将nginx压缩包解压至C盘根目录，并命名为nginx</h4><p><img src="http://www.guoxh.com/blog/img/blog/nginx3.png"></p>
<h4 id="4、将winsw-bin-exe放入nginx目录下，重命名为nginx-service-exe。在此目录下添加文件nginx-service-xml"><a href="#4、将winsw-bin-exe放入nginx目录下，重命名为nginx-service-exe。在此目录下添加文件nginx-service-xml" class="headerlink" title="4、将winsw-bin.exe放入nginx目录下，重命名为nginx-service.exe。在此目录下添加文件nginx-service.xml"></a>4、将winsw-bin.exe放入nginx目录下，重命名为nginx-service.exe。在此目录下添加文件nginx-service.xml</h4><p><img src="http://www.guoxh.com/blog/img/blog/nginx4.png"></p>
<p><code>nginx-service.xml</code>文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>Nginx<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nginx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">decription</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">decription</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logpath</span>&gt;</span>C:\nginx\logs<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executable</span>&gt;</span>nginx.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stopexecutable</span>&gt;</span>nginx.exe<span class="tag">&lt;/<span class="name">stopexecutable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stopargument</span>&gt;</span>-s<span class="tag">&lt;/<span class="name">stopargument</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stopargument</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">stopargument</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logmode</span>&gt;</span>rotate<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5、安装nginx系统服务，打开cmd"><a href="#5、安装nginx系统服务，打开cmd" class="headerlink" title="5、安装nginx系统服务，打开cmd"></a>5、安装nginx系统服务，打开cmd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意要定位到nginx目录下</span></span><br><span class="line"><span class="comment"># 安装nginx服务</span></span><br><span class="line">C:\nginx&gt;nginx-service.exe install</span><br><span class="line"><span class="comment"># 卸载nginx服务</span></span><br><span class="line">C:\nginx&gt;nginx-service.exe uninstall</span><br></pre></td></tr></table></figure>

<h4 id="6、命令行方式操作nginx服务"><a href="#6、命令行方式操作nginx服务" class="headerlink" title="6、命令行方式操作nginx服务"></a>6、命令行方式操作nginx服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意要定位到nginx目录下</span></span><br><span class="line"><span class="comment"># nginx服务启动</span></span><br><span class="line">C:\nginx&gt;net start nginx</span><br><span class="line"><span class="comment"># nginx服务停止</span></span><br><span class="line">C:\nginx&gt;net stop nginx</span><br></pre></td></tr></table></figure>

<h4 id="7、浏览器中输入http-localhost-，出现下面页面即成功："><a href="#7、浏览器中输入http-localhost-，出现下面页面即成功：" class="headerlink" title="7、浏览器中输入http://localhost/，出现下面页面即成功："></a>7、浏览器中输入<code>http://localhost/</code>，出现下面页面即成功：</h4><p><img src="http://www.guoxh.com/blog/img/blog/nginx5.png"></p>
<ul>
<li>需要注意的是，如果<code>net start nginx</code>失败，则需要判断是否是端口号被占用，端口被占用两种方案，一种关闭被占用进程，一种修改nginx配置文件端口号</li>
</ul>
<blockquote>
<p>查看端口占用情况cmd输入 <code>netstat -aon | findstr :80</code> 命令</p>
</blockquote>
<p>1、关闭被占用进程：<br><img src="http://www.guoxh.com/blog/img/blog/nginx6.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入最后的数字查找对应进程，例如：</span></span><br><span class="line">tasklist|findstr <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后在计算机的服务里停止对应的服务，解除占用</p>
<p>2、修改nginx配置文件端口号，推荐这种方式，简单粗暴：<br>打开<code>conf</code>文件夹中<code>nginx.conf</code>文件，修改文件中：<br><img src="http://www.guoxh.com/blog/img/blog/nginx7.png"><br>改为其他端口号，如：8080；<br>cmd命令打开，输入<code>nginx -t</code>测试，会显示测试成功；<br>然后就可以<code>net start nginx</code></p>
<h4 id="8、发布前端vue项目"><a href="#8、发布前端vue项目" class="headerlink" title="8、发布前端vue项目"></a>8、发布前端vue项目</h4><p>1.本地<code>win + R</code>输入<code>mstsc</code>打开远程控制窗口，连接远程服务器；</p>
<ul>
<li>注意勾选显示选项：<br><img src="http://www.guoxh.com/blog/img/blog/nginx8.png"></li>
<li>选择本地资源-详细信息-勾选驱动器，这样做的目的是可以在远程服务器访问本地磁盘文件：<br><img src="http://www.guoxh.com/blog/img/blog/nginx9.png"><br><img src="http://www.guoxh.com/blog/img/blog/nginx10.png"></li>
</ul>
<p>2.在远程服务器文件管理中我们可以看到<code>重定向的程序和文件夹</code>在里面我们可以找到本地项目，copy到远程服务器中，修改对应nginx配置root为项目路径：<br><img src="http://www.guoxh.com/blog/img/blog/nginx12.png"></p>
<p>2.单页面项目配置history模式路由，nginx对应配置：<br>打开<code>conf</code>文件夹中<code>nginx.conf</code>文件，修改文件中：<br><img src="http://www.guoxh.com/blog/img/blog/nginx11.png"><br>我这个项目部署的是子目录，所以我这里加了<code>/vue-next/</code>子路径，如果是根目录部署，则不需要这个子路径；</p>
<h3 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h3><h3 id="jenkins删除文件操作"><a href="#jenkins删除文件操作" class="headerlink" title="jenkins删除文件操作"></a>jenkins删除文件操作</h3><p>我们会遇到jenkins打包失败的情况，可能是因为安装的包不匹配导致，所以希望删除node_modules文件夹，然后重新安装，这样就可以解决问题了:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm -rf package-lock.json //同时可以删除lock文件，防止锁定不一致的插件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>项目图片一键压缩</title>
    <url>/blog/2019/03/26/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87%E4%B8%80%E9%94%AE%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<ul>
<li>就放到vue分类下把^_^</li>
</ul>
<blockquote>
<p>感觉压缩后还是有损的，记录下，唯一的优点应该就是可以一键压缩项目中的所有图片了。。<br>相关插件地址：<br><a href="https://github.com/imagemin/imagemin">imagemin</a><br><a href="https://github.com/mozilla/mozjpeg">MozJPEG jpg图片压缩插件</a><br><a href="https://www.npmjs.com/package/imagemin-pngquant">pngquant png图片压缩插件</a></p>
</blockquote>
<h3 id="1-要使用-imagemin，请确保已安装了-Node-js，然后打开终端窗口，cd-到项目的文件夹，并运行以下命令："><a href="#1-要使用-imagemin，请确保已安装了-Node-js，然后打开终端窗口，cd-到项目的文件夹，并运行以下命令：" class="headerlink" title="1.要使用 imagemin，请确保已安装了 Node.js，然后打开终端窗口，cd 到项目的文件夹，并运行以下命令："></a>1.要使用 imagemin，请确保已安装了 Node.js，然后打开终端窗口，cd 到项目的文件夹，并运行以下命令：</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">//安装图片压缩imagemin插件</span><br><span class="line">npm install imagemin</span><br><span class="line">//使用 MozJPEG 插件压缩 JPEG</span><br><span class="line">npm install imagemin-mozjpeg</span><br><span class="line">//使用 pngquant 插件优化 PNG 图像</span><br><span class="line">npm install imagemin-pngquant</span><br></pre></td></tr></table></figure>

<h3 id="2-然后创建一个名为-imagemin-js-的新文件，并粘贴以下内容："><a href="#2-然后创建一个名为-imagemin-js-的新文件，并粘贴以下内容：" class="headerlink" title="2.然后创建一个名为 imagemin.js 的新文件，并粘贴以下内容："></a>2.然后创建一个名为 imagemin.js 的新文件，并粘贴以下内容：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是引用插件 + 准备压缩的所有图片相对路径</span></span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PNGImages</span> = <span class="string">&#x27;assets/images/*.png&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JPEGImages</span> = <span class="string">&#x27;assets/images/*.jpg&#x27;</span>;</span><br><span class="line"><span class="comment">//压缩后图片存放路径，这个路径当然也可以自定义</span></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">&#x27;build/images&#x27;</span>;</span><br><span class="line"><span class="comment">//下面是使用 MozJPEG 插件压缩 JPEG 的js相关配置</span></span><br><span class="line"><span class="keyword">const</span> imageminMozjpeg = <span class="built_in">require</span>(<span class="string">&#x27;imagemin-mozjpeg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">optimiseJPEGImages</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">imagemin</span>([<span class="title class_">JPEGImages</span>], output, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title function_">imageminMozjpeg</span>(&#123;</span><br><span class="line">        <span class="comment">//压缩质量</span></span><br><span class="line">        <span class="attr">quality</span>: <span class="number">70</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="title function_">optimiseJPEGImages</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br><span class="line"><span class="comment">//下面是使用 pngquant 插件优化 PNG 图像</span></span><br><span class="line"><span class="keyword">const</span> imageminPngquant = <span class="built_in">require</span>(<span class="string">&#x27;imagemin-pngquant&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">optimisePNGImages</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">imagemin</span>([<span class="title class_">PNGImages</span>], output, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title function_">imageminPngquant</span>(&#123; <span class="attr">quality</span>: <span class="string">&#x27;65-80&#x27;</span> &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="title function_">optimiseJPEGImages</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">optimisePNGImages</span>())</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br></pre></td></tr></table></figure>

<p>最后<br>在终端中输入<code>node imagemin.js</code>来运行这个脚本。这样就会处理所有的 JPEG，png 图像，并将优化过的图像放在 build&#x2F;images(这个路径当然也可以自定义) 文件夹中。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>后台管理引入腾讯地图</title>
    <url>/blog/2025/11/25/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%BC%95%E5%85%A5%E8%85%BE%E8%AE%AF%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;width: 100%; margin-bottom: 10px&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">      <span class="attr">remote</span></span></span><br><span class="line"><span class="tag">      <span class="attr">reserve-keyword</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入关键词&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:remote-method</span>=<span class="string">&quot;handleSearch&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">&quot;selectAddress&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;item in suggestionList&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:label</span>=<span class="string">&quot;item.title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map-wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 地图容器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mapContainer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;confirm-btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">circle</span> @<span class="attr">click</span>=<span class="string">&quot;confirmMap&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>确定&lt;/el-button</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">map</span>: <span class="literal">null</span>, <span class="comment">// 地图实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">search</span>: <span class="literal">null</span>, <span class="comment">// 搜索实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">suggest</span>: <span class="literal">null</span>, <span class="comment">// 关键字输入提示实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">markers</span>: <span class="literal">null</span>, <span class="comment">// 标记点集合</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">suggestionList</span>: [], <span class="comment">// 搜索建议列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">marker</span>: <span class="literal">null</span>, <span class="comment">// 地图标记点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">value</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//解决放大缩小地图控制台一直报错问题</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> oldAddEventListener = <span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span> = <span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="language-javascript">      key,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">      funcs,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">      options = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">    </span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      oldAddEventListener.<span class="title function_">call</span>(<span class="variable language_">this</span>, key, funcs, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">initMap</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化地图</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">initMap</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> center = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">LatLng</span>(<span class="number">39.916527</span>, <span class="number">116.397128</span>); <span class="comment">// 默认中心点（北京）</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">map</span> = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;mapContainer&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">center</span>: center,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">zoom</span>: <span class="number">12</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">search</span> = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="property">service</span>.<span class="title class_">Search</span>(&#123; <span class="attr">pageSize</span>: <span class="number">10</span> &#125;); <span class="comment">// 新建一个地点搜索类</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">suggest</span> = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="property">service</span>.<span class="title class_">Suggestion</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 新建一个关键字输入提示类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="comment">// 返回结果每页条目数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">region</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 限制城市范围</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">regionFix</span>: <span class="literal">false</span>, <span class="comment">// 搜索无结果时是否固定在当前城市</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">markers</span> = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">MultiMarker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">map</span>: <span class="variable language_">this</span>.<span class="property">map</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">geometries</span>: [],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建信息窗</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">info</span> = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">InfoWindow</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">map</span>: <span class="variable language_">this</span>.<span class="property">map</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">position</span>: <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getCenter</span>(),</span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="title function_">async</span> (evt) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清除旧标记</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">marker</span>) <span class="variable language_">this</span>.<span class="property">marker</span>.<span class="title function_">setMap</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取click事件返回的poi信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> poi = evt.<span class="property">poi</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (poi) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 拾取到POI</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">info</span>.<span class="title function_">setContent</span>(poi.<span class="property">name</span>).<span class="title function_">setPosition</span>(poi.<span class="property">latLng</span>).<span class="title function_">open</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> location = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">LatLng</span>(poi.<span class="property">latLng</span>.<span class="property">lat</span>, poi.<span class="property">latLng</span>.<span class="property">lng</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">suggest</span>.<span class="title function_">getSuggestions</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">keyword</span>: poi.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">            location,</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> currentPoi = result.<span class="property">data</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> newPoi = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: currentPoi.<span class="property">title</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: currentPoi.<span class="property">address</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">id</span>: currentPoi.<span class="property">id</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lat</span>: currentPoi.<span class="property">location</span>.<span class="property">lat</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lng</span>: currentPoi.<span class="property">location</span>.<span class="property">lng</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">selectSite</span> = newPoi;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 没有拾取到POI</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">info</span>.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 处理搜索输入（防抖）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleSearch</span>(<span class="params">query</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">searchAddress</span>(query);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用搜索建议接口</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">searchAddress</span>(<span class="params">query</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (query !== <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">suggest</span>.<span class="title function_">getSuggestions</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">keyword</span>: query,</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">showSuggestions</span>(result.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">options</span> = [];</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显示搜索结果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showSuggestions</span>(<span class="params">list</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">suggestionList</span> = list.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: item.<span class="property">title</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>: item.<span class="property">address</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>: item.<span class="property">id</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lat</span>: item.<span class="property">location</span>.<span class="property">lat</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lng</span>: item.<span class="property">location</span>.<span class="property">lng</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;));</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 选中地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">selectAddress</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="property">suggestionList</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === val);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选中地址:&quot;</span>, item);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">selectSite</span> = item;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> position = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">LatLng</span>(item.<span class="property">lat</span>, item.<span class="property">lng</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 清除旧标记</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">marker</span>) <span class="variable language_">this</span>.<span class="property">marker</span>.<span class="title function_">setMap</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 添加新标记</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">marker</span> = <span class="keyword">new</span> <span class="title class_">TMap</span>.<span class="title class_">MultiMarker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">map</span>: <span class="variable language_">this</span>.<span class="property">map</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">geometries</span>: [&#123; position &#125;],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">info</span>.<span class="title function_">setContent</span>(item.<span class="property">title</span>).<span class="title function_">setPosition</span>(position).<span class="title function_">open</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 移动地图中心</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">setCenter</span>(position);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">confirmMap</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;select&quot;</span>, <span class="variable language_">this</span>.<span class="property">selectSite</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.map-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.confirm-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">1001</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>map</tag>
      </tags>
  </entry>
</search>
